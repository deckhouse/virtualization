apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: internalvirtualizationdatavolumes.cdi.internal.virtualization.deckhouse.io
  labels:
    heritage: deckhouse
    module: virtualization
    app.kubernetes.io/component: cdi
spec:
  conversion:
    strategy: None
  group: cdi.internal.virtualization.deckhouse.io
  names:
    categories:
      - intvirt
    kind: InternalVirtualizationDataVolume
    listKind: InternalVirtualizationDataVolumeList
    plural: internalvirtualizationdatavolumes
    shortNames:
      - intvirtdv
      - intvirtdvs
    singular: internalvirtualizationdatavolume
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - description: The phase the data volume is in
          jsonPath: .status.phase
          name: Phase
          type: string
        - description: Transfer progress in percentage if known, N/A otherwise
          jsonPath: .status.progress
          name: Progress
          type: string
        - description: The number of times the transfer has been restarted.
          jsonPath: .status.restartCount
          name: Restarts
          type: integer
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: DataVolume is an abstraction on top of PersistentVolumeClaims
            to allow easy population of those PersistentVolumeClaims with relation to
            VirtualMachines
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: DataVolumeSpec defines the DataVolume type specification
              properties:
                checkpoints:
                  description: Checkpoints is a list of DataVolumeCheckpoints, representing
                    stages in a multistage import.
                  items:
                    description: DataVolumeCheckpoint defines a stage in a warm migration.
                    properties:
                      current:
                        description: Current is the identifier of the snapshot created
                          for this checkpoint.
                        type: string
                      previous:
                        description: Previous is the identifier of the snapshot from
                          the previous checkpoint.
                        type: string
                    required:
                      - current
                      - previous
                    type: object
                  type: array
                contentType:
                  description: 'DataVolumeContentType options: "kubevirt", "archive"'
                  enum:
                    - kubevirt
                    - archive
                  type: string
                finalCheckpoint:
                  description: FinalCheckpoint indicates whether the current DataVolumeCheckpoint
                    is the final checkpoint.
                  type: boolean
                preallocation:
                  description: Preallocation controls whether storage for DataVolumes
                    should be allocated in advance.
                  type: boolean
                priorityClassName:
                  description: PriorityClassName for Importer, Cloner and Uploader pod
                  type: string
                pvc:
                  description: PVC is the PVC specification
                  properties:
                    accessModes:
                      description: 'accessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                      items:
                        type: string
                      type: array
                    dataSource:
                      description: 'dataSource field can be used to specify either:
                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. When the AnyVolumeDataSource feature gate is enabled,
                      dataSource contents will be copied to dataSourceRef, and dataSourceRef
                      contents will be copied to dataSource when dataSourceRef.namespace
                      is not specified. If the namespace is specified, then dataSourceRef
                      will not be copied to dataSource.'
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being
                            referenced. If APIGroup is not specified, the specified
                            Kind must be in the core API group. For any other third-party
                            types, APIGroup is required.
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                      required:
                        - kind
                        - name
                      type: object
                      x-kubernetes-map-type: atomic
                    dataSourceRef:
                      description: 'dataSourceRef specifies the object from which to
                      populate the volume with data, if a non-empty volume is desired.
                      This may be any object from a non-empty API group (non core
                      object) or a PersistentVolumeClaim object. When this field is
                      specified, volume binding will only succeed if the type of the
                      specified object matches some installed volume populator or
                      dynamic provisioner. This field will replace the functionality
                      of the dataSource field and as such if both fields are non-empty,
                      they must have the same value. For backwards compatibility,
                      when namespace isn''t specified in dataSourceRef, both fields
                      (dataSource and dataSourceRef) will be set to the same value
                      automatically if one of them is empty and the other is non-empty.
                      When namespace is specified in dataSourceRef, dataSource isn''t
                      set to the same value and must be empty. There are three important
                      differences between dataSource and dataSourceRef: * While dataSource
                      only allows two specific types of objects, dataSourceRef allows
                      any non-core object, as well as PersistentVolumeClaim objects.
                      * While dataSource ignores disallowed values (dropping them),
                      dataSourceRef preserves all values, and generates an error if
                      a disallowed value is specified. * While dataSource only allows
                      local objects, dataSourceRef allows objects in any namespaces.
                      (Beta) Using this field requires the AnyVolumeDataSource feature
                      gate to be enabled. (Alpha) Using the namespace field of dataSourceRef
                      requires the CrossNamespaceVolumeDataSource feature gate to
                      be enabled.'
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being
                            referenced. If APIGroup is not specified, the specified
                            Kind must be in the core API group. For any other third-party
                            types, APIGroup is required.
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                        namespace:
                          description: Namespace is the namespace of resource being
                            referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                            object is required in the referent namespace to allow that
                            namespace's owner to accept the reference. See the ReferenceGrant
                            documentation for details. (Alpha) This field requires the
                            CrossNamespaceVolumeDataSource feature gate to be enabled.
                          type: string
                      required:
                        - kind
                        - name
                      type: object
                    resources:
                      description: 'resources represents the minimum resources the volume
                      should have. If RecoverVolumeExpansionFailure feature is enabled
                      users are allowed to specify resource requirements that are
                      lower than previous value but must still be higher than capacity
                      recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                      properties:
                        claims:
                          description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: Name must match the name of one entry in
                                  pod.spec.resourceClaims of the Pod where this field
                                  is used. It makes that resource available inside a
                                  container.
                                type: string
                            required:
                              - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                            - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                      type: object
                    selector:
                      description: selector is a label query over volumes to consider
                        for binding.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If
                                  the operator is In or NotIn, the values array must
                                  be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. This array is replaced
                                  during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                              - key
                              - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs. A
                            single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is "key",
                            the operator is "In", and the values array contains only
                            "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                    storageClassName:
                      description: 'storageClassName is the name of the StorageClass
                      required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                      type: string
                    volumeMode:
                      description: volumeMode defines what type of volume is required
                        by the claim. Value of Filesystem is implied when not included
                        in claim spec.
                      type: string
                    volumeName:
                      description: volumeName is the binding reference to the PersistentVolume
                        backing this claim.
                      type: string
                  type: object
                source:
                  description: Source is the src of the data for the requested DataVolume
                  properties:
                    blank:
                      description: DataVolumeBlankImage provides the parameters to create
                        a new raw blank image for the PVC
                      type: object
                    gcs:
                      description: DataVolumeSourceGCS provides the parameters to create
                        a Data Volume from an GCS source
                      properties:
                        secretRef:
                          description: SecretRef provides the secret reference needed
                            to access the GCS source
                          type: string
                        url:
                          description: URL is the url of the GCS source
                          type: string
                      required:
                        - url
                      type: object
                    http:
                      description: DataVolumeSourceHTTP can be either an http or https
                        endpoint, with an optional basic auth user name and password,
                        and an optional configmap containing additional CAs
                      properties:
                        certConfigMap:
                          description: CertConfigMap is a configmap reference, containing
                            a Certificate Authority(CA) public key, and a base64 encoded
                            pem certificate
                          type: string
                        extraHeaders:
                          description: ExtraHeaders is a list of strings containing
                            extra headers to include with HTTP transfer requests
                          items:
                            type: string
                          type: array
                        secretExtraHeaders:
                          description: SecretExtraHeaders is a list of Secret references,
                            each containing an extra HTTP header that may include sensitive
                            information
                          items:
                            type: string
                          type: array
                        secretRef:
                          description: SecretRef A Secret reference, the secret should
                            contain accessKeyId (user name) base64 encoded, and secretKey
                            (password) also base64 encoded
                          type: string
                        url:
                          description: URL is the URL of the http(s) endpoint
                          type: string
                      required:
                        - url
                      type: object
                    imageio:
                      description: DataVolumeSourceImageIO provides the parameters to
                        create a Data Volume from an imageio source
                      properties:
                        certConfigMap:
                          description: CertConfigMap provides a reference to the CA
                            cert
                          type: string
                        diskId:
                          description: DiskID provides id of a disk to be imported
                          type: string
                        secretRef:
                          description: SecretRef provides the secret reference needed
                            to access the ovirt-engine
                          type: string
                        url:
                          description: URL is the URL of the ovirt-engine
                          type: string
                      required:
                        - diskId
                        - url
                      type: object
                    pvc:
                      description: DataVolumeSourcePVC provides the parameters to create
                        a Data Volume from an existing PVC
                      properties:
                        name:
                          description: The name of the source PVC
                          type: string
                        namespace:
                          description: The namespace of the source PVC
                          type: string
                      required:
                        - name
                        - namespace
                      type: object
                    registry:
                      description: DataVolumeSourceRegistry provides the parameters
                        to create a Data Volume from an registry source
                      properties:
                        certConfigMap:
                          description: CertConfigMap provides a reference to the Registry
                            certs
                          type: string
                        imageStream:
                          description: ImageStream is the name of image stream for import
                          type: string
                        pullMethod:
                          description: PullMethod can be either "pod" (default import),
                            or "node" (node docker cache based import)
                          type: string
                        secretRef:
                          description: SecretRef provides the secret reference needed
                            to access the Registry source
                          type: string
                        url:
                          description: 'URL is the url of the registry source (starting
                          with the scheme: docker, oci-archive)'
                          type: string
                      type: object
                    s3:
                      description: DataVolumeSourceS3 provides the parameters to create
                        a Data Volume from an S3 source
                      properties:
                        certConfigMap:
                          description: CertConfigMap is a configmap reference, containing
                            a Certificate Authority(CA) public key, and a base64 encoded
                            pem certificate
                          type: string
                        secretRef:
                          description: SecretRef provides the secret reference needed
                            to access the S3 source
                          type: string
                        url:
                          description: URL is the url of the S3 source
                          type: string
                      required:
                        - url
                      type: object
                    snapshot:
                      description: DataVolumeSourceSnapshot provides the parameters
                        to create a Data Volume from an existing VolumeSnapshot
                      properties:
                        name:
                          description: The name of the source VolumeSnapshot
                          type: string
                        namespace:
                          description: The namespace of the source VolumeSnapshot
                          type: string
                      required:
                        - name
                        - namespace
                      type: object
                    upload:
                      description: DataVolumeSourceUpload provides the parameters to
                        create a Data Volume by uploading the source
                      type: object
                    vddk:
                      description: DataVolumeSourceVDDK provides the parameters to create
                        a Data Volume from a Vmware source
                      properties:
                        backingFile:
                          description: BackingFile is the path to the virtual hard disk
                            to migrate from vCenter/ESXi
                          type: string
                        initImageURL:
                          description: InitImageURL is an optional URL to an image containing
                            an extracted VDDK library, overrides v2v-vmware config map
                          type: string
                        secretRef:
                          description: SecretRef provides a reference to a secret containing
                            the username and password needed to access the vCenter or
                            ESXi host
                          type: string
                        thumbprint:
                          description: Thumbprint is the certificate thumbprint of the
                            vCenter or ESXi host
                          type: string
                        url:
                          description: URL is the URL of the vCenter or ESXi host with
                            the VM to migrate
                          type: string
                        uuid:
                          description: UUID is the UUID of the virtual machine that
                            the backing file is attached to in vCenter/ESXi
                          type: string
                      type: object
                  type: object
                sourceRef:
                  description: SourceRef is an indirect reference to the source of data
                    for the requested DataVolume
                  properties:
                    kind:
                      description: The kind of the source reference, currently only
                        "DataSource" is supported
                      type: string
                    name:
                      description: The name of the source reference
                      type: string
                    namespace:
                      description: The namespace of the source reference, defaults to
                        the DataVolume namespace
                      type: string
                  required:
                    - kind
                    - name
                  type: object
                storage:
                  description: Storage is the requested storage specification
                  properties:
                    accessModes:
                      description: 'AccessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                      items:
                        type: string
                      type: array
                    dataSource:
                      description: 'This field can be used to specify either: * An existing
                      VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) * An existing custom
                      resource that implements data population (Alpha) In order to
                      use custom resource types that implement data population, the
                      AnyVolumeDataSource feature gate must be enabled. If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. If the AnyVolumeDataSource feature gate is enabled,
                      this field will always have the same contents as the DataSourceRef
                      field.'
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being
                            referenced. If APIGroup is not specified, the specified
                            Kind must be in the core API group. For any other third-party
                            types, APIGroup is required.
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                      required:
                        - kind
                        - name
                      type: object
                      x-kubernetes-map-type: atomic
                    dataSourceRef:
                      description: 'Specifies the object from which to populate the
                      volume with data, if a non-empty volume is desired. This may
                      be any local object from a non-empty API group (non core object)
                      or a PersistentVolumeClaim object. When this field is specified,
                      volume binding will only succeed if the type of the specified
                      object matches some installed volume populator or dynamic provisioner.
                      This field will replace the functionality of the DataSource
                      field and as such if both fields are non-empty, they must have
                      the same value. For backwards compatibility, both fields (DataSource
                      and DataSourceRef) will be set to the same value automatically
                      if one of them is empty and the other is non-empty. There are
                      two important differences between DataSource and DataSourceRef:
                      * While DataSource only allows two specific types of objects,
                      DataSourceRef allows any non-core object, as well as PersistentVolumeClaim
                      objects. * While DataSource ignores disallowed values (dropping
                      them), DataSourceRef preserves all values, and generates an
                      error if a disallowed value is specified. (Beta) Using this
                      field requires the AnyVolumeDataSource feature gate to be enabled.'
                      properties:
                        apiGroup:
                          description: APIGroup is the group for the resource being
                            referenced. If APIGroup is not specified, the specified
                            Kind must be in the core API group. For any other third-party
                            types, APIGroup is required.
                          type: string
                        kind:
                          description: Kind is the type of resource being referenced
                          type: string
                        name:
                          description: Name is the name of resource being referenced
                          type: string
                        namespace:
                          description: Namespace is the namespace of resource being
                            referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                            object is required in the referent namespace to allow that
                            namespace's owner to accept the reference. See the ReferenceGrant
                            documentation for details. (Alpha) This field requires the
                            CrossNamespaceVolumeDataSource feature gate to be enabled.
                          type: string
                      required:
                        - kind
                        - name
                      type: object
                    resources:
                      description: 'Resources represents the minimum resources the volume
                      should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                      properties:
                        claims:
                          description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: Name must match the name of one entry in
                                  pod.spec.resourceClaims of the Pod where this field
                                  is used. It makes that resource available inside a
                                  container.
                                type: string
                            required:
                              - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                            - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                      type: object
                    selector:
                      description: A label query over volumes to consider for binding.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If
                                  the operator is In or NotIn, the values array must
                                  be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. This array is replaced
                                  during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                              - key
                              - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs. A
                            single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is "key",
                            the operator is "In", and the values array contains only
                            "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                    storageClassName:
                      description: 'Name of the StorageClass required by the claim.
                      More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                      type: string
                    volumeMode:
                      description: volumeMode defines what type of volume is required
                        by the claim. Value of Filesystem is implied when not included
                        in claim spec.
                      type: string
                    volumeName:
                      description: VolumeName is the binding reference to the PersistentVolume
                        backing this claim.
                      type: string
                  type: object
              type: object
            status:
              description: DataVolumeStatus contains the current status of the DataVolume
              properties:
                claimName:
                  description: ClaimName is the name of the underlying PVC used by the
                    DataVolume.
                  type: string
                conditions:
                  items:
                    description: DataVolumeCondition represents the state of a data
                      volume condition.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        type: string
                      status:
                        type: string
                      type:
                        description: DataVolumeConditionType is the string representation
                          of known condition types
                        type: string
                    required:
                      - status
                      - type
                    type: object
                  type: array
                phase:
                  description: Phase is the current phase of the data volume
                  type: string
                progress:
                  description: DataVolumeProgress is the current progress of the DataVolume
                    transfer operation. Value between 0 and 100 inclusive, N/A if not
                    available
                  type: string
                restartCount:
                  description: RestartCount is the number of times the pod populating
                    the DataVolume has restarted
                  format: int32
                  type: integer
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
