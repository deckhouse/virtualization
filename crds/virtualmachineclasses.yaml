---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: virtualmachineclasses.virtualization.deckhouse.io
spec:
  group: virtualization.deckhouse.io
  names:
    categories:
      - virtualization
    kind: VirtualMachineClass
    listKind: VirtualMachineClassList
    plural: virtualmachineclasses
    shortNames:
      - vmc
      - vmcs
    singular: virtualmachineclass
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - description: VirtualMachineClass phase.
          jsonPath: .status.phase
          name: Phase
          type: string
        - description: Time of creation resource.
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha2
      schema:
        openAPIV3Schema:
          description: |-
            VirtualMachineClass resource describes a cpu requirements, node placement and sizing policy for VM resources.
            A resource cannot be deleted as long as it is used in one of the VMs.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              properties:
                cpu:
                  description: CPU defines the requirements for the virtual CPU model.
                  properties:
                    discovery:
                      description:
                        Create CPU model based on an intersection CPU features
                        for selected nodes.
                      properties:
                        matchExpressions:
                          description:
                            matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: |-
                              A label selector requirement is a selector that contains values, a key, and an operator that
                              relates the key and values.
                            properties:
                              key:
                                description:
                                  key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: |-
                                  operator represents a key's relationship to a set of values.
                                  Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: |-
                                  values is an array of string values. If the operator is In or NotIn,
                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. This array is replaced during a strategic
                                  merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                              - key
                              - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: |-
                            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                            map is equivalent to an element of matchExpressions, whose key field is "key", the
                            operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                    features:
                      description:
                        Required instructions for the CPU as a list More
                        information about features [here](https://libvirt.org/formatdomain.html#cpu-model-and-topology)
                      example:
                        - mmx
                        - vmx
                        - sse2
                      items:
                        type: string
                      minItems: 1
                      type: array
                    model:
                      description:
                        The name of CPU model. More information about models
                        [here](https://libvirt.org/formatdomain.html#cpu-model-and-topology)
                      example: IvyBridge
                      minLength: 1
                      type: string
                    type:
                      description: |-
                        CPUType defines cpu type, the following options are supported:
                        * `Host` - use the virtual CPU closest to the host. This offers maximum functionality and performance, includes crucial guest CPU flags for security, and assesses live migration compatibility.
                        * `HostPassthrough` - use the host's physical CPU directly with no modifications. In `HostPassthrough` mode, the guest can only be live-migrated to a target host that matches the source host extremely closely.
                        * `Discovery` - create a CPU model based on an intersecton CPU features for selected nodes.
                        * `Model` - CPU model name. A CPU model is a named and previously defined set of supported CPU instructions.
                        * `Features` - the required set of supported instructions for the CPU.
                      enum:
                        - Host
                        - HostPassthrough
                        - Discovery
                        - Model
                        - Features
                      type: string
                  required:
                    - type
                  type: object
                  x-kubernetes-validations:
                    - message:
                        HostPassthrough and Host cannot have model, features or
                        discovery
                      rule:
                        "self.type == 'HostPassthrough' || self.type == 'Host'
                        ? !has(self.model) && !has(self.features) && !has(self.discovery)
                        : true"
                    - message: Discovery cannot have model or features
                      rule:
                        "self.type == 'Discovery' ? !has(self.model) && !has(self.features)
                        : true"
                    - message: Model requires model and cannot have features or discovery
                      rule:
                        "self.type == 'Model' ? has(self.model) && !has(self.features)
                        && !has(self.discovery) : true"
                    - message: Features requires features and cannot have model or discovery
                      rule:
                        "self.type == 'Features' ? has(self.features) && !has(self.model)
                        && !has(self.discovery): true"
                nodeSelector:
                  description:
                    NodeSelector defines selects the nodes that are targeted
                    to VM scheduling.
                  properties:
                    matchExpressions:
                      items:
                        description: |-
                          A node selector requirement is a selector that contains values, a key, and an operator
                          that relates the key and values.
                        properties:
                          key:
                            description: The label key that the selector applies to.
                            type: string
                          operator:
                            description: |-
                              Represents a key's relationship to a set of values.
                              Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                            type: string
                          values:
                            description: |-
                              An array of string values. If the operator is In or NotIn,
                              the values array must be non-empty. If the operator is Exists or DoesNotExist,
                              the values array must be empty. If the operator is Gt or Lt, the values
                              array must have a single element, which will be interpreted as an integer.
                              This array is replaced during a strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                          - key
                          - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: |-
                        A map of {key,value} pairs.
                        A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value".
                        The requirements are ANDed.
                      type: object
                  required:
                    - matchExpressions
                    - matchLabels
                  type: object
                sizingPolicies:
                  items:
                    description: |-
                      SizingPolicy define policy for allocating computational resources to VMs.
                      It is represented as a list.
                      The cores.min - cores.max ranges for different elements of the list must not overlap.
                    properties:
                      coreFractions:
                        description: Allowed values of the `coreFraction` parameter.
                        enum:
                          - 5
                          - 10
                          - 20
                          - 50
                          - 100
                        items:
                          type: integer
                        type: array
                      cores:
                        description:
                          The policy applies for a specified range of the
                          number of CPU cores.
                        properties:
                          max:
                            description: Maximum cpu core count.
                            example: 10
                            maximum: 1024
                            type: integer
                          min:
                            description: Minimum cpu core count.
                            example: 1
                            minimum: 1
                            type: integer
                          step:
                            description:
                              Increase step of cpu core count from min to
                              max.
                            example: 1
                            minimum: 1
                            type: integer
                        required:
                          - max
                          - min
                        type: object
                        x-kubernetes-validations:
                          - message: The maximum must be greater than the minimum
                            rule: self.max > self.min
                          - message: The maximum must be greater than the step
                            rule: "has(self.step) ? self.max > self.step : true"
                      dedicatedCores:
                        description: Allowed `dedicatedCores` parameter.
                        type: boolean
                      memory:
                        description: Memory sizing policy.
                        properties:
                          max:
                            anyOf:
                              - type: integer
                              - type: string
                            description: Maximum amount of memory.
                            example: 8Gi
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          min:
                            anyOf:
                              - type: integer
                              - type: string
                            description: Minimum amount of memory.
                            example: 1Gi
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          perCore:
                            description: Amount of memory per CPU core.
                            properties:
                              max:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: Maximum amount of memory.
                                example: 8Gi
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              min:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: Minimum amount of memory.
                                example: 1Gi
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                            type: object
                          step:
                            anyOf:
                              - type: integer
                              - type: string
                            description: Increase step of memory size from min to max.
                            example: 512Mi
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                        required:
                          - perCore
                          - step
                        type: object
                    type: object
                  type: array
              required:
                - cpu
              type: object
            status:
              properties:
                availableNodes:
                  description: |-
                    A list of nodes that support this CPU model.
                    It is not displayed for the types: `Host`, `HostPassthrough`
                  example:
                    - node-1
                    - node-2
                  items:
                    type: string
                  type: array
                conditions:
                  items:
                    description:
                      "Condition contains details for one aspect of the current
                      state of this API Resource.\n---\nThis struct is intended for
                      direct use as an array at the field path .status.conditions.  For
                      example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                      observations of a foo's current state.\n\t    // Known .status.conditions.type
                      are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                      +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                      \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                      patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                      \   // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                cpuFeatures:
                  description: |-
                    CpuFeatures
                    Information on CPU features for this model.
                    Shown only for types `Features` or `Discovery`.
                  properties:
                    enabled:
                      description: " A list of CPU features for this model."
                      example:
                        - mmx
                        - vmx
                        - sse2
                      items:
                        type: string
                      type: array
                    notEnabledCommon:
                      description:
                        A list of unused processor features additionally
                        available for a given group of nodes.
                      example:
                        - ssse3
                        - vme
                      items:
                        type: string
                      type: array
                  required:
                    - enabled
                    - notEnabledCommon
                  type: object
                observedGeneration:
                  description: The generation last processed by the controller
                  format: int64
                  type: integer
                phase:
                  description: |-
                    VirtualMachineClassPhase defines current status of resource:
                    * Pending - resource is not ready, waits until suitable nodes supporting the required CPU model become available.
                    * Ready - the resource is ready and available for use.
                    * Terminating - the resource is terminating.
                  enum:
                    - Pending
                    - Ready
                    - Terminating
                  type: string
              required:
                - availableNodes
                - cpuFeatures
                - phase
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
