apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: virtualimages.virtualization.deckhouse.io
  labels:
    heritage: deckhouse
    module: virtualization
spec:
  group: virtualization.deckhouse.io
  scope: Namespaced
  names:
    categories:
      - all
      - virtualization
    plural: virtualimages
    singular: virtualimage
    kind: VirtualImage
    shortNames:
      - vi
      - vis
  preserveUnknownFields: false
  versions:
    - name: v1alpha2
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          description: |
            This resource describes a virtual disk image or installation image (iso) that can be used as a data source for new `VirtualDisks` or can be mounted in `Virtuals`.

            > This resource cannot be modified once it has been created.

            A container image is created under the hood of this resource, which is stored in a dedicated deckhouse virtualization container registy (DVCR) or PVC, into which the data from the source is filled.
          required:
            - spec
          x-kubernetes-validations:
            - rule: "self.metadata.name.size() <= 128"
              message: "The name must be no longer than 128 characters."
          properties:
            spec:
              type: object
              required:
                - storage
                - dataSource
              properties:
                storage:
                  type: string
                  enum:
                    - "ContainerRegistry"
                    - "Kubernetes"
                  default: ContainerRegistry
                  description: |
                    Storage type to store the image for current virtualization setup.

                    * `ContainerRegistry` — use a dedicated deckhouse virtualization container registry (DVCR). In this case, images will be downloaded and injected to a container, then pushed to a DVCR (shipped with the virtualization module).
                    * `Kubernetes` - use a Persistent Volume Claim (PVC).
                dataSource:
                  type: object
                  description: |
                    An origin of the image.
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      enum:
                        - "HTTP"
                        - "ContainerImage"
                        - "ObjectRef"
                        - "Upload"
                      description: |
                        The type of an origin of the image. Options are:

                        * `HTTP` — fill the image with data from some external http/https url.
                        * `ContainerImage` — use an image, stored in container registry image.
                        * `ObjectRef` — fill the disk from another existing resource.
                        * `Upload` — fill the image with data, uploaded by user via the special interface.
                    http:
                      type: object
                      description: |
                        Fill the image with data from some external url. Supported schemas are:

                        * http
                        * https

                        For https schema there is an option to skip TLS verification.
                      required:
                        - url
                      properties:
                        url:
                          type: string
                          example: "https://mirror.example.com/images/slackware-15.qcow.gz"
                          # https://regex101.com/r/2zx8as/1
                          pattern: ^http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$
                          description: |
                            The http url with an image. The following formats are supported:
                            * qcow2
                            * vmdk
                            * vdi
                            * iso
                            * raw
                            these formats can also be compressed with the following formats:
                            * gz
                            * xz
                        caBundle:
                          type: string
                          format: byte
                          description: The CA chain in base64 format to verify the url.
                          example: |
                            YWFhCg==
                        checksum:
                          type: object
                          description: |
                            A checksum of the file, provided by the url, to verify if it was downloaded correctly or wasn't changed. The file should match all specified checksums.
                          properties:
                            md5:
                              description: ""
                              type: string
                              pattern: ^[0-9a-fA-F]{32}$
                              minLength: 32
                              maxLength: 32
                              example: f3b59bed9f91e32fac1210184fcff6f5
                            sha256:
                              description: ""
                              type: string
                              pattern: ^[0-9a-fA-F]{64}$
                              minLength: 64
                              maxLength: 64
                              example: 78be890d71dde316c412da2ce8332ba47b9ce7a29d573801d2777e01aa20b9b5
                    containerImage:
                      type: object
                      required:
                        - image
                      description: |
                        Use an image stored in external container regitry. Only TLS enabled registries are supported. Use caBundle field to provide custom CA chain if needed.
                      properties:
                        image:
                          type: string
                          example: "registry.example.com/images/slackware:15"
                          # https://regex101.com/r/NXfP8Y/1
                          pattern: ^(?P<name>(?:(?P<domain>(?:(?:localhost|[\w-]+(?:\.[\w-]+)+)(?::\d+)?)|[\w]+:\d+)/)?(?P<image>[a-z0-9_.-]+(?:/[a-z0-9_.-]+)*))(?::(?P<tag>[\w][\w.-]{0,127}))?(?:@(?P<digest>[A-Za-z][A-Za-z0-9]*(?:[+.-_][A-Za-z][A-Za-z0-9]*)*:[0-9a-fA-F]{32,}))?$
                          description: |
                            The container registry address of an image.
                        imagePullSecret:
                          type: object
                          properties:
                            name:
                              type: string
                              description: |
                                A name of the secret containing registry credentials which must be located in the same namespace.
                        caBundle:
                          type: string
                          format: byte
                          description: |
                            The CA chain in base64 format to verify the container registry.
                          example: |
                            YWFhCg==
                    objectRef:
                      type: object
                      description: |
                        Use an existing `VirtualImage`, `ClusterVirtualImage` or `VirtualDisk` to create an image.
                      required: ["kind", "name"]
                      properties:
                        kind:
                          type: string
                          description: A kind of existing `VirtualImage`, `ClusterVirtualImage` or `VirtualDisk`.
                          enum:
                            - "ClusterVirtualImage"
                            - "VirtualImage"
                            - "VirtualDisk"
                        name:
                          type: string
                          description: |
                            A name of existing `VirtualImage`, `ClusterVirtualImage` or `VirtualDisk`.
                  oneOf:
                    - properties:
                        type:
                          enum: ["HTTP"]
                        http: {}
                      required: ["http"]
                    - properties:
                        type:
                          enum: ["ContainerImage"]
                        containerImage: {}
                      required: ["containerImage"]
                    - properties:
                        type:
                          enum: ["ObjectRef"]
                        objectRef: {}
                      required: ["objectRef"]
                    - properties:
                        type:
                          enum: ["Upload"]
            status:
              type: object
              properties:
                conditions:
                  description: |
                    The latest available observations of an object's current state.
                  items:
                    description:
                      "Condition contains details for one aspect of the current
                      state of this API Resource.\n---\nThis struct is intended for
                      direct use as an array at the field path .status.conditions.  For
                      example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                      observations of a foo's current state.\n\t    // Known .status.conditions.type
                      are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                      +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                      \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                      patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                      \   // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                downloadSpeed:
                  type: object
                  description: |
                    Image download speed from an external source. Appears only during the `Provisioning' phase.
                  properties:
                    avg:
                      type: string
                      example: 1 Mbps
                      description: |
                        Average download speed.
                    current:
                      type: string
                      example: 5 Mbps
                      description: |
                        Current download speed.
                    avgBytes:
                      type: string
                      example: 1012345
                      description: |
                        Average download speed in bytes per second.
                    currentBytes:
                      type: string
                      example: 5123456
                      description: |
                        Current download speed in bytes per second.
                format:
                  type: string
                  description: |
                    Discovered format of the image.
                size:
                  type: object
                  description: |
                    Discovered sizes of the image.
                  properties:
                    stored:
                      type: string
                      example: 199M
                      description: |
                        Image size in DVCR in human-readable format.
                    storedBytes:
                      type: string
                      example: 199001234
                      description: |
                        Image size in DVCR in bytes.
                    unpacked:
                      type: string
                      example: 1G
                      description: |
                        Unpacked image size in human-readable format.
                    unpackedBytes:
                      type: string
                      example: 1000000234
                      description: |
                        Unpacked image size in bytes.
                cdrom:
                  type: boolean
                  description: |
                    Whether the image is a format that is supposed to be mounted as a cdrom, such as iso and so on.
                target:
                  type: object
                  properties:
                    registryURL:
                      type: string
                      example: dvcr.<dvcr-namespace>.svc/vi/<image-namespace>/<image-name>:latest
                      description: |
                        Created image in DVCR.
                    persistentVolumeClaimName:
                      type: string
                      description: |
                        Created PersistentVolumeClaim name for Kubernetes storage.
                phase:
                  type: string
                  description: |
                    Current status of `VirtualImage` resource:

                    * Pending - The resource has been created and is on a waiting queue.
                    * Provisioning - The process of resource creation (copying/downloading/building the image) is in progress.
                    * WaitForUserUpload - Waiting for the user to upload the image. The endpoint to upload the image is specified in `.status.uploadCommand`.
                    * Ready - The resource is created and ready to use.
                    * Failed - There was a problem when creating a resource.
                    * PVCLost - The child PVC of the resource is missing. The resource cannot be used.
                    * Terminating - The process of resource deletion is in progress.

                  enum:
                    [
                      "Pending",
                      "Provisioning",
                      "WaitForUserUpload",
                      "Ready",
                      "Failed",
                      "PVCLost",
                      "Terminating",
                    ]
                progress:
                  type: string
                  description: |
                    Progress of copying an image from source to DVCR.
                uploadCommand:
                  type: string
                  description: |
                    Deprecated. Use imageUploadURLs instead.
                imageUploadURLs:
                  type: object
                  properties:
                    external:
                      type: string
                      description: |
                        Command to upload the image using `Ingress` from outside the cluster.
                    inCluster:
                      type: string
                      description: |
                        Command to upload the image using `Service` within the cluster.
                sourceUID:
                  type: string
                  description: |
                    The UID of the source (`VirtualImage`, `ClusterVirtualImage` or `VirtualDisk`) used when creating the virtual image.
                observedGeneration:
                  type: integer
                  description: |
                    The generation last processed by the controller.
      additionalPrinterColumns:
        - name: Phase
          type: string
          jsonPath: .status.phase
        - name: CDROM
          type: boolean
          jsonPath: .status.cdrom
        - name: Progress
          type: string
          jsonPath: .status.progress
        - name: StoredSize
          type: string
          jsonPath: .status.size.stored
          priority: 1
        - name: UnpackedSize
          type: string
          jsonPath: .status.size.unpacked
          priority: 1
        - name: Registry URL
          jsonPath: .status.target.registryURL
          type: string
          priority: 1
        - name: TargetPVC
          jsonPath: .status.target.persistentVolumeClaimName
          type: string
          priority: 1
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
      subresources:
        status: {}
