spec:
  versions:
    - name: v1alpha2
      schema:
        openAPIV3Schema:
          description: |
            Данный ресурс описывает:
            - требования к виртуальному CPU
            - требования размещения ВМ на узлах
            - политику определения размера ресурсов ВМ.

            Этот ресурс не может быть удален, пока он используется в одной из ВМ.
          properties:
            spec:
              properties:
                cpu:
                  description: |
                    Блок описания требований к виртуальному CPU.
                  properties:
                    discovery:
                      description: |
                        Создать универсальную модель виртуального CPU на основе наборов инструкций, которые поддерживаются на всех физических CPU узлов выборки.

                        Допустим, у нас есть выборка из трех узлов, где на каждом узле есть физические CPU с различными наборами инструкций.
                        Набор инструкций физического CPU узла 1: [f1, f2, f3, f4], для узла 2: [f1, f2], и для узла 3: [f1, f2, f3].
                        Для создания универсальной модели CPU для этой выборки узлов, необходимо объединить общие инструкции, присущие всем узлам, то есть [f1, f2].
                        В результате мы получим виртуальный CPU с набором инструкций [f1, f2]

                      properties:
                        nodeSelector:
                          description: |
                            Выборка узлов, на основе которой будет создана универсальная модель CPU.
                          properties:
                            matchExpressions:
                              description: |
                                Список селекторов лейблов. Требования селекторов объединяются. Т.е. должны выполнятся все условия списка.
                                Под лейблом понимается пара: `ключ = значение`.

                              items:
                                description: |
                                  Описание селекторов лейблов.
                                properties:
                                  key:
                                    description: |
                                      Название ключа лейбла, к которому применятся селектор.
                                  operator:
                                    description: |
                                      Оператор определяет отношение ключа лейбла к набору его значений.
                                      Допустимые операторы: `In`, `NotIn`, `Exists` и `DoesNotExist`:
                                      `In` - значение ключа лейбла входит в заданный список лейблов `values`.
                                      `NotIn`  - значение ключа лейбла не входит в заданный список лейблов `values`.
                                      `Exist` - ключ лейбла существует.
                                      `DoesNotExist`  - ключа лейбла не существует.
                                  values:
                                    description: |
                                      Строковый список значений. Если оператор `In` или `NotIn`, список значений должен быть непустым. Если оператор `Exists` или `DoesNotExist`, список значений должен быть пустым.
                            matchLabels:
                              description: |
                                Карта пар `ключ=значение`. Один `ключ=значение` для matchLabels эквивалентен элементу matchExpressions, ключевым полем которого является «ключ», оператором - «In», а список значений содержит только «значение».

                                Для выборки по данному критерию все значения логически суммируются.
                    features:
                      description: |
                        Необходимые инструкции для процессора в виде списка Дополнительную информацию о поддерживаемых инструкциях можно найти [здесь](https://libvirt.org/formatdomain.html#cpu-model-and-topology)
                    model:
                      description: |
                        Название модели процессора. Дополнительная информация о моделях [здесь](https://libvirt.org/formatdomain.html#cpu-model-and-topology)
                    type:
                      description: |
                        В качестве типа ресурса, поддерживаются следующие варианты:
                        * `Host` - используется виртуальный CPU, максимально близкий к CPU узла платформы по набору инструкций. Это обеспечивает высокую производительность и функциональность, а также совместимость с живой миграцией для узлов с похожими типами процессоров. Например, миграция ВМ между узлами с процессорами Intel и AMD не будет работать. Это также справедливо для процессоров разных поколений, так как набор инструкций у них отличается.
                        * `HostPassthrough` - используется физический CPU узла платформы напрямую без каких-либо изменений. При использовании данного класса гостевая ВМ может быть перенесена только на целевой узел, у которого CPU точно соответствует CPU исходного узла.
                        * `Discovery` - создание виртуального CPU на основе наборов инструкций физических CPU для заданного набора узлов.
                        * `Model` - модель процессора. Модель процессора - это именованный и предварительно определенный набор поддерживаемых инструкций процессора.
                        * `Features` - необходимый набор поддерживаемых инструкций для процессора.
                nodeSelector:
                  description: |
                    Селектор узлов, на которые разрешено планировать ВМ для запуска.
                  properties:
                    matchExpressions:
                      description: |
                        Список селекторов лейблов. Требования селекторов объединяются. Т.е. должны выполнятся все условия списка.
                        Под лейблом понимается пара: `ключ = значение`.

                      items:
                        description: |
                          Описание селекторов лейблов.
                        properties:
                          key:
                            description: |
                              Название ключа лейбла, к которому применятся селектор.
                          operator:
                            description: |
                              Оператор определяет отношение ключа лейбла к набору его значений.
                              Допустимые операторы: `In`, `NotIn`, `Exists` и `DoesNotExist`:
                              `In` - значение ключа лейбла входит в заданный список лейблов `values`.
                              `NotIn`  - значение ключа лейбла не входит в заданный список лейблов `values`.
                              `Exist` - ключ лейбла существует.
                              `DoesNotExist`  - ключа лейблане существует.

                          values:
                            description: |
                              Строковый список значений. Если оператор `In` или `NotIn`, список значений должен быть непустым. Если оператор `Exists` или `DoesNotExist`, список значений должен быть пустым.
                    matchLabels:
                      description: |
                        Карта пар `ключ=значение`. Один `ключ=значение` для matchLabels эквивалентен элементу matchExpressions, ключевым полем которого является «ключ», оператором - «In», а список значений содержит только «значение».

                        Для выборки по данному критерию все значения логически суммируются.
                tolerations:
                  description: |
                    Параметр аналогичен параметру `spec.tolerations` у [Pod](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
                    Tolerations из этого параметры будут объединены с tolerations, указанными в ресурсе VirtualMachine. При этом tolerations у VirtualMachine имеют больший приоритет.
                  items:
                    description: ""
                    properties:
                      effect:
                        description: ""
                      key:
                        description: ""
                      operator:
                        description: ""
                      tolerationSeconds:
                        description: ""
                      value:
                        description: ""
                sizingPolicies:
                  description: |
                    Политика выделения вычислительных ресурсов ВМ. Представлена в виде списка. Диапазоны cores.min - cores.max для разных элементов списка не должны пересекаться.
                  items:
                    properties:
                      coreFractions:
                        description: |
                          Допустимые значения параметра `coreFraction`.
                      cores:
                        description: |
                          Политика применяется для заданного диапазона числа ядер CPU.
                        properties:
                          max:
                            description: |
                              Максимальное число ядер CPU.
                          min:
                            description: |
                              Минимальное число ядер CPU.
                          step:
                            description: |
                              Шаг увеличения числа ядер CPU.
                      dedicatedCores:
                        description: |
                          Допустимые значения параметра `dedicatedCores`.
                      memory:
                        description: |
                          Политика определения размера памяти.
                        properties:
                          max:
                            description: |
                              Максимальный объем памяти.
                          min:
                            description: |
                              Минимальный объем памяти.
                          perCore:
                            description: |
                              Объем памяти на одно ядро процессора.
                            properties:
                              max:
                                description: |
                                  Максимальный объем памяти.
                              min:
                                description: |
                                  Минимальный объем памяти.
                          step:
                            description: |
                              Шаг увеличения объема памяти.
            status:
              properties:
                availableNodes:
                  description: |
                    Список узлов, поддерживающих эту модель процессора.
                    Не отображается для типов: `Host`, `HostPassthrough`.
                maxAllocatableResources:
                  description: Максимальный доступный объем для выделения ресурсов цпу/памяти.
                conditions:
                  description: |
                    Последнее подтвержденное состояние данного ресурса.
                  items:
                    properties:
                      lastProbeTime:
                        description: Время проверки условия.
                      lastTransitionTime:
                        description: Время перехода условия из одного состояния в другое.
                      message:
                        description: Удобочитаемое сообщение с подробной информацией о последнем переходе.
                      reason:
                        description: Краткая причина последнего перехода состояния.
                      status:
                        description: |
                          Статус условия. Возможные значения: `True`, `False`, `Unknown`.
                      type:
                        description: Тип условия.
                cpuFeatures:
                  description: |
                    Информация о поддерживаемых наборах инструкций процессора для данной модели.
                    Отображается только для `type=Features`.
                  properties:
                    enabled:
                      description: |
                        Список наборов инструкций CPU для данной модели.
                    notEnabledCommon:
                      description: |
                        Список неиспользуемых инструкций CPU, дополнительно доступных для данной группы узлов.
                observedGeneration:
                  description: |
                    Поколение ресурса, которое в последний раз обрабатывалось контроллером
                phase:
                  description: |
                    Текущий статус ресурса:
                    * Pending - Ресурс не готов, ожидает, пока станут доступны подходящие узлы, поддерживающие требуемую модель процессора.
                    * Ready - Ресурс готов и доступен для использования.
                    * Terminating - Русурс находится в процессе удаления.
