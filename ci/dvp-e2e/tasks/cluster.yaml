version: "3"

tasks:
  # ============================================
  # Cluster Management Tasks
  # ============================================

  cluster:deploy:
    desc: Deploy cluster configuration
    vars:
      RUN_ID: '{{ .RUN_ID }}'
      STORAGE_PROFILE: '{{ .STORAGE_PROFILE }}'
      NESTED_KUBECONFIG: '{{ .NESTED_KUBECONFIG }}'
      VALUES_FILE: '{{ .VALUES_FILE }}'
    cmds:
      - |
        echo "Deploying cluster for run: {{ .RUN_ID }}"
        echo "Storage profile: {{ .STORAGE_PROFILE }}"
        echo "Values file: {{ .VALUES_FILE }}"
        # Cluster deployment logic

  cluster:config:apply:
    desc: Apply cluster configuration
    vars:
      NESTED_KUBECONFIG: '{{ .NESTED_KUBECONFIG }}'
      CONFIG_FILE: '{{ .CONFIG_FILE }}'
    cmds:
      - |
        export KUBECONFIG="{{ .NESTED_KUBECONFIG }}"
        kubectl apply -f {{ .CONFIG_FILE }}

  cluster:status:check:
    desc: Check cluster status
    vars:
      NESTED_KUBECONFIG: '{{ .NESTED_KUBECONFIG }}'
    cmds:
      - |
        export KUBECONFIG="{{ .NESTED_KUBECONFIG }}"
        echo "🔍 Checking cluster status..."
        
        # Check nodes status
        echo "📊 Node status:"
        kubectl get nodes -o wide
        echo ""
        
        # Check system pods
        echo "🚀 System pods status:"
        kubectl get pods --all-namespaces -o wide | grep -E "(kube-system|d8-|deckhouse)"
        echo ""
        
        # Check critical pods
        echo "⚠️  Critical pods status:"
        kubectl get pods --all-namespaces -o wide | grep -E "(Pending|Error|CrashLoopBackOff|ImagePullBackOff)"
        echo ""
        
        # Check storage classes
        echo "💿 Storage classes:"
        kubectl get storageclass
        echo ""
        
        # Overall cluster health
        echo "✅ Cluster health summary:"
        ready_nodes=$(kubectl get nodes --no-headers | grep -c "Ready")
        total_nodes=$(kubectl get nodes --no-headers | wc -l)
        echo "Ready nodes: $ready_nodes/$total_nodes"
        
        if [ "$ready_nodes" -eq "$total_nodes" ] && [ "$total_nodes" -gt 0 ]; then
          echo "✅ All nodes are ready"
        else
          echo "❌ Some nodes are not ready"
          exit 1
        fi

  cluster:scaling:adjust:
    desc: Adjust cluster scaling
    vars:
      NESTED_KUBECONFIG: '{{ .NESTED_KUBECONFIG }}'
      SCALE_FACTOR: '{{ .SCALE_FACTOR | default "1" }}'
    cmds:
      - |
        export KUBECONFIG="{{ .NESTED_KUBECONFIG }}"
        echo "Adjusting cluster scale to factor: {{ .SCALE_FACTOR }}"
        # Scaling logic

  cluster:backup:create:
    desc: Create cluster backup
    vars:
      NESTED_KUBECONFIG: '{{ .NESTED_KUBECONFIG }}'
      BACKUP_DIR: '{{ .BACKUP_DIR }}'
    cmds:
      - |
        export KUBECONFIG="{{ .NESTED_KUBECONFIG }}"
        mkdir -p {{ .BACKUP_DIR }}
        kubectl get all --all-namespaces -o yaml > {{ .BACKUP_DIR }}/cluster-backup.yaml
        echo "Cluster backup created in {{ .BACKUP_DIR }}"
