stages:
  - build
  - deploy_dev
  - deploy_prod

default:
  tags:
    - tfprod-distributed-werf

.before_script:
  before_script:
    - |
      type trdl && . $(trdl use werf 1.2 stable)
      type werf && source $(werf ci-env gitlab --as-file)

      # Login to the registry
      export DOCKER_CONFIG=$(mktemp -d)
      if [[ ${MODULE_NAME} == "" ]]; then export MODULE_NAME=${CI_PROJECT_NAME}; fi
      docker login ${REGISTRY} -u ${REGISTRY_LOGIN} -p ${REGISTRY_PASSWORD}
      export WERF_REPO="${REGISTRY}/${REGISTRY_PATH}/${MODULE_NAME}"

.build_sctipt:
  script:
    - |
      # Build
      werf helm dep update
      werf build --save-build-report --build-report-path images_tags_werf.json

      # Bundle image
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
      REPO="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json)"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}:${CI_COMMIT_REF_NAME}
      docker image push ${REPO}:${CI_COMMIT_REF_NAME}
      docker image rmi ${REPO}:${CI_COMMIT_REF_NAME} || true;

      # Release-channel image
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      REPO="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}/release:${CI_COMMIT_REF_NAME}
      docker image push ${REPO}/release:${CI_COMMIT_REF_NAME}
      docker image rmi ${REPO}/release:${CI_COMMIT_REF_NAME} || true;

      # Register module
      docker pull spotify/scratch
      docker image tag spotify/scratch:latest ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME}
      docker image push ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME}
      docker image rmi ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME} || true

.deploy_script:
  script:
    - |
      IMAGE_SRC="${WERF_REPO}/release:${CI_COMMIT_REF_NAME}"
      IMAGE_DST="${WERF_REPO}/release:${RELEASE_CHANNEL}"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;

# PROD registry
.prod_registry_vars:
  variables:
    REGISTRY: ${EXTERNAL_MODULES_REGISTRY}
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH}
    REGISTRY_LOGIN: ${EXTERNAL_MODULES_REGISTRY_LOGIN}
    REGISTRY_PASSWORD: ${EXTERNAL_MODULES_REGISTRY_PASSWORD}

# DEV registry
.dev_registry_vars:
  variables:
    REGISTRY: ${EXTERNAL_MODULES_DEV_REGISTRY}
    REGISTRY_PATH: ${EXTERNAL_MODULES_DEV_REGISTRY_PATH}
    REGISTRY_LOGIN: ${EXTERNAL_MODULES_DEV_REGISTRY_LOGIN}
    REGISTRY_PASSWORD: ${EXTERNAL_MODULES_DEV_REGISTRY_PASSWORD}

.prod_rules:
  only:
    - tags
  except:
    - main
  when: manual

.dev_rules:
  only:
    - merge_requests
  when: manual

build_prod:
  stage: build
  extends:
    - .prod_registry_vars
    - .before_script
    - .build_sctipt
    - .prod_rules

build_dev:
  stage: build
  extends:
    - .dev_registry_vars
    - .before_script
    - .build_sctipt
    - .dev_rules

deploy_to_dev_channel:
  stage: deploy_dev
  variables:
    RELEASE_CHANNEL: mr${CI_MERGE_REQUEST_IID}
  extends:
    - .dev_registry_vars
    - .before_script
    - .deploy_script
    - .dev_rules

deploy_to_prod_channels:
  stage: deploy_prod
  extends:
    - .prod_registry_vars
    - .before_script
    - .prod_rules
    - .deploy_script
  parallel:
    matrix:
      - RELEASE_CHANNEL:
          - alpha
          - beta
          - early-access
          - stable
