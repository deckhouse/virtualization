stages:
  - info
  - lint
  - test
  - build
  - e2e
  - deploy_dev_tags
  - deploy_prod_alpha
  - deploy_prod_beta
  - deploy_prod_ea
  - deploy_prod_stable
  - deploy_prod_rock_solid
  - cleanup

default:
  tags:
    - deckhouse

.build:
  stage: build
  script:
    # Build images
    - |
      werf build \
        --repo=${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME} \
        --save-build-report --build-report-path images_tags_werf.json
    # Bundle image
    - |
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Release-channel image
    - |
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)/release:${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Register module
    - |
      echo "✨ Register the module ${MODULES_MODULE_NAME}"
      crane append \
        --oci-empty-base \
        --new_layer "" \
        --new_tag "${MODULES_MODULE_SOURCE}:${MODULES_MODULE_NAME}"

.deploy:
  stage: deploy
  script:
  - |
    REPO="${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME}/release"

    IMAGE_SRC="${REPO}:${MODULES_MODULE_TAG}"
    IMAGE_DST="${REPO}:${RELEASE_CHANNEL}"

    echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
    crane copy "${IMAGE_SRC}" "${IMAGE_DST}"


.info:
  script:
  - |
    cat << OUTER
    Create ModuleConfig and ModulePullOverride resources to test this MR:
    cat <<EOF | kubectl apply -f -
    ---
    apiVersion: deckhouse.io/v1alpha1
    kind: ModulePullOverride
    metadata:
      name: virtualization
    spec:
      imageTag: ${MODULES_MODULE_TAG}
      source: deckhouse

    ---
    apiVersion: deckhouse.io/v1alpha1
    kind: ModuleConfig
    metadata:
      name: ${MODULE_NAME}
    spec:
      enabled: true
      settings:
        dvcr:
          storage:
            type: PersistentVolumeClaim
            persistentVolumeClaim:
              size: 50G
        virtualMachineCIDRs:
          - 10.66.10.0/24
          - 10.66.20.0/24
          - 10.66.30.0/24
      version: 1
    EOF

    Or patch an existing ModulePullOverride:

    kubectl patch mpo ${MODULE_NAME} --type merge -p '{"spec":{"imageTag":"${MODULES_MODULE_TAG}"}}'

    OUTER

before_script:
  # Setup werf
  - |
    type trdl && . $(trdl use werf 1.2 stable)
    type werf && source $(werf ci-env gitlab --as-file)

    # Login to gitlab registry by default
    if [[ "x${MODULES_REGISTRY_LOGIN}" == "x" ]]; then
      MODULES_REGISTRY_LOGIN="${CI_REGISTRY_USER}"
    fi
    if [[ "x${MODULES_REGISTRY_PASSWORD}" == "x" ]]; then
      MODULES_REGISTRY_PASSWORD="${CI_REGISTRY_PASSWORD}"
    fi
    werf cr login -u ${MODULES_REGISTRY_LOGIN} -p ${MODULES_REGISTRY_PASSWORD} ${MODULES_REGISTRY}


# Vars =================================================================================================================

variables:
  MODULES_MODULE_NAME: virtualization

# DEV registry
.dev_vars:
  variables:
    MODULES_REGISTRY_LOGIN: ${EXTERNAL_MODULES_DEV_REGISTRY_LOGIN}
    MODULES_REGISTRY_PASSWORD: ${EXTERNAL_MODULES_DEV_REGISTRY_PASSWORD}
    MODULES_REGISTRY: dev-registry.deckhouse.io
    MODULES_MODULE_SOURCE: ${MODULES_REGISTRY}/sys/deckhouse-oss/modules
    ENV: DEV

# PROD registry
.prod_vars:
  variables:
    MODULES_REGISTRY_LOGIN: ${EXTERNAL_MODULES_PROD_REGISTRY_LOGIN}
    MODULES_REGISTRY_PASSWORD: ${EXTERNAL_MODULES_PROD_REGISTRY_PASSWORD}
    MODULES_REGISTRY: registry-write.deckhouse.io
    MODULES_MODULE_SOURCE: ${MODULES_REGISTRY}/deckhouse/${EDITION}/modules
    ENV: PROD

# Templates ============================================================================================================

.dev:
  variables:
    MODULES_MODULE_TAG: mr${CI_MERGE_REQUEST_IID}
  extends:
  - .dev_vars
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: always
  - when: never

.dev_tags:
  variables:
    MODULES_MODULE_TAG: ${CI_COMMIT_REF_NAME}
  extends:
  - .dev_vars
  rules:
  # https://regex101.com/r/0VtnPP/1
  - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-dev.*$/'
    when: always
  - when: never

.main:
  variables:
    MODULES_MODULE_TAG: v0.0.0-main
  extends:
  - .dev_vars
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # main
    when: always
  - when: never

.prod_manual:
  variables:
    MODULES_MODULE_TAG: ${CI_COMMIT_REF_NAME}
  extends:
  - .prod_vars
  rules:
  # https://regex101.com/r/lToOvi/1
  - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
    when: manual
  - when: never

.prod_always:
  variables:
    MODULES_MODULE_TAG: ${CI_COMMIT_REF_NAME}
  extends:
  - .prod_vars
  rules:
  # https://regex101.com/r/lToOvi/1
  - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
    when: always
  - when: never

# DCO ==================================================================================================================

# dco:
#  stage: lint
#  script:
#   - pip3 install -U dco-check
#   - |
#         if [ "${CI_MERGE_REQUEST_EVENT_TYPE:-}" = detached ]; then
#             git fetch -a  # so that we can resolve branch names below
#             export CI_COMMIT_BRANCH="$CI_COMMIT_REF_NAME";
#             export CI_MERGE_REQUEST_SOURCE_BRANCH_SHA="$(git rev-parse "origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME")";
#             export CI_MERGE_REQUEST_TARGET_BRANCH_SHA="$(git rev-parse "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME")";
#         fi
#   - dco-check --default-branch-from-remote --verbose
#  extends:
#  - .dev

# Info =============================================================================================

show_dev_manifest:
  stage: info
  extends:
    - .info
    - .dev

show_main_manifest:
  stage: info
  extends:
    - .info
    - .main

# Linsers and Tests ====================================================================================================

lint:virtualization-controller:
  stage: lint
  script:
      - task virtualization-controller:init
      - task virtualization-controller:lint
      # TODO: need to fix this
      # - task virtualization-controller:dvcr:lint
  extends:
  - .dev

test:virtualization-controller:
  stage: test
  script:
      - task virtualization-controller:init
      - task virtualization-controller:test:unit
  extends:
  - .dev

test:hooks:
  stage: test
  script:
      - task hooks:test
  extends:
  - .dev

# Build ================================================================================================================

build_dev:
  stage: build
  extends:
    - .build
    - .dev

build_dev_tags:
  stage: build
  extends:
    - .build
    - .dev_tags

build_main:
  stage: build
  interruptible: true
  extends:
    - .build
    - .main

build_prod:
  stage: build
  resource_group: prod
  extends:
    - .build
    - .prod_always
  parallel:
    matrix:
    - EDITION:
        - ce
        - ee
        - fe

# Deploy ===============================================================================================================

deploy_for_dev_tag:
  stage: deploy_dev_tags
  needs: ['build_dev_tags']
  extends:
    - .deploy
    - .dev_tags
  parallel:
    matrix:
      - RELEASE_CHANNEL:
          - alpha
          - beta
          - early-access
          - stable
          - rock-solid

deploy_to_prod_alpha:
  stage: deploy_prod_alpha
  variables:
    RELEASE_CHANNEL: alpha
  needs: ['build_prod']
  extends:
    - .deploy
    - .prod_manual
  parallel:
    matrix:
      - EDITION:
          - ce
          - ee
          - fe

deploy_to_prod_beta:
  stage: deploy_prod_beta
  variables:
    RELEASE_CHANNEL: beta
  needs: ['deploy_to_prod_alpha']
  extends:
    - .deploy
    - .prod_manual
  parallel:
    matrix:
      - EDITION:
          - ce
          - ee
          - fe

deploy_to_prod_ea:
  stage: deploy_prod_ea
  variables:
    RELEASE_CHANNEL: early-access
  needs: ['deploy_to_prod_beta']
  extends:
    - .deploy
    - .prod_manual
  parallel:
    matrix:
      - EDITION:
          - ce
          - ee
          - fe

deploy_to_prod_stable:
  stage: deploy_prod_stable
  variables:
    RELEASE_CHANNEL: stable
  needs: ['deploy_to_prod_ea']
  extends:
    - .deploy
    - .prod_manual
  parallel:
    matrix:
      - EDITION:
          - ce
          - ee
          - fe

deploy_to_prod_rock_solid:
  stage: deploy_prod_rock_solid
  variables:
    RELEASE_CHANNEL: rock-solid
  needs: ['deploy_to_prod_stable']
  extends:
    - .deploy
    - .prod_manual
  parallel:
    matrix:
      - EDITION:
          - ce
          - ee
          - fe

# # Other ================================================================================================================

# e2e_for_main:
#   stage: e2e
#   needs: ['build_main']
#   resource_group: main
#   extends:
#     - .main
#   script:
#   - echo e2e

cleanup:
  stage: cleanup
  variables:
    MODULES_MODULE_TAG: v0.0.0-main
  extends:
  - .dev_vars
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - werf cleanup --repo dev-registry.deckhouse.io/sys/deckhouse-oss/modules/virtualization --without-kube=true
