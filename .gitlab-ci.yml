stages:
  - build
  - deploy_mr
  - deploy_alpha
  - deploy_beta
  - deploy_early_access
  - deploy_stable

.before_script:
  before_script:
    - |
      env
      type trdl && . $(trdl use werf 1.2 stable)
      type werf && source $(werf ci-env gitlab --as-file)
      # Login to the registry
      export DOCKER_CONFIG=$(mktemp -d)
      if [[ ${MODULE_NAME} == "" ]]; then export MODULE_NAME=${CI_PROJECT_NAME}; fi
      docker login ${REGISTRY} -u ${REGISTRY_LOGIN} -p ${REGISTRY_PASSWORD}
      export WERF_REPO="${REGISTRY}/${REGISTRY_PATH}/${MODULE_NAME}"

.build_sctipt:
  script:
    - |
      # Build
      helm repo add deckhouse https://deckhouse.github.io/lib-helm
      helm repo update
      helm dep update
      git config --global user.email "you@example.com"
      git config --global user.name "github_username"
      git add charts/
      git commit -am "helm_lib"
      werf build  --report-path images_tags_werf.json

      # Bundle image
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
      REPO="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json)"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}:${CI_COMMIT_REF_NAME}
      docker image push ${REPO}:${CI_COMMIT_REF_NAME}
      docker image rmi ${REPO}:${CI_COMMIT_REF_NAME} || true;

      # Release-channel image
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      REPO="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}/release:${CI_COMMIT_REF_NAME}
      docker image push ${REPO}/release:${CI_COMMIT_REF_NAME}
      docker image rmi ${REPO}/release:${CI_COMMIT_REF_NAME} || true;

      # Register module
      docker pull spotify/scratch
      docker image tag spotify/scratch:latest ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME}
      docker image push ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME}
      docker image rmi ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME} || true

.prod_vars:
  variables:
    REGISTRY: ${EXTERNAL_MODULES_REGISTRY}
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH}
    REGISTRY_LOGIN: ${EXTERNAL_MODULES_REGISTRY_LOGIN}
    REGISTRY_PASSWORD: ${EXTERNAL_MODULES_REGISTRY_PASSWORD}
    MODULE_NAME: ${EXTERNAL_MODULE_NAME}

.dev_vars:
  variables:
    REGISTRY: ${EXTERNAL_MODULES_DEV_REGISTRY}
    REGISTRY_PATH: ${EXTERNAL_MODULES_DEV_REGISTRY_PATH}
    REGISTRY_LOGIN: ${EXTERNAL_MODULES_DEV_REGISTRY_LOGIN}
    REGISTRY_PASSWORD: ${EXTERNAL_MODULES_DEV_REGISTRY_PASSWORD}
    MODULE_NAME: ${EXTERNAL_MODULE_NAME}

build_prod:
  stage: build
  extends:
  - .prod_vars
  - .before_script
  - .build_sctipt
  tags:
    - tfprod-distributed-werf
  only:
    - tags

build_dev:
  stage: build
  extends:
  - .dev_vars
  - .before_script
  - .build_sctipt
  tags:
    - tfprod-distributed-werf
  only:
    - merge_requests
  when: manual

Deploy to the MR IID channel:
  stage: deploy_mr
  script:
    - |
      IMAGE_SRC="${WERF_REPO}/release:${CI_COMMIT_REF_NAME}"
      IMAGE_DST="${WERF_REPO}/release:mr${CI_MERGE_REQUEST_IID}"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  only:
    - merge_requests
  when: manual

Deploy to the alpha channel:
  stage: deploy_alpha
  script:
    - |
      IMAGE_SRC="${WERF_REPO}/release:${CI_COMMIT_REF_NAME}"
      IMAGE_DST="${WERF_REPO}/release:alpha"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  only:
    - tags
  except:
    - main
  when: manual

Deploy to the beta channel:
  stage: deploy_beta
  script:
    - |
      IMAGE_SRC="${WERF_REPO}/release:${CI_COMMIT_REF_NAME}"
      IMAGE_DST="${WERF_REPO}/release:beta"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  only:
    - tags
  except:
    - main
  when: manual

Deploy to the early-access channel:
  stage: deploy_early_access
  script:
    - |
      IMAGE_SRC="${WERF_REPO}/release:${CI_COMMIT_REF_NAME}"
      IMAGE_DST="${WERF_REPO}/release:early-access"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  only:
    - tags
  except:
    - main
  when: manual

Deploy to the stable channel:
  stage: deploy_stable
  script:
    - |
      IMAGE_SRC="${WERF_REPO}/release:${CI_COMMIT_REF_NAME}"
      IMAGE_DST="${WERF_REPO}/release:stable"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  only:
    - tags
  except:
    - main
  when: manual
