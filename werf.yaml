project: virtualization
configVersion: 1

{{ $_ := set . "Images" dict }}

# Virtualization Images
{{- $BaseImagesPath := "base-images/github_image_versions.yml" }}
{{ $baseImages := (.Files.Get $BaseImagesPath | fromYaml) }}

  {{- range $k, $v := $baseImages }}
    {{ $baseImagePath := (printf "%s%s" $baseImages.REGISTRY_PATH (trimSuffix "/" $v)) }}
    {{- if ne $k "REGISTRY_PATH" }}
      {{- $_ := set $.Images $k $baseImagePath }}
    {{- end }}
  {{- end }}

# Deckhouse Images
{{- $BaseImagesPath := "base-images/deckhouse_image_versions.yml" }}
{{ $baseImages := (.Files.Get $BaseImagesPath | fromYaml) }}

  {{- range $k, $v := $baseImages }}
    {{ $baseImagePath := (printf "%s%s" $baseImages.REGISTRY_PATH (trimSuffix "/" $v)) }}
    {{- if ne $k "REGISTRY_PATH" }}
      {{- $_ := set $.Images $k $baseImagePath }}
    {{- end }}
  {{- end }}

# Base Images
{{- $BaseVirtImagesPath := "base-images/image_versions.yml" }}
{{ $baseImages := (.Files.Get $BaseVirtImagesPath | fromYaml) }}

  {{- range $k, $v := $baseImages }}
    {{ $baseVirtImagePath := (printf "%s%s" $baseImages.REGISTRY_PATH (trimSuffix "/" $v)) }}

    {{- if ne $k "REGISTRY_PATH" }}
      {{- $_ := set $.Images $k $baseVirtImagePath }}
    {{- end }}

  {{- end }}
# Modules_images
{{- define "module_image_template" }}
  {{- if eq .ImageInstructionType "Dockerfile" }}
---
image: images/{{ .ImageName }}
context: images/{{ .ImageName }}
dockerfile: Dockerfile
  {{- else }}
{{ tpl .ImageBuildData . }}
  {{- end }}
{{- end }}

{{- $Root := . }}
{{- $ImagesIDList := list }}
{{ $ImagesBuildFiles := .Files.Glob "images/*/{Dockerfile,werf.inc.yaml}" }}

{{- range $path, $content := $ImagesBuildFiles }}
  {{- $ctx := dict }}
  {{- if regexMatch "/werf.inc.yaml$" $path }}
    {{- $_ := set $ctx "ImageInstructionType" "Stapel" }}
  {{- else }}
    {{- $_ := set $ctx "ImageInstructionType" "Dockerfile" }}
  {{- end }}

  {{- $ImageData := $path | split "/" }}

  {{- $_ := set $ctx "ImageName" $ImageData._1 }}
  {{- $_ := set $ctx "ImageBuildData" $content }}
  {{- $_ := set $ctx "Images" $Root.Images }}

  {{- include "module_image_template" $ctx }}
  {{- range $ImageYamlMainfest := regexSplit "\n?---[ \t]*\n" (include "module_image_template" $ctx) -1 }}

    {{- $ImageManifest := $ImageYamlMainfest | fromYaml }}
    {{- if $ImageManifest.image }}
      {{- $ImagesIDList = append $ImagesIDList $ImageManifest.image }}
    {{- end }}
  {{- end }}
{{- end }}
---
image: images-digests
from: {{ .Images.BASE_ALPINE }}
dependencies:
  {{- range $ImageID := $ImagesIDList }}
  {{- $ImageNameCamel  := $ImageID | splitList "/" | last  | camelcase | untitle }}
- image: {{ $ImageID }}
  before: setup
  imports:
    - type: ImageDigest
      targetEnv: MODULE_IMAGE_DIGEST_{{ $ImageNameCamel }}
  {{- end }}
shell:
  beforeInstall:
    - apk add --no-cache jq
  setup:
    - |
      env | grep MODULE_IMAGE_DIGEST | jq -Rn '
        reduce inputs as $i (
          {};
          . * (
            $i | ltrimstr("MODULE_IMAGE_DIGEST_") | sub("=";"_") |
            split("_") as [$imageName, $digest] |
            {($imageName): $digest}
          )
        )
      ' > /images_digests.json
      cat images_digests.json
---
image: python-dependencies
from: python:3.9-slim
fromCacheVersion: "2024-06-25.0"
git:
  - add: /lib/python/requirements.txt
    to: /requirements.txt
shell:
  setup:
    - pip3 install -r /requirements.txt -t /dist
---
image: bundle
from: {{ .Images.BASE_SCRATCH }}
fromCacheVersion: "2024-02-15.1"
import:
  - image: images-digests
    add: /images_digests.json
    to: /images_digests.json
    after: setup
  - image: python-dependencies
    add: /dist
    to: /lib/python/dist
    after: setup
git:
  - add: /
    to: /
    includePaths:
      - charts
      - crds
      - docs
      - hooks
      - openapi
      - templates
      - Chart.yaml
      - .helmignore
    excludePaths:
      - hooks/lib/tests
      - hooks/test*
---
image: release-channel-version-artifact
from: {{ .Images.BASE_ALPINE }}
git:
  - add: /
    to: /
    includePaths:
      - release.yaml
shell:
  beforeInstall:
    - apk add --no-cache curl
    - curl -sfL https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64 --output /usr/local/bin/yq
    - chmod +x /usr/local/bin/yq
  install:
    - |
      version="{{ env "MODULES_MODULE_TAG" }}"
      yq w /release.yaml version $version | yq r - -j > version.json
---
image: release-channel-version
from: {{ .Images.BASE_SCRATCH }}
import:
  - image: release-channel-version-artifact
    add: /
    to: /
    after: install
    includePaths:
      - version.json
