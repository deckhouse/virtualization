{{- $nodeSelectorSystem := index (include "helm_lib_node_selector" (tuple . "system") | fromYaml) "nodeSelector" | default (dict) | toJson }}
{{- $nodeSelectorMaster := index (include "helm_lib_node_selector" (tuple . "master") | fromYaml) "nodeSelector" | default (dict) | toJson }}
{{- $tolerationsSystem := index (include "helm_lib_tolerations" (tuple . "system") | fromYaml) "tolerations" | default (list) | toJson }}
{{- $tolerationsAnyNode := index (include "helm_lib_tolerations" (tuple . "any-node") | fromYaml) "tolerations" | default (list) | toJson }}
{{- $priorityClassName := include "priorityClassName" . }}
---
apiVersion: cdi.internal.virtualization.deckhouse.io/v1beta1
kind: InternalVirtualizationCDI
metadata:
  name: config
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list .) | nindent 2 }}
spec:
  imagePullPolicy: IfNotPresent
  infra:
    {{- include "helm_lib_node_selector" (tuple . "system") | nindent 4 }}
    {{- include "helm_lib_tolerations" (tuple . "system") | nindent 4 }}
  {{- if (.Values.global.enabledModules | has "priority-class") }}
  priorityClass: {{ $priorityClassName }}
  {{- end }}
  config:
    podResourceRequirements:
      limits:
        cpu: 1000m
        memory: 600M
      requests:
        cpu: 100m
        memory: 60M
    imagePullSecrets:
    - name: virtualization-module-registry
  {{- if .Values.global.modules.publicDomainTemplate }}
    uploadProxyURLOverride: {{ include "helm_lib_module_public_domain" (list . "cdi-uploadproxy") }}
    featureGates:
    - HonorWaitForFirstConsumer
  {{- end }}
  customizeComponents:
    patches:
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/template/spec/nodeSelector","value":{{ $nodeSelectorMaster }}}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/template/spec/tolerations","value":{{ $tolerationsAnyNode }}}]'
        type: json

      # Turn off cdi-uploadproxy.
      - resourceType: Deployment
        resourceName: cdi-uploadproxy
        patch: '[{"op":"replace","path":"/spec/replicas","value":0}]'
        type: json

    {{- if (include "helm_lib_ha_enabled" .) }}
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/replicas","value":2}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: {{ include "strategic_affinity_patch" (list "app" "cdi-apiserver") }}
        type: strategic

      - resourceType: Deployment
        resourceName: cdi-deployment
        patch: '[{"op":"replace","path":"/spec/replicas","value":2}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-deployment
        patch: {{ include "strategic_affinity_patch" (list "app" "containerized-data-importer") }}
        type: strategic
    {{- end }}

      # Add kube-api-rewriter as a sidecar container to cdi-apiserver and cdi-deployment.

      {{- $apiRewriterSettings := dict }}
      {{- $_ := set $apiRewriterSettings "WEBHOOK_ADDRESS" "https://127.0.0.1:8443" }}
      {{- $_ := set $apiRewriterSettings "WEBHOOK_CERT_FILE" "/var/run/certs/cdi-apiserver-server-cert/tls.crt" }}
      {{- $_ := set $apiRewriterSettings "WEBHOOK_KEY_FILE" "/var/run/certs/cdi-apiserver-server-cert/tls.key" }}
      {{- $_ := set $apiRewriterSettings "webhookCertsVolumeName" "server-cert" }}
      {{- $_ := set $apiRewriterSettings "webhookCertsMountPath" "/var/run/certs/cdi-apiserver-server-cert" }}
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: {{ include "kube_api_rewriter.pod_spec_strategic_patch_json" (tuple . "cdi-apiserver" $apiRewriterSettings) }}
        type: strategic

      - resourceType: Deployment
        resourceName: cdi-deployment
        patch: {{ include "kube_api_rewriter.pod_spec_strategic_patch_json" (tuple . "cdi-deployment") }}
        type: strategic

      # Add kube-rbac-proxy as a sidecar container to cdi-deployment
      {{- $kubeRbacProxySettings := dict }}
      {{- $_ := set $kubeRbacProxySettings "containerName" "kube-rbac-proxy" }}
      {{- $_ := set $kubeRbacProxySettings "clientCAFile" "/etc/kube-rbac-proxy/ca.crt" }}
      {{- $_ := set $kubeRbacProxySettings "logLevel" "2" }}
      {{- $_ := set $kubeRbacProxySettings "staleCacheInterval" "1h30m" }}
      {{- $_ := set $kubeRbacProxySettings "livezPath" "/livez" }}
      {{- $_ := set $kubeRbacProxySettings "excludePath" "/config" }}
      {{- $_ := set $kubeRbacProxySettings "upstreams" (list
          (dict "upstream" "http://127.0.0.1:8080/metrics" "path" "/metrics" "name" "cdi-deployment") 
          (dict "upstream" "http://127.0.0.1:9090/metrics" "path" "/proxy/metrics" "name" "kube-api-rewriter") 
      ) }}
      {{- $_ := set $kubeRbacProxySettings "runAsUserNobody" true }}
      - resourceName: cdi-deployment
        resourceType: Deployment
        patch: {{ include "kube_rbac_proxy.pod_spec_strategic_patch_json" (tuple . $kubeRbacProxySettings) }}
        type: strategic
      {{- $_ := set $kubeRbacProxySettings "upstreams" (list
          (dict "upstream" "http://127.0.0.1:9090/metrics" "path" "/proxy/metrics" "name" "kube-api-rewriter") 
      ) }}
      - resourceName: cdi-apiserver
        resourceType: Deployment
        patch: {{ include "kube_rbac_proxy.pod_spec_strategic_patch_json" (tuple . $kubeRbacProxySettings) }}
        type: strategic

      # Add rewriter proxy container port to the Service used by webhook configurations.
      # First need to set name for existing port to make strategic patch works later.
      - resourceName: cdi-api
        resourceType: Service
        patch: |
          [{"op":"replace", "path":"/spec/ports/0/name", "value":"https"}]
        type: json
      - resourceName: cdi-api
        resourceType: Service
        patch: {{ include "kube_api_rewriter.service_spec_port_patch_json" . }}
        type: strategic

      # Change service port in webhook configurations.
      # NOTE: names are prefixed with "cdi-internal-virtualization-".
      - resourceName: cdi-internal-virtualization-api-datavolume-mutate
        resourceType: MutatingWebhookConfiguration
        patch: {{ include "kube_api_rewriter.webhook_spec_port_patch_json" "datavolume-mutate.cdi.kubevirt.io"}}
        type: strategic
      - resourceName: cdi-internal-virtualization-api-dataimportcron-validate
        resourceType: ValidatingWebhookConfiguration
        patch: {{ include "kube_api_rewriter.webhook_spec_port_patch_json" "dataimportcron-validate.cdi.kubevirt.io"}}
        type: strategic
      - resourceName: cdi-internal-virtualization-api-datavolume-validate
        resourceType: ValidatingWebhookConfiguration
        patch: {{ include "kube_api_rewriter.webhook_spec_port_patch_json" "datavolume-validate.cdi.kubevirt.io"}}
        type: strategic
      - resourceName: cdi-internal-virtualization-api-populator-validate
        resourceType: ValidatingWebhookConfiguration
        patch: {{ include "kube_api_rewriter.webhook_spec_port_patch_json" "populator-validate.cdi.kubevirt.io"}}
        type: strategic
      - resourceName: cdi-internal-virtualization-api-validate
        resourceType: ValidatingWebhookConfiguration
        patch: {{ include "kube_api_rewriter.webhook_spec_port_patch_json" "cdi-validate.cdi.kubevirt.io"}}
        type: strategic
      - resourceName: cdi-internal-virtualization-objecttransfer-api-validate
        resourceType: ValidatingWebhookConfiguration
        patch: {{ include "kube_api_rewriter.webhook_spec_port_patch_json" "objecttransfer-validate.cdi.kubevirt.io"}}
        type: strategic

  workload:
    nodeSelector:
      kubernetes.io/os: linux
