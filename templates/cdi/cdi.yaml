{{- $nodeSelectorSystem := index (include "helm_lib_node_selector" (tuple . "system") | fromYaml) "nodeSelector" | default (dict) | toJson }}
{{- $nodeSelectorMaster := index (include "helm_lib_node_selector" (tuple . "master") | fromYaml) "nodeSelector" | default (dict) | toJson }}
{{- $tolerationsSystem := index (include "helm_lib_tolerations" (tuple . "system") | fromYaml) "tolerations" | default (list) | toJson }}
{{- $tolerationsAnyNode := index (include "helm_lib_tolerations" (tuple . "any-node") | fromYaml) "tolerations" | default (list) | toJson }}
---
apiVersion: x.virtualization.deckhouse.io/v1beta1
kind: CDI
metadata:
  name: cdi
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list .) | nindent 2 }}
spec:
  imagePullPolicy: IfNotPresent
  infra:
    {{- include "helm_lib_node_selector" (tuple . "system") | nindent 4 }}
    {{- include "helm_lib_tolerations" (tuple . "system") | nindent 4 }}
  config:
    imagePullSecrets:
    - name: virtualization-module-registry
  {{- if .Values.global.modules.publicDomainTemplate }}
    uploadProxyURLOverride: {{ include "helm_lib_module_public_domain" (list . "cdi-uploadproxy") }}
    featureGates:
    - HonorWaitForFirstConsumer
  {{- end }}
  customizeComponents:
    patches:
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/template/spec/nodeSelector","value":{{ $nodeSelectorMaster }}}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/template/spec/tolerations","value":{{ $tolerationsAnyNode }}}]'
        type: json

    {{- if ( .Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/template/spec/containers/0/resources/requests","value":{}}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-deployment
        patch: '[{"op":"replace","path":"/spec/template/spec/containers/0/resources/requests","value":{}}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-uploadproxy
        patch: '[{"op":"replace","path":"/spec/template/spec/containers/0/resources/requests","value":{}}]'
        type: json
    {{- end }}

    {{- if (include "helm_lib_ha_enabled" .) }}
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/replicas","value":2}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-apiserver
        patch: '[{"op":"replace","path":"/spec/template/spec/affinity","value":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchExpressions":[{"key":"cdi.kubevirt.io","operator":"In","values":["cdi-apiserver"]}]},"topologyKey":"kubernetes.io/hostname"}]}}}]'
        type: json

      - resourceType: Deployment
        resourceName: cdi-deployment
        patch: '[{"op":"replace","path":"/spec/replicas","value":2}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-deployment
        patch: '[{"op":"replace","path":"/spec/template/spec/affinity","value":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchExpressions":[{"key":"app","operator":"In","values":["containerized-data-importer"]}]},"topologyKey":"kubernetes.io/hostname"}]}}}]'
        type: json

      - resourceType: Deployment
        resourceName: cdi-uploadproxy
        patch: '[{"op":"replace","path":"/spec/replicas","value":2}]'
        type: json
      - resourceType: Deployment
        resourceName: cdi-uploadproxy
        patch: '[{"op":"replace","path":"/spec/template/spec/affinity","value":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchExpressions":[{"key":"cdi.kubevirt.io","operator":"In","values":["cdi-uploadproxy"]}]},"topologyKey":"kubernetes.io/hostname"}]}}}]'
        type: json
    {{- end }}
  workload:
    nodeSelector:
      kubernetes.io/os: linux
