{{- $priorityClassName := include "priorityClassName" . }}
{{- $delve := (include "delve" . | fromYaml) -}}

{{- define "virtualization_api_resources" }}
cpu: 10m
memory: 40Mi
{{- end }}

{{- if eq (include "virtualization-api.isEnabled" .) "true" }}

{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: virtualization-api
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "virtualization-api" "workload-resource-policy.deckhouse.io" "master")) | nindent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: virtualization-api
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: virtualization-api
        minAllowed:
          {{- include "virtualization_api_resources" . | nindent 10 }}
        maxAllowed:
          cpu: 20m
          memory: 80Mi
{{- end }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: virtualization-api
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "virtualization-api" )) | nindent 2 }}
spec:
  minAvailable: {{ include "helm_lib_is_ha_to_value" (list . 1 0) }}
  selector:
    matchLabels:
      app: virtualization-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtualization-api
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "virtualization-api")) | nindent 2 }}
spec:
  replicas: {{ include "helm_lib_is_ha_to_value" (list . 3 1) }}
  {{- if (include "helm_lib_ha_enabled" .) }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  {{- end }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: virtualization-api
  template:
    metadata:
      labels:
        app: virtualization-api
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/virtualization-api/cert-secret.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: virtualization-api
    spec:
      {{ include "helm_lib_pod_anti_affinity_for_ha" (list . (dict "app" "virtualization-api")) | nindent 6 }}
      containers:
        - name: virtualization-api
          {{- include "helm_lib_module_container_security_context_read_only_root_filesystem" . | nindent 10 }}
          args:
            - --kubevirt-cabundle=/etc/virt-api/certificates/ca.crt
            - --kubevirt-endpoint=virt-api.d8-{{ .Chart.Name}}.svc
            - --secure-port=8443
            {{- if eq (include "moduleLogLevel" .) "debug" }}
            - --v=10
            {{- else }}
            - --v=3
            {{- end }}
            - --tls-cert-file=/etc/virtualziation-api/certificates/tls.crt
            - --tls-private-key-file=/etc/virtualziation-api/certificates/tls.key
            - --proxy-client-cert-file=/etc/virtualziation-api-proxy/certificates/tls.crt
            - --proxy-client-key-file=/etc/virtualziation-api-proxy/certificates/tls.key
            - --service-account-name=virtualization-api
            - --service-account-namespace=d8-{{ .Chart.Name }}
          image: {{ include "helm_lib_module_image" (list . "virtualizationApi") }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /etc/virtualziation-api/certificates
              name:  virtualization-api-tls
              readOnly: true
            - mountPath: /etc/virtualziation-api-proxy/certificates
              name:  virtualization-api-proxy-tls
              readOnly: true
            - mountPath: /etc/virt-api/certificates
              name:  kubevirt-virt-api-certs
              readOnly: true
          ports:
            - containerPort: 8443
              name: apiserver
              protocol: TCP
            {{- include "delvePorts" (list $delve "virtualization-api") | nindent 12 }}
          {{- if not (and ($delve) (eq $delve.debug.component "virtualization-api")) }}
          livenessProbe:
            httpGet:
              path: /livez
              port: apiserver
              scheme: HTTPS
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              path: /readyz
              port: apiserver
              scheme: HTTPS
            initialDelaySeconds: 10
          {{- end }}
          resources:
            requests:
              {{- include "helm_lib_module_ephemeral_storage_only_logs" . | nindent 14 }}
              {{- if not ( .Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
              {{- include "virtualization_api_resources" . | nindent 14 }}
              {{- end }}
      dnsPolicy: ClusterFirst
      serviceAccountName: virtualization-api
      {{- include "helm_lib_priority_class" (tuple . $priorityClassName) | nindent 6 }}
      {{- include "helm_lib_node_selector" (tuple . "master") | nindent 6 }}
      {{- include "helm_lib_tolerations" (tuple . "any-node") | nindent 6 }}
      {{- include "helm_lib_module_pod_security_context_run_as_user_deckhouse" . | nindent 6 }}
      volumes:
        - name: virtualization-api-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: virtualization-api-tls
        - name: kubevirt-virt-api-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: kubevirt-ca
            items:
              - key: tls.crt
                path: ca.crt
        - name: virtualization-api-proxy-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: virtualization-api-proxy-tls

{{- end }}
