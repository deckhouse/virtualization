{{- $nodeSelectorSystem := index (include "helm_lib_node_selector" (tuple . "system") | fromYaml) "nodeSelector" | default (dict) | toJson }}
{{- $nodeSelectorMaster := index (include "helm_lib_node_selector" (tuple . "master") | fromYaml) "nodeSelector" | default (dict) | toJson }}
{{- $tolerationsSystem := index (include "helm_lib_tolerations" (tuple . "system") | fromYaml) "tolerations" | default (list) | toJson }}
{{- $tolerationsAnyNode := index (include "helm_lib_tolerations" (tuple . "any-node") | fromYaml) "tolerations" | default (list) | toJson }}
{{- $kubeAPIProxyRewriter := true }}
---
apiVersion: internal.virtualization.deckhouse.io/v1
kind: DVPInternalKubeVirt
metadata:
  name: kubevirt
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list .) | nindent 2 }}
spec:
  certificateRotateStrategy: {}
  configuration:
    evictionStrategy: LiveMigrate
    developerConfiguration:
      featureGates:
      - Macvtap
      - HotplugVolumes
      - GPU
      - Snapshot
      - ExpandDisks
      - Root
      - VMLiveUpdateFeatures
      - VMExport
      - CPUManager
      - Sidecar
      - VolumeSnapshotDataSource
  customizeComponents:
    patches:
    - resourceType: Deployment
      resourceName: virt-api
      patch: '[{"op":"replace","path":"/spec/template/spec/nodeSelector","value":{{ $nodeSelectorMaster }}}]'
      type: json
    - resourceType: Deployment
      resourceName: virt-api
      patch: '[{"op":"replace","path":"/spec/template/spec/tolerations","value":{{ $tolerationsAnyNode }}}]'
      type: json
    - resourceType: Deployment
      resourceName: virt-controller
      patch: '[{"op":"replace","path":"/spec/template/spec/nodeSelector","value":{{ $nodeSelectorSystem }}}]'
      type: json
    - resourceType: Deployment
      resourceName: virt-controller
      patch: '[{"op":"replace","path":"/spec/template/spec/tolerations","value":{{ $tolerationsSystem }}}]'
      type: json
    - resourceType: DaemonSet
      resourceName: virt-handler
      patch: '[{"op":"replace","path":"/spec/template/spec/tolerations","value":{{ $tolerationsAnyNode }}}]'
      type: json
    - resourceType: Deployment
      resourceName: virt-exportproxy
      patch: '[{"op":"replace","path":"/spec/replicas","value":0}]'
      type: json
    {{- if (include "helm_lib_ha_enabled" .) }}
    - resourceType: Deployment
      resourceName: virt-api
      patch: '[{"op":"replace","path":"/spec/template/spec/affinity","value":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchExpressions":[{"key":"kubevirt.io","operator":"In","values":["virt-api"]}]},"topologyKey":"kubernetes.io/hostname"}]}}}]'
      type: json
    - resourceType: Deployment
      resourceName: virt-controller
      patch: '[{"op":"replace","path":"/spec/template/spec/affinity","value":{"podAntiAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":[{"labelSelector":{"matchExpressions":[{"key":"kubevirt.io","operator":"In","values":["virt-controller"]}]},"topologyKey":"kubernetes.io/hostname"}]}}}]'
      type: json
    {{- end }}
    {{- if $kubeAPIProxyRewriter }}
    #"image": "{{ include "helm_lib_module_image" (list . "kubeApiProxy") }}",
    - resourceName: virt-controller
      resourceType: Deployment
      patch: |
        {"spec":{"template":{"spec":{
          "volumes": [{
            "name":"kube-api-proxy-kubeconfig",
            "configMap": {"name": "kube-api-proxy-kubeconfig" }
          }],
          "containers":[{
            "name":"virt-controller",
            "command": ["virt-controller", "--kubeconfig=/kubeconfig.local/proxy.kubeconfig"],
            "volumeMounts":[{
              "name": "kube-api-proxy-kubeconfig",
              "mountPath": "/kubeconfig.local"
            }]
          }, {
            "name": "proxy",
            "image": "dev-registry.deckhouse.io/virt/dev/diafour/kube-api-proxy:latest",
            "imagePullPolicy": "Always",
            "command": ["/proxy"],
            "securityContext": {
              "allowPrivilegeEscalation": false,
              "capabilities": {"drop": ["ALL"]},
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }]
        }}}}
      type: strategic
    - resourceName: virt-api
      resourceType: Deployment
      patch: |
        {"spec":{"template":{"spec":{
          "volumes": [{
            "name":"kube-api-proxy-kubeconfig",
            "configMap": {"name": "kube-api-proxy-kubeconfig" }
          }],
          "containers":[{
            "name":"virt-api",
            "command": ["virt-api", "--kubeconfig=/kubeconfig.local/proxy.kubeconfig"],
            "volumeMounts":[{
              "name": "kube-api-proxy-kubeconfig",
              "mountPath": "/kubeconfig.local"
            }]
          }, {
            "name": "proxy",
            "image": "dev-registry.deckhouse.io/virt/dev/diafour/kube-api-proxy:latest",
            "imagePullPolicy": "Always",
            "command": ["/proxy"],
            "securityContext": {
              "allowPrivilegeEscalation": false,
              "capabilities": {"drop": ["ALL"]},
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "ports": [{"containerPort": 24192, "name":"webhook-proxy", "protocol":"TCP"}],
            "env": [
              { "name": "WEBHOOK_ADDRESS",
                "value": "https://127.0.0.1:8443"
              },
              { "name": "WEBHOOK_CERT_FILE",
                "value": "/etc/virt-api/certificates/tls.crt"
              },
              { "name": "WEBHOOK_KEY_FILE",
                "value": "/etc/virt-api/certificates/tls.key"
              }
            ],
            "volumeMounts":[{
              "name": "kubevirt-virt-api-certs",
              "mountPath": "/etc/virt-api/certificates",
              "readOnly": true
            }]
          }]
        }}}}
      type: strategic
    - resourceName: virt-handler
      resourceType: DaemonSet
      patch: |
        {"spec":{"template":{"spec":{
          "volumes": [{
            "name":"kube-api-proxy-kubeconfig",
            "configMap": {"name": "kube-api-proxy-kubeconfig" }
          }],
          "containers":[{
            "name":"virt-handler",
            "command": ["virt-handler", "--kubeconfig=/kubeconfig.local/proxy.kubeconfig"],
            "volumeMounts":[{
              "name": "kube-api-proxy-kubeconfig",
              "mountPath": "/kubeconfig.local"
            }]
          }, {
            "name": "proxy",
            "image": "dev-registry.deckhouse.io/virt/dev/diafour/kube-api-proxy:latest",
            "imagePullPolicy": "Always",
            "command": ["/proxy"],
            "securityContext": {
              "allowPrivilegeEscalation": false,
              "capabilities": {"drop": ["ALL"]},
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }]
        }}}}
      type: strategic
    - resourceName: virt-exportproxy
      resourceType: Deployment
      patch: |
        {"spec":{"template":{"spec":{
          "volumes": [{
            "name":"kube-api-proxy-kubeconfig",
            "configMap": {"name": "kube-api-proxy-kubeconfig" }
          }],
          "containers":[{
            "name":"exportproxy",
            "args": ["--kubeconfig=/kubeconfig.local/proxy.kubeconfig"],
            "volumeMounts":[{
              "name": "kube-api-proxy-kubeconfig",
              "mountPath": "/kubeconfig.local"
            }]
          }, {
            "name": "proxy",
            "image": "dev-registry.deckhouse.io/virt/dev/diafour/kube-api-proxy:latest",
            "imagePullPolicy": "Always",
            "command": ["/proxy"],
            "securityContext": {
              "allowPrivilegeEscalation": false,
              "capabilities": {"drop": ["ALL"]},
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }]
        }}}}
      type: strategic
    # Patch services used in webhook configurations, add webhook-proxy port 24192.
    - resourceName: virt-api
      resourceType: Service
      patch: |
        [{"op":"replace", "path":"/spec/ports/0/name", "value":"https"}]
      type: json
    - resourceName: virt-api
      resourceType: Service
      patch: |
        {"spec":{"ports":[
          {"name": "webhook-proxy",
           "port": 24192,
           "protocol": "TCP",
           "targetPort": "webhook-proxy"}
        ]}}
      type: strategic
    - resourceName: kubevirt-operator
      resourceType: Service
      patch: |
        {"spec":{"ports":[
          {"name": "webhook-proxy",
           "port": 24192,
           "protocol": "TCP",
           "targetPort": "webhook-proxy"}
        ]}}
      type: strategic
    # Change service in webhook configuration to point to the rewriter proxy.
    # Patch was produced with this jq command:
    # kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io virt-api-validator -o json | jq '{"webhooks": .webhooks|map({"name":.name, "clientConfig":{"service":{"port":24192}}}) }'
    # virt-api-webhook-proxy service is created separately.
    - resourceName: virt-api-validator
      resourceType: ValidatingWebhookConfiguration
      patch: |
        {
          "webhooks": [
            {
              "name": "virt-launcher-eviction-interceptor.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineinstances-create-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineinstances-update-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachine-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachinereplicaset-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachinepool-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachinepreset-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "migration-create-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "migration-update-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachinesnapshot-validator.snapshot.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachinerestore-validator.snapshot.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineexport-validator.export.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineinstancetype-validator.instancetype.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineclusterinstancetype-validator.instancetype.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachinepreference-validator.instancetype.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineclusterpreference-validator.instancetype.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "kubevirt-crd-status-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "migration-policy-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "vm-clone-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            }
          ]
        }
      type: strategic
    # Change service in webhook configuration to point to the rewriter proxy.
    # Patch was produced with this jq command:
    # kubectl get mutatingwebhookconfigurations.admissionregistration.k8s.io virt-api-mutator -o json | jq '{"webhooks": .webhooks|map({"name":.name, "clientConfig":{"service":{"port":24192}}}) }'
    # virt-api-webhook-proxy service is created separately.
    - resourceName: virt-api-mutator
      resourceType: MutatingWebhookConfiguration
      patch: |
        {
          "webhooks": [
            {
              "name": "virtualmachines-mutator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineinstances-mutator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "migrations-mutator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "virtualmachineclones-mutator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            }
          ]
        }
      type: strategic
    # Change service in webhook configuration to point to the rewriter proxy.
    # Patch was produced with this jq command:
    # kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io virt-operator-validator -o json | jq '{"webhooks": .webhooks|map({"name":.name, "clientConfig":{"service":{"port":24192}}}) }'
    # kubevirt-operator-webhook-proxy service is created separately.
    - resourceName: virt-operator-validator
      resourceType: ValidatingWebhookConfiguration
      patch: |
        {
          "webhooks": [
            {
              "name": "kubevirt-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            },
            {
              "name": "kubevirt-update-validator.kubevirt.io",
              "clientConfig": {"service": {"port": 24192}}
            }
          ]
        }

      type: strategic
    {{- end }}

    {{- if ( .Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
    - resourceType: Deployment
      resourceName: virt-api
      patch: |
        {"spec":{"template":{"spec":{"containers":[
          {"name":"virt-api", "resources":{"requests":{}}}
        ]}}}}
      type: strategic
    - resourceType: Deployment
      resourceName: virt-controller
      patch: |
        {"spec":{"template":{"spec":{"containers":[
          {"name":"virt-controller", "resources":{"requests":{}}}
        ]}}}}
      type: strategic
    - resourceType: DaemonSet
      resourceName: virt-handler
      patch: |
        {"spec":{"template":{"spec":{"containers":[
          {"name":"virt-handler", "resources":{"requests":{}}}
        ]}}}}
      type: strategic
    {{- if $kubeAPIProxyRewriter }}
    - resourceType: Deployment
      resourceName: virt-api
      patch: |
        {"spec":{"template":{"spec":{"containers":[
          {"name":"proxy", "resources":{"requests":{}}}
        ]}}}}
      type: strategic
    - resourceType: Deployment
      resourceName: virt-controller
      patch: |
        {"spec":{"template":{"spec":{"containers":[
          {"name":"proxy", "resources":{"requests":{}}}
        ]}}}}
      type: strategic
    - resourceType: DaemonSet
      resourceName: virt-handler
      patch: |
        {"spec":{"template":{"spec":{"containers":[
          {"name":"proxy", "resources":{"requests":{}}}
        ]}}}}
      type: strategic
    {{- end }}
    {{- end }}

  imagePullPolicy: IfNotPresent
  imagePullSecrets:
    - name: virtualization-module-registry
  infra:
    replicas: {{ include "helm_lib_is_ha_to_value" (list . 2 1) }}
  workloadUpdateStrategy:
    workloadUpdateMethods:
      - LiveMigrate
