version: "3"

silent: true

env:
  K8S_CODEGEN:
    sh: echo ${GOPATH:-$HOME/go}/pkg/mod/$(go list -f '{{`{{.Path}}@{{.Version}}`}}' -m k8s.io/code-generator)
  VMI_IMAGE:
    sh: echo ${VMI_IMAGE:-k3d-registry.virtualization-controller.test:5000/vmi-controller:latest}
  VMI_BUILDER_IMAGE:
    sh: echo ${VMI_BUILDER_IMAGE:-k3d-registry.virtualization-controller.test:5000/vmi-controller-builder:latest}

tasks:
  dev:converge:
    desc: "Rebuild and deploy all components into cluster"
    cmds:
      - task: dev:vmi:build
      - task: dev:vmi:run

  dev:cluster:reset:
    desc: "Setup or reset local kubernetes cluster using k3d"
    deps:
      - _ensure:k3d
      - _ensure:kubectl
      - _ensure:k3d-registry-domain
      - _ensure:k3d-registry-insecure-allowed
    cmds:
      - k3d registry delete --all || true
      - k3d cluster delete || true
      - k3d registry create registry.virtualization-controller.test --port 5000 --image ghcr.io/werf/test-registry:latest
      - k3d cluster create --api-port 6550 -p "80:80@loadbalancer" --registry-use k3d-registry.virtualization-controller.test:5000

      # TODO: install kubevirt here
      - |
        # Install CDI
        export TAG=$(curl -s -w %{redirect_url} https://github.com/kubevirt/containerized-data-importer/releases/latest)
        export VERSION=$(echo ${TAG##*/})
        kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-operator.yaml
        kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-cr.yaml

      - |
        # Bootstrap builder image (only needed for build with BUILDER_CACHE_IMAGE)
        docker tag golang:1.20-alpine3.16 $VMI_BUILDER_IMAGE
        docker push $VMI_BUILDER_IMAGE

  dev:vmi:build:
    desc: "Build vmi-controller image for local dev"
    cmds:
      # Simple build without BUILDER_CACHE_IMAGE build-arg (slower, but simple)
      #- |
      #  docker build . \
      #      -f ./local/vmi/Dockerfile \
      #      -t ${VMI_IMAGE}
      #  docker push ${VMI_IMAGE}

      # Build with BUILDER_CACHE_IMAGE build-arg (faster, but needs more space)
      - |
        docker build . \
            -f ./local/vmi/Dockerfile \
            --build-arg BUILDER_CACHE_IMAGE=${VMI_BUILDER_IMAGE} \
            -t ${VMI_IMAGE}
        docker push ${VMI_IMAGE}

      - |
        docker build . \
            -f ./local/vmi/Dockerfile \
            --build-arg BUILDER_CACHE_IMAGE=${VMI_BUILDER_IMAGE} \
            --target builder \
            -t ${VMI_BUILDER_IMAGE}
        docker push ${VMI_BUILDER_IMAGE}

  dev:vmi:run:
    desc: "Install vmi-controller into the cluster using helm"
    deps:
      - _ensure:helm
      - _ensure:kubectl
      - _ensure:cluster-available
    cmds:
      - (docker images | grep 'vmi-controller.*latest') || (echo "Image should be built"; exit 1)
      - |
        mkdir -p local/vmi/crds
        cp apis/*.yaml local/vmi/crds
      - |
        helm upgrade --install \
          --namespace vmi-controller \
          --create-namespace \
          --set image=$VMI_IMAGE \
          vmi-controller ./local/vmi

  dev:vmi:logs:
    desc: "Watch current vmi-controller logs"
    cmds:
      - "kubectl -n vmi-controller logs -f $(kubectl -n vmi-controller get pod | grep vmi-controller | cut -d' ' -f1)"

  dev:vmi:delete:
    desc: "Delete vmi-controller from the cluster using helm"
    deps:
      - _ensure:helm
      - _ensure:kubectl
      - _ensure:cluster-available
    cmds:
      - |
        helm delete \
          --namespace vmi-controller \
          vmi-controller
      - |
        kubectl delete ns/vmi-controller

  gen:apis:
    desc: "Regenerate deepcopy code for CRDs."
    deps:
      - _ensure:k8s-codegen-mod
    cmds:
      - |
        # Use only deepcopy generator. Use . for output-base to update files in apis/v1alpha1 directory.
        $K8S_CODEGEN/generate-groups.sh \
          deepcopy \
          github.com/deckhouse/virtualization-controller \
          . \
          "apis:v1alpha1" \
          --go-header-file "./scripts/boilerplate.go.txt" \
          --output-base .

  ci:verify-gen:
    desc: "Check generated files are up-to-date."
    deps:
      - apis-gen
    cmds:
      - |
        git diff --exit-code || (echo "Please run task gen:apis and commit changes" && exit 1)

  _ensure:k8s-codegen-mod:
    desc: "Ensure k8s.io/codegen module is present"
    cmds:
      - echo -e "Path K8S_CODEGEN=${K8S_CODEGEN} should exists.\nAdd k8s.io/code-generator to go.mod and run go mod download" > /dev/stderr
      - exit 1
    status:
      - |
        ls $K8S_CODEGEN && find $K8S_CODEGEN -name \*.sh -exec chmod +x {} \;

  _ensure:helm:
    desc: "Ensure helm is installed"
    cmds:
      - echo "Install helm" && exit 1
    status:
      - which helm >/dev/null

  _ensure:kind:
    desc: "Ensure kind is installed"
    cmds:
      - echo "Install kind" && exit 1
    status:
      - which kind >/dev/null

  _ensure:kubectl:
    desc: "Ensure kubectl is installed"
    cmds:
      - echo "Install kubectl" && exit 1
    status:
      - which kubectl >/dev/null

  _ensure:cluster-available:
    desc: "Ensure kubernetes cluster available"
    cmds:
      - echo "No cluster available, you can use 'task dev:cluster:reset' to setup local k3d cluster" && exit 1
    status:
      - kubectl version >/dev/null

  _ensure:k3d:
    desc: "Ensure k3d is installed"
    cmds:
      - echo "Install k3d" && exit 1
    status:
      - which k3d >/dev/null

  _ensure:k3d-registry-domain:
    desc: "Ensure k3d registry domain available locally"
    cmds:
      - grep 'k3d-registry.virtualization-controller.test' /etc/hosts || (echo >&2 "Please add '127.0.0.1   k3d-registry.virtualization-controller.test' into /etc/hosts" && exit 1)

  _ensure:k3d-registry-insecure-allowed:
    desc: "Ensure docker daemon allows insecure k3d registry"
    cmds:
      - |
        echo -e >&2 "Please add k3d registry as insecure:\n" \
          '{"insecure-registries": ["k3d-registry.virtualization-controller.test:5000"]'"}\n" \
          "On Linux: edit /etc/docker/daemon.json and restart docker daemon with 'sudo systemctl restart docker'\n" \
          "On Macos: configure Docker Engine in Docker Desktop settings." \
      - exit 1
    status:
      - (cat /etc/docker/daemon.json $HOME/.docker/daemon.json 2>/dev/null || true) | grep 'k3d-registry.virtualization-controller.test'
