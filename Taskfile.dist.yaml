version: "3"

silent: true

includes:
  cvmi: Taskfile.cvmi.yaml

env:
  K8S_CODEGEN:
    sh: echo $(go env GOMODCACHE)/$(go list -f '{{`{{.Path}}@{{.Version}}`}}' -m k8s.io/code-generator)
  CONTROLLER_IMAGE:
    sh: echo ${CONTROLLER_IMAGE:-k3d-registry.virtualization-controller.test:5000/virtualization-controller:latest}
  CONTROLLER_BUILDER_IMAGE:
    sh: echo ${CONTROLLER_BUILDER_IMAGE:-k3d-registry.virtualization-controller.test:5000/virtualization-controller-builder:latest}
  CONTROLLER_PREBUILT_IMAGES:
    sh: echo ${CONTROLLER_PREBUILT_IMAGES:-ghcr.io/distorhead/virtualization-controller-prebuilt-images:latest}
  REGISTRY_IMPORTER_IMAGE:
    sh: echo ${REGISTRY_IMPORTER_IMAGE:-k3d-registry.virtualization-controller.test:5000/registry-importer:latest}

tasks:
  dev:converge:
    desc: "Rebuild and deploy all components into local cluster"
    cmds:
      - task: build
      - task: dev:run

  dev:reset:
    desc: "Reset local kubernetes cluster"
    cmds:
      - task: dev:down
      - task: dev:up

  dev:up:
    desc: "Setup local kubernetes cluster using k3d"
    deps:
      - _ensure:k3d
      - _ensure:kubectl
      - _ensure:virtctl
      - _ensure:k3d-registry-domain
      - _ensure:k3d-registry-insecure-allowed
    cmds:
      - k3d registry create registry.virtualization-controller.test --port 5000
      - |
        k3d cluster create \
            --api-port 6550 -p "80:80@loadbalancer" \
            --registry-use k3d-registry.virtualization-controller.test:5000 \
            --volume "$HOME/.virtualization-controller-k3d/mounts/var/run/kubevirt:/var/run/kubevirt:rshared" \
            --volume "$HOME/.virtualization-controller-k3d/mounts/var/run/kubevirt-private:/var/run/kubevirt-private:rshared"

      - |
        # Preload images for faster start of importer
        docker pull       ghcr.io/distorhead/virtualization-controller-prebuilt-images:latest
        k3d image import  ghcr.io/distorhead/virtualization-controller-prebuilt-images:latest
        docker pull       rancher/local-path-provisioner:v0.0.24
        k3d image import  rancher/local-path-provisioner:v0.0.24
        docker pull       quay.io/kubevirt/cdi-importer:v1.56.0
        k3d image import  quay.io/kubevirt/cdi-importer:v1.56.0
        docker pull       quay.io/kubevirt/cdi-operator:v1.56.0
        k3d image import  quay.io/kubevirt/cdi-operator:v1.56.0
        docker pull       quay.io/kubevirt/cdi-apiserver:v1.56.0
        k3d image import  quay.io/kubevirt/cdi-apiserver:v1.56.0
        docker pull       quay.io/kubevirt/cdi-uploadproxy:v1.56.0
        k3d image import  quay.io/kubevirt/cdi-uploadproxy:v1.56.0

        # Preload kubevirt images
        docker pull quay.io/kubevirt/virt-api:v0.59.2
        k3d image import quay.io/kubevirt/virt-api:v0.59.2
        docker pull quay.io/kubevirt/virt-controller:v0.59.2
        k3d image import quay.io/kubevirt/virt-controller:v0.59.2
        docker pull quay.io/kubevirt/virt-handler:v0.59.2
        k3d image import quay.io/kubevirt/virt-handler:v0.59.2
        docker pull quay.io/kubevirt/virt-launcher:v0.59.2
        k3d image import quay.io/kubevirt/virt-launcher:v0.59.2
        docker pull quay.io/kubevirt/virt-operator:v0.59.2
        k3d image import quay.io/kubevirt/virt-operator:v0.59.2

      - |
        # Install KubeVirt
        export RELEASE=v0.59.2 # $(curl https://storage.googleapis.com/kubevirt-prow/release/kubevirt/kubevirt/stable.txt)
        kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/${RELEASE}/kubevirt-operator.yaml
        kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/${RELEASE}/kubevirt-cr.yaml
        kubectl -n kubevirt wait kv kubevirt --for condition=Available --timeout=5m

      - |
        # Install CDI
        export TAG=$(curl -s -w %{redirect_url} https://github.com/kubevirt/containerized-data-importer/releases/latest)
        export VERSION=$(echo ${TAG##*/})
        kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-operator.yaml
        kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-cr.yaml

      - |
        # Install rancher local-path auto provisioner
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml

      - |
        helm upgrade --install \
          --namespace caddy \
          --create-namespace \
          caddy ./local/caddy

  dev:down:
    desc: "Delete local kubernetes cluster using k3d"
    deps:
      - _ensure:k3d
      - _ensure:kubectl
      - _ensure:k3d-registry-domain
      - _ensure:k3d-registry-insecure-allowed
    cmds:
      - k3d registry delete --all || true
      - k3d cluster delete || true
      - |
        # TODO Remove CDI
      - task: build:cache:reset

  dev:cluster:push_prebuild_images:
    desc: "Preload cloud images that will be http-served in the local kubernetes cluster"
    cmds:
      - |
        [ -f local/caddy/images/ubuntu-22.04-minimal-cloudimg-amd64.img ] || wget https://cloud-images.ubuntu.com/minimal/releases/jammy/release-20230615/ubuntu-22.04-minimal-cloudimg-amd64.img -O local/caddy/images/ubuntu-22.04-minimal-cloudimg-amd64.img
      - |
        docker build ./local/caddy/ \
          -f ./local/caddy/Dockerfile \
          -t ${CONTROLLER_PREBUILT_IMAGES}
        docker push ${CONTROLLER_PREBUILT_IMAGES}

  dev:rmns:
    desc: "Remove namespace with finalizer"
    cmds:
      - |
        ns=virtualization-controller ; kubectl get namespace $ns -o json | jq '.spec.finalizers= []' | kubectl replace --raw "/api/v1/namespaces/$ns/finalize" -f -

  build:cache:reset:
    desc: "Reset go build cache"
    cmds:
      - |
        # Bootstrap builder image (only needed for build with BUILDER_CACHE_IMAGE)
        docker rmi -f $CONTROLLER_BUILDER_IMAGE || true

  build:
    # Use cmds to run deps in order.
    cmds:
      - task: build:controller
      - task: build:registry-importer
      - task: build:cleanup

  build:controller:cache:
    desc: "Download Go modules and prebuild them to speedup next builds of the controller."
    cmds:
      - |
        echo "Build go modules cache"
        docker build . \
            -f ./local/virtualization-controller/Dockerfile \
            --target builder \
            -t ${CONTROLLER_BUILDER_IMAGE}
    status:
      - |
        docker image inspect $CONTROLLER_BUILDER_IMAGE -f '{{ .Created }}'

  build:controller:nocache:
    desc: "Build virtualization-controller image"
    cmds:
      # Simple build without BUILDER_CACHE_IMAGE build-arg (slower, but simple).
      - |
        docker build . \
            -f ./local/virtualization-controller/Dockerfile \
            -t ${CONTROLLER_IMAGE}
        docker push ${CONTROLLER_IMAGE}

  build:controller:
    desc: "Build virtualization-controller image for local development"
    deps:
      - build:controller:cache
    cmds:
      # Build with BUILDER_CACHE_IMAGE build-arg (faster, but needs more space)
      - |
        echo "Build image with virtualization-controller binary"
        docker build . \
            -f ./local/virtualization-controller/Dockerfile \
            --build-arg BUILDER_CACHE_IMAGE=${CONTROLLER_BUILDER_IMAGE} \
            -t ${CONTROLLER_IMAGE}
        docker push ${CONTROLLER_IMAGE}

  build:registry-importer:
    desc: "Build registry-importer image for local development"
    cmds:
      - |
        docker build ./local/registry-importer \
            -f ./local/registry-importer/Dockerfile \
            -t ${REGISTRY_IMPORTER_IMAGE}
        docker push ${REGISTRY_IMPORTER_IMAGE}

  build:cleanup:
    cmds:
      - |
        echo "Remove dangling images"
        docker rmi -f $(docker image ls | grep k3d-registry.virtualization-controller.test:5000/ | grep '<none>' | cut -w -f 3) 2>/dev/null || true

  dev:run:
    desc: "Install virtualization-controller into the cluster using helm"
    deps:
      - _ensure:helm
      - _ensure:kubectl
      - _ensure:cluster-available
    cmds:
      - (docker images | grep 'virtualization-controller.*latest') || (echo "Image should be built"; exit 1)
      - |
        mkdir -p local/virtualization-controller/crds
        cp api/*.yaml local/virtualization-controller/crds
      - |
        helm upgrade --install \
          --namespace virtualization-controller \
          --create-namespace \
          --set image=$CONTROLLER_IMAGE \
          virtualization-controller ./local/virtualization-controller

  dev:logs:
    desc: "Watch current virtualization-controller logs"
    cmds:
      - kubectl -n virtualization-controller logs deploy/virtualization-controller -f

  dev:delete:
    desc: "Delete virtualization-controller from the cluster using helm"
    deps:
      - _ensure:helm
      - _ensure:kubectl
      - _ensure:cluster-available
    cmds:
      - |
        helm delete \
          --namespace virtualization-controller \
          virtualization-controller
      - |
        kubectl delete ns/virtualization-controller

  dev:update:crds:
    desc: "Apply CRD manifests from api directory"
    cmds:
      - task: dev:update:cvmi
      - task: dev:update:vmi
      - task: dev:update:vmd
      - task: dev:update:vmds
      - task: dev:update:vm

  dev:update:cvmi:
    desc: "Update ClusterVirtualMachineImage CRD"
    cmds:
      - kubectl apply -f api/clustervirtualmachineimage.yaml

  dev:update:vmi:
    desc: "Update VirtualMachineImage CRD"
    cmds:
      - kubectl apply -f api/virtualmachineimage.yaml

  dev:update:vmd:
    desc: "Update VirtualMachineDisk CRD"
    cmds:
      - kubectl apply -f api/virtualmachinedisk.yaml

  dev:update:vmds:
    desc: "Update VirtualMachineDiskSnapshot CRD"
    cmds:
      - kubectl apply -f api/virtualmachinedisksnapshot.yaml

  dev:update:vm:
    desc: "Update VirtualMachine CRD"
    cmds:
      - kubectl apply -f api/virtualmachine.yaml

  kctl:
    cmds:
      - kubectl -n virtualization-controller {{.CLI_ARGS}}

  gen:api:
    desc: "Regenerate deepcopy code for CRDs."
    deps:
      - _ensure:k8s-codegen-mod
    cmds:
      - |
        # Use only deepcopy generator. Use . for output-base to update files in api/v2alpha1 directory.
        $K8S_CODEGEN/generate-groups.sh \
          deepcopy \
          github.com/deckhouse/virtualization-controller \
          . \
          "api:v2alpha1" \
          --go-header-file "./scripts/boilerplate.go.txt" \
          --output-base .

  ci:generate:
    desc: "Run generations and check git diff to ensure all files are committed"
    cmds:
      - task: gen:api
      - task: _ci:verify-gen

  _ci:verify-gen:
    desc: "Check generated files are up-to-date."
    cmds:
      - |
        git diff --exit-code || (echo "Please run task gen:api and commit changes" && exit 1)

  fmt:
    desc: "Run formatters locally"
    cmds:
      - task: fmt:gci
      - task: fmt:gofumpt

  fmt:gci:
    desc: "Format code with gci, important vars: paths."
    cmds:
      - |
        gci write --skip-generated -s standard,default,prefix\(github.com/deckhouse/\) {{.CLI_ARGS}} {{.paths | default "pkg/ cmd/"}}

  fmt:gofumpt:
    desc: "Format code with gofumpt, important vars: paths"
    cmds:
      - |
        gofumpt -extra -w {{.CLI_ARGS}} {{.paths | default "cmd/ pkg/"}}

  lint:
    desc: "Run linters locally"
    cmds:
      - task: lint:go

  lint:go:
    desc: "Run golangci-lint"
    deps:
      - _ensure:golangci-lint
    cmds:
      - |
        golangci-lint run --sort-results

  ci:lint:
    desc: "Run linters in CI"
    cmds:
      - |
        ./golangci-lint run --sort-results

  _ensure:k8s-codegen-mod:
    desc: "Ensure k8s.io/codegen module is present"
    cmds:
      - echo -e "Path K8S_CODEGEN=${K8S_CODEGEN} should exists.\nAdd k8s.io/code-generator to go.mod and run go mod download" > /dev/stderr
      - exit 1
    status:
      - |
        ls $K8S_CODEGEN && find $K8S_CODEGEN -name \*.sh -exec chmod +x {} \;

  _ensure:helm:
    desc: "Ensure helm is installed"
    cmds:
      - echo "Install helm" && exit 1
    status:
      - which helm >/dev/null

  _ensure:kind:
    desc: "Ensure kind is installed"
    cmds:
      - echo "Install kind" && exit 1
    status:
      - which kind >/dev/null

  _ensure:kubectl:
    desc: "Ensure kubectl is installed"
    cmds:
      - echo "Install kubectl" && exit 1
    status:
      - which kubectl >/dev/null

  _ensure:cluster-available:
    desc: "Ensure kubernetes cluster available"
    cmds:
      - echo "No cluster available, you can use 'task dev:cluster:reset' to setup local k3d cluster" && exit 1
    status:
      - kubectl version >/dev/null

  _ensure:k3d:
    desc: "Ensure k3d is installed"
    cmds:
      - echo "Install k3d" && exit 1
    status:
      - which k3d >/dev/null

  _ensure:k3d-registry-domain:
    desc: "Ensure k3d registry domain available locally"
    cmds:
      - grep 'k3d-registry.virtualization-controller.test' /etc/hosts || (echo >&2 "Please add '127.0.0.1   k3d-registry.virtualization-controller.test' into /etc/hosts" && exit 1)

  _ensure:k3d-registry-insecure-allowed:
    desc: "Ensure docker daemon allows insecure k3d registry"
    cmds:
      - |
        echo -e >&2 "Please add k3d registry as insecure:\n" \
          '{"insecure-registries": ["k3d-registry.virtualization-controller.test:5000"]'"}\n" \
          "On Linux: edit /etc/docker/daemon.json and restart docker daemon with 'sudo systemctl restart docker'\n" \
          "On Macos: configure Docker Engine in Docker Desktop settings." \
      - exit 1
    status:
      - (cat /etc/docker/daemon.json $HOME/.docker/daemon.json 2>/dev/null || true) | grep 'k3d-registry.virtualization-controller.test'

  _ensure:golangci-lint:
    desc: "Ensure golangci-lint is available"
    cmds:
      - |
        echo -e >&2 "Please install golangci-lint https://golangci-lint.run/usage/install/"
        exit 1
    status:
      - |
        [ -f ./golangci-lint ] || which golangci-lint

  _ensure:virtctl:
    desc: "Ensure virtctl tool is installed"
    cmds:
      - echo "Install virtctl" && exit 1
    status:
      - which virtctl >/dev/null
