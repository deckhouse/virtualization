- name: kubernetes.internal.virtualization.virt_handler_state
  rules:
    - alert: D8InternalVirtualizationVirtHandlerlTargetDown
      expr: max by (job) (up{job="internal-virtualization-kubevirt-prometheus-metrics"}) == 0
      for: 1m
      labels:
        severity_level: "6"
        tier: cluster
      annotations:
        plk_markup_format: "markdown"
        plk_protocol_version: "1"
        plk_create_group_if_not_exists__d8_internal_virtulaization_virt_handler_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        plk_grouped_by__d8_internal_virtulaization_virt_handler_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        plk_ignore_labels: "job"
        summary: Prometheus cannot scrape the virtualization-controller metrics.
        description: |
          The recommended course of action:
          1. Check the Pod status: `kubectl -n d8-virtualization get pod -l kubevirt.internal.virtualization.deckhouse.io=virt-handler`
          2. Or check the Pod logs: `kubectl -n d8-virtualization logs daemonsets/virt-handler`

    - alert: D8InternalVirtualizationVirtHandlerlTargetAbsent
      expr: absent(up{job="internal-virtualization-kubevirt-prometheus-metrics") == 1
      labels:
        severity_level: "6"
        tier: cluster
      for: 15m
      annotations:
        plk_protocol_version: "1"
        plk_markup_format: "markdown"
        plk_ignore_labels: "job"
        plk_create_group_if_not_exists__d8_internal_virtulaization_virt_handler_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        plk_grouped_by__d8_internal_virtulaization_virt_handler_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        summary: There is no `virtualization-controller` target in Prometheus.
        description: |
          The recommended course of action:
          1. Check the Pod status: `kubectl -n d8-virtualization get pod -l kubevirt.internal.virtualization.deckhouse.io=virt-handler`
          2. Or check the Pod logs: `kubectl -n d8-virtualization logs daemonsets/virt-handler`

    - alert: D8InternalVirtualizationVirtHandlerPodIsNotReady
      expr: min by (pod) (avg by(node,pod,namespace)(kube_pod_info{}) * on(pod, namespace) group_right(node) kube_pod_status_ready{condition="true", namespace="d8-virtualization", pod=~"virt-handler-.*"}) != 1
      for: 10m
      labels:
        severity_level: "6"
        tier: cluster
      annotations:
        plk_protocol_version: "1"
        plk_markup_format: "markdown"
        plk_labels_as_annotations: "pod"
        plk_create_group_if_not_exists__d8_linstor_node_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        plk_grouped_by__d8_linstor_node_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        summary: The virt-handler Pod is NOT Ready.
        description: |
          The recommended course of action:
          1. Retrieve details of the Deployment: `kubectl -n d8-virtualization describe daemonset virt-handler`
          2. View the status of the Pod and try to figure out why it is not running: `kubectl -n d8-virtualization describe pod --field-selector=spec.nodeName={{ $labels.node }} -l kubevirt.internal.virtualization.deckhouse.io=virt-handler`

    - alert: D8InternalVirtualizationVirtHandlerPodIsNotRunning
      expr: absent(avg by(node,pod,namespace)(kube_pod_info{}) * on(pod, namespace) group_right(node) kube_pod_status_phase{namespace="d8-virtualization",phase="Running",pod=~"virt-handler-.*"})
      for: 2m
      labels:
        severity_level: "6"
        tier: cluster
      annotations:
        plk_protocol_version: "1"
        plk_markup_format: "markdown"
        plk_create_group_if_not_exists__d8_linstor_node_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        plk_grouped_by__d8_linstor_node_health: "D8InternalVirtualizationVirtHandlerlHealth,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes"
        summary: The virt-handler Pod is NOT Running.
        description: |
          The recommended course of action:
          1. Retrieve details of the Deployment: `kubectl -n d8-virtualization describe daemonset virt-handler`
          2. View the status of the Pod and try to figure out why it is not running: `kubectl -n d8-virtualization describe pod --field-selector=spec.nodeName={{ $labels.node }} -l kubevirt.internal.virtualization.deckhouse.io=virt-handler`
