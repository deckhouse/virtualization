{{- define "packages_template" }}

  {{- if eq .ImageInstructionType "Dockerfile" }}
---
image: images/{{ .ImageName }}
context: images/{{ .ImageName }}
dockerfile: Dockerfile
  {{- else }}
    {{- tpl .ImageBuildData . | nindent 0 }}
  {{- end }}

{{- end }}

{{- $Root := . }}
{{- $ImagesIDList := list }}

{{ $ImagePackages := .Files.Glob "images/packages/*/*/{Dockerfile,werf.inc.yaml}" }}
{{- range $path, $content := $ImagePackages }}
  {{- $ctx := dict }}
  
  {{- if regexMatch "/werf.inc.yaml$" $path }}
    {{- $_ := set $ctx "ImageInstructionType" "Stapel" }}
  {{- else }}
    {{- $_ := set $ctx "ImageInstructionType" "Dockerfile" }}
  {{- end }}

  # some
  {{- $ImageData := regexReplaceAll "^images/(packages)/([0-9a-z-_]+)/([0-9a-z-_]+)/(Dockerfile|werf.inc.yaml)$" $path "${1}#${2}#${3}#${4}" | split "#" }}
  # Print ImageData
  {{/*{{ print $ImageData }}*/}}

  {{- $_ := set $ctx "ImageType" (printf "%s/%s" $ImageData._0 $ImageData._1) }}
  {{- $_ := set $ctx "ImageName" $ImageData._2 }}
  {{- $_ := set $ctx "ImageBuildData" $content }}
  {{- $_ := set $ctx "Files" $Root.Files }}
  {{- $_ := set $ctx "Images" $Root.Images }}
  {{- $_ := set $ctx "SOURCE_REPO" $Root.SOURCE_REPO }}
  {{- $_ := set $ctx "SOURCE_REPO_GIT" $Root.SOURCE_REPO_GIT }}
  {{- $_ := set $ctx "MODULE_EDITION" $Root.MODULE_EDITION }}
  {{- $_ := set $ctx "Version" $Root.Version }}

  {{- include "packages_template" $ctx }}

  {{- range $ImageYamlMainfest := regexSplit "\n?---[ \t]*\n" (include "packages_template" $ctx) -1 }}

    {{- $ImageManifest := $ImageYamlMainfest | fromYaml }}
    
      {{- if $ImageManifest | dig "final" true }}
        
        {{- if $ImageManifest.image }}
          {{- $ImagesIDList = append $ImagesIDList $ImageManifest.image }}
        {{- end }}
      
      {{- end }}
    
  {{- end }}

{{- end }}

{{/*{{- end }}*/}}


