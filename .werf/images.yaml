# Common dirs
{{- define "module_image_template" }}

  {{- if eq .ImageInstructionType "Dockerfile" }}
---
image: images/{{ .ImageName }}
context: images/{{ .ImageName }}
dockerfile: Dockerfile
  {{- else }}
    {{- tpl .ImageBuildData . | nindent 0 }}
  {{- end }}

{{- end }}

# Context inside folder images
{{- $Root := . }}
{{- $ImagesIDList := list }}
{{ $ImagesBuildFiles := .Files.Glob "images/*/{Dockerfile,werf.inc.yaml}" }}

{{- range $path, $content := $ImagesBuildFiles }}
  {{- $ctx := dict }}
  
  {{- if regexMatch "/werf.inc.yaml$" $path }}
    {{- $_ := set $ctx "ImageInstructionType" "Stapel" }}
  {{- else }}
    {{- $_ := set $ctx "ImageInstructionType" "Dockerfile" }}
  {{- end }}

  {{- $ImageData := $path | split "/" }}

  {{- $_ := set $ctx "ImageName" $ImageData._1 }}
  {{- $_ := set $ctx "ImageBuildData" $content }}
  {{- $_ := set $ctx "Images" $Root.Images }}
  {{- $_ := set $ctx "SOURCE_REPO" $Root.SOURCE_REPO }}
  {{- $_ := set $ctx "SOURCE_REPO_GIT" $Root.SOURCE_REPO_GIT }}
  {{- $_ := set $ctx "MODULE_EDITION" $Root.MODULE_EDITION }}
  {{- $_ := set $ctx "Version" $Root.Version }}

  {{- include "module_image_template" $ctx }}
  
  {{- range $ImageYamlMainfest := regexSplit "\n?---[ \t]*\n" (include "module_image_template" $ctx) -1 }}
    {{- $ImageManifest := $ImageYamlMainfest | fromYaml }}
    
      {{- if $ImageManifest | dig "final" true }}
        
        {{- if $ImageManifest.image }}
          {{- $ImagesIDList = append $ImagesIDList $ImageManifest.image }}
        {{- end }}
      
      {{- end }}
    
  {{- end }}

{{- end }}