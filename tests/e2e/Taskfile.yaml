version: "3"

silent: true

vars:
  GINKGO_VERSION:
    # Should hide curly brackets from task templater.
    sh: go list -f '{{`{{.Version}}`}}' -m github.com/onsi/ginkgo/v2
  VERSION: "v1.0.0"

tasks:
  copy:
    cmds:
      - |
        if [ "{{OS}}" == "darwin" ]; then
          rm -rf /tmp/testdata
        else
          rm --force --recursive /tmp/testdata
        fi
        cp -a testdata /tmp/testdata

  ginkgo:
    cmds:
      - |
        if ! which ginkgo >/dev/null ; then
          echo "Ginkgo not found or not in the PATH. Install from github or run go install github.com/onsi/ginkgo/v2/ginkgo@{{ .GINKGO_VERSION }}"
          exit 1
        fi
        v=($(ginkgo version 2>/dev/null))
        if [ "v${v[2]}" != "{{ .GINKGO_VERSION }}" ]; then
          echo "Ginkgo version mismatch: {{ .GINKGO_VERSION }} is required. Got ${v[2]} in PATH."
          exit 2
        fi
  kubectl:
    cmds:
      - |
        if ! which kubectl >/dev/null ; then
          echo "kubectl not found or not in PATH"
          exit 1
        fi
  d8:
    cmds:
      - |
        if ! which d8 >/dev/null ; then
          echo "d8 not found or not in PATH. Install from https://github.com/deckhouse/deckhouse-cli/releases"
          exit 1
        fi
  run:ci:
    desc: "Separate task to run e2e tests in the CI environment"
    deps:
      - copy
      - ginkgo
      - kubectl
      - d8
    cmds:
      - |
        bash -c 'GINKGO_RESULT=$(mktemp)
        ginkgo -v --race --timeout=$TIMEOUT | tee $GINKGO_RESULT
        EXIT_CODE="${PIPESTATUS[0]}"
        RESULT=$(sed -e "s/\x1b\[[0-9;]*m//g" $GINKGO_RESULT | grep --color=never -E "FAIL!|SUCCESS!")
        if [[ $RESULT == FAIL!* || $EXIT_CODE -ne "0" ]]; then
          RESULT_STATUS=":x: FAIL!"
        elif [[ $RESULT == SUCCESS!* ]]; then
          RESULT_STATUS=":white_check_mark: SUCCESS!"
        else
          RESULT_STATUS=":question: UNKNOWN"
          EXIT_CODE=1
        fi
        DATE=$(date +"%Y-%m-%d")

        PASSED=$(echo "$RESULT" | grep -oP "\d+(?= Passed)")
        FAILED=$(echo "$RESULT" | grep -oP "\d+(?= Failed)")
        PENDING=$(echo "$RESULT" | grep -oP "\d+(?= Pending)")
        SKIPPED=$(echo "$RESULT" | grep -oP "\d+(?= Skipped)")

        SUMMARY="
        ### :dvp: **DVP $DATE Nightly e2e Tests**

        **Branch:** \`$GITHUB_REF_NAME\`
        **Status: $RESULT_STATUS**

        - ${PASSED:-0} Passed
        - ${FAILED:-0} Failed
        - ${PENDING:-0} Pending
        - ${SKIPPED:-0} Skipped

        [:link: GitHub Actions Output]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)
        "
        echo "SUMMARY<<EOF" >> $GITHUB_ENV
        echo "$SUMMARY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        exit $EXIT_CODE'

  run:
    desc: "Run e2e tests"
    deps:
      - copy
      - ginkgo
      - kubectl
      - d8
    cmds:
      - |
        ginkgo -v \
          --race \
          {{if .TIMEOUT -}}
          --timeout={{ .TIMEOUT }} \
          {{else -}}
          --timeout=2h \
          {{end -}}
          {{if .FOCUS -}}
          --focus "{{ .FOCUS }}"
          {{end -}}
  cleanup:
    desc: "Cleanup namespaces & resources left from e2e tests"
    deps:
      - kubectl
      - d8
    cmds:
      - |
        E2E_PREFIX="head-$(git rev-parse --short HEAD)"

        # Delete matching namespaces
        namespaces=$(kubectl get namespaces --no-headers | awk "/$E2E_PREFIX/ {print \$1}")
        if [[ -n "$namespaces" ]]; then
          echo "$namespaces" | xargs -r kubectl delete namespaces
        else
          echo "No namespaces found with prefix $E2E_PREFIX"
        fi

        # Delete matching projects
        projects=$(kubectl get projects --no-headers | awk "/$E2E_PREFIX/ {print \$1}")
        if [[ -n "$projects" ]]; then
          echo "$projects" | xargs -r kubectl delete projects
        else
          echo "No projects found with prefix $E2E_PREFIX"
        fi

        # Load cleanup resources from yaml, and delete resources matching the prefix
        readarray -t CLEANUP_RESOURCES < <(yq '.cleanupResources[]' default_config.yaml)
        for RESOURCE in "${CLEANUP_RESOURCES[@]}"; do
          items=$(kubectl get "$RESOURCE" --no-headers 2>/dev/null | awk "/$E2E_PREFIX/ {print \$1}")
          if [[ -n "$items" ]]; then
            echo "$items" | xargs -r kubectl delete "$RESOURCE"
          else
            echo "No $RESOURCE found with prefix $E2E_PREFIX"
          fi
        done
