# https://taskfile.dev

version: "3"

silent: true

includes:
  shatal:
    taskfile: ./shatal
    dir: ./shatal
  tank:
    taskfile: status-access-vms/tank/Taskfile.tank.yaml
    dir: status-access-vms/tank
    optional: true
  ansible:
    taskfile: status-access-vms/ansible/Taskfile.ansible.yaml
    dir: status-access-vms/ansible
    optional: true

vars:
  COUNT: '{{ .COUNT | default "1" }}'
  NAMESPACE: "{{ .NAMESPACE }}"
  STORAGE_CLASS: "{{ .STORAGE_CLASS }}"
  RESOURCES: '{{ .RESOURCES | default "all" }}'
  NAME_PREFIX: '{{ .NAME_PREFIX | default "performance" }}'
  RESOURCES_PREFIX: '{{ .RESOURCES_PREFIX | default "performance" }}'

tasks:
  help:
    desc: "Help about bootstrapper.sh."
    cmds:
      - ./bootstrapper.sh --help

  apply:
    desc: "Apply disks and virtual machines."
    cmds:
      - ./bootstrapper.sh apply --count="{{ .COUNT }}" --namespace="{{ .NAMESPACE }}" --storage-class="{{ .STORAGE_CLASS }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="{{ .RESOURCES }}" --name="{{ .NAME_PREFIX }}"

  destroy:
    desc: "Destroy disks and virtual machines."
    cmds:
      - ./bootstrapper.sh destroy --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="{{ .RESOURCES }}" --name="{{ .NAME_PREFIX }}"

  apply:all:
    desc: "Apply disks and virtual machines in two steps (in two different releases)."
    cmds:
      - task: apply:disks
        vars:
          COUNT: "{{ .COUNT }}"
          NAMESPACE: "{{ .NAMESPACE }}"
          STORAGE_CLASS: "{{ .STORAGE_CLASS }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"
      - task: apply:vms
        vars:
          COUNT: "{{ .COUNT }}"
          NAMESPACE: "{{ .NAMESPACE }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"

  destroy:all:
    desc: "Destroy disks and virtual machines in two steps (in two different releases)."
    cmds:
      - task: destroy:vms
        vars:
          NAMESPACE: "{{ .NAMESPACE }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"
      - task: destroy:disks
        vars:
          NAMESPACE: "{{ .NAMESPACE }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"

  apply:disks:
    desc: "Apply virtual machine disks."
    cmds:
      - ./bootstrapper.sh apply --count="{{ .COUNT }}" --namespace="{{ .NAMESPACE }}" --storage-class="{{ .STORAGE_CLASS }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="disks" --name="{{ .NAME_PREFIX }}-disks"

  apply:vms:
    desc: "Apply virtual machines."
    cmds:
      - ./bootstrapper.sh apply --count="{{ .COUNT }}" --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="vms" --name="{{ .NAME_PREFIX }}-vms"

  destroy:disks:
    desc: "Destroy disks."
    cmds:
      - ./bootstrapper.sh destroy --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="disks" --name="{{ .NAME_PREFIX }}-disks"

  destroy:vms:
    desc: "Destroy virtual machines."
    cmds:
      - ./bootstrapper.sh destroy --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="vms" --name="{{ .NAME_PREFIX }}-vms"

  check_or_install_software:
    desc: "Check and install Helm3, Ansible, and K9s"
    cmds:
      - task: install:helm
      - task: install:ansible
      - task: install:k9s

  install:helm:
    desc: "Install Helm if it's not installed"
    cmds:
      - |
        if ! command -v helm &> /dev/null; then
          echo "Installing Helm3..."
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        else
          echo "Helm3 is already installed"
        fi

  install:ansible:
    desc: "Install Ansible if it's not installed"
    cmds:
      - |
        if ! command -v ansible &> /dev/null; then
          echo "Installing Ansible..."
          sudo apt update
          sudo apt install -y ansible
        else
          echo "Ansible is already installed"
        fi

  install:k9s:
    desc: "Install K9s if it's not installed"
    cmds:
      - |
        if ! command -v k9s &> /dev/null; then
          echo "Installing K9s..."
          sudo apt update
          sudo apt install -y curl
          curl -s https://api.github.com/repos/derailed/k9s/releases/latest \
          | grep "browser_download_url.*k9s_Linux" \
          | cut -d : -f 2,3 \
          | tr -d \" \
          | wget -qi -
          tar -xvf k9s_Linux_*.tar.gz
          sudo mv k9s /usr/local/bin/k9s
          k9s version
        else
          echo "K9s is already installed"
        fi
