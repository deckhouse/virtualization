# https://taskfile.dev

version: "3"

silent: true

includes:
  shatal:
    taskfile: tools/shatal
    dir: tools/shatal
  tank:
    taskfile: tools/status-access-vms/tank/Taskfile.tank.yaml
    dir: tools/status-access-vms/tank
    optional: true
  ansible:
    taskfile: tools/status-access-vms/ansible/Taskfile.ansible.yaml
    dir: tools/status-access-vms/ansible
    optional: true
  statistic:
    taskfile: tools/statistic/Taskfile.yaml
    dir: tools/statistic
    optional: true
  evicter:
    taskfile: tools/evicter/Taskfile.yaml
    dir: tools/evicter
    optional: true
  netchecker:
    taskfile: tools/netchecker/Taskfile.dist.yaml
    dir: tools/netchecker
    optional: true

vars:
  COUNT: '{{ .COUNT | default "1" }}'
  NAMESPACE: '{{ .NAMESPACE | default "perf" }}'
  STORAGE_CLASS: '{{ .STORAGE_CLASS | default "linstor-thin-r1" }}'
  RESOURCES: '{{ .RESOURCES | default "all" }}'
  NAME_PREFIX: '{{ .NAME_PREFIX | default "performance" }}'
  RESOURCES_PREFIX: '{{ .RESOURCES_PREFIX | default "performance" }}'
  VIRTUALIMAGE_TYPE: '{{ .VIRTUALIMAGE_TYPE | default "containerRegistry" }}'
  VIRTUALDISK_TYPE: '{{ .VIRTUALDISK_TYPE | default "virtualDisk" }}'

tasks:
  tst:
    cmds:
      - echo "{{ .STORAGE_CLASS }}"

  helm:render:
    desc: "Render templates with default values"
    cmds:
      - |
        nelm template test . --values values.yaml

  helm:render:cr:
    desc: "Render templates with default values"
    cmds:
      - |
        nelm template test . --values values.yaml --set resources.virtualDisk.spec.template.type=containerRegistry

  helm:render:pvc:
    desc: "Render templates with default values"
    cmds:
      - |
        nelm template test . --values values.yaml --set resources.virtualDisk.spec.template.type=persistentVolumeClaim

  help:
    desc: "Help about bootstrap.sh."
    cmds:
      - ./bootstrap.sh --help

  apply:
    desc: "Apply disks and virtual machines."
    cmds:
      - ./bootstrap.sh apply --count="{{ .COUNT }}" --namespace="{{ .NAMESPACE }}" --storage-class="{{ .STORAGE_CLASS }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="{{ .RESOURCES }}" --name="{{ .NAME_PREFIX }}" --virtualDisk-type="{{ .VIRTUALDISK_TYPE }}" --virtualImage-type="{{ .VIRTUALIMAGE_TYPE }}"

  destroy:
    desc: "Destroy disks and virtual machines."
    cmds:
      - ./bootstrap.sh destroy --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="{{ .RESOURCES }}" --name="{{ .NAME_PREFIX }}"

  apply:all:
    desc: "Apply disks and virtual machines in two steps (in two different releases)."
    cmds:
      - task: apply:disks
        vars:
          COUNT: "{{ .COUNT }}"
          NAMESPACE: "{{ .NAMESPACE }}"
          STORAGE_CLASS: "{{ .STORAGE_CLASS }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"
          VIRTUALIMAGE_TYPE: "{{ .VIRTUALIMAGE_TYPE }}"
          VIRTUALDISK_TYPE: "{{ .VIRTUALDISK_TYPE }}"
      - task: apply:vms
        vars:
          COUNT: "{{ .COUNT }}"
          NAMESPACE: "{{ .NAMESPACE }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"
          VIRTUALIMAGE_TYPE: "{{ .VIRTUALIMAGE_TYPE }}"
          VIRTUALDISK_TYPE: "{{ .VIRTUALDISK_TYPE }}"

  destroy:all:
    desc: "Destroy disks and virtual machines in two steps (in two different releases)."
    cmds:
      - task: destroy:vms
        vars:
          NAMESPACE: "{{ .NAMESPACE }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"
      - task: destroy:disks
        vars:
          NAMESPACE: "{{ .NAMESPACE }}"
          NAME_PREFIX: "{{ .NAME_PREFIX }}"
          RESOURCES_PREFIX: "{{ .RESOURCES_PREFIX }}"

  apply:disks:
    desc: "Apply virtual machine disks."
    cmds:
      - |
        ./bootstrap.sh apply --count="{{ .COUNT }}" \
          --namespace="{{ .NAMESPACE }}" \
          --storage-class="{{ .STORAGE_CLASS }}" \
          --resources-prefix="{{ .RESOURCES_PREFIX }}" \
          --resources="vds" \
          --name="{{ .NAME_PREFIX }}-disks" \
          --virtualDisk-type="{{ .VIRTUALDISK_TYPE }}" \
          --virtualImage-type="{{ .VIRTUALIMAGE_TYPE }}"

  apply:vms:
    desc: "Apply virtual machines."
    cmds:
      - |
        ./bootstrap.sh apply --count="{{ .COUNT }}" \
          --namespace="{{ .NAMESPACE }}" \
          --resources-prefix="{{ .RESOURCES_PREFIX }}" \
          --resources="vms" \
          --name="{{ .NAME_PREFIX }}-vms" \
          --virtualDisk-type="{{ .VIRTUALDISK_TYPE }}" \
          --virtualImage-type="{{ .VIRTUALIMAGE_TYPE }}"

  destroy:disks:
    desc: "Destroy disks."
    cmds:
      - ./bootstrap.sh destroy --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="vds" --name="{{ .NAME_PREFIX }}-disks" --virtualDisk-type="{{ .VIRTUALDISK_TYPE }}" --virtualImage-type="{{ .VIRTUALIMAGE_TYPE }}"

  destroy:vms:
    desc: "Destroy virtual machines."
    cmds:
      - ./bootstrap.sh destroy --namespace="{{ .NAMESPACE }}" --resources-prefix="{{ .RESOURCES_PREFIX }}" --resources="vms" --name="{{ .NAME_PREFIX }}-vms" --virtualDisk-type="{{ .VIRTUALDISK_TYPE }}" --virtualImage-type="{{ .VIRTUALIMAGE_TYPE }}"

  gather:logs:
    desc: "Gather logs from d8 namespaces."
    cmds:
      - |
        ./gather-logs.sh d8-admission-policy-engine \
          d8-admission-policy-engine \
          d8-cert-manager d8-chrony \
          d8-cloud-instance-manager \
          d8-cni-cilium \
          d8-console \
          d8-csi-ceph \
          d8-dashboard \
          d8-descheduler \
          d8-ingress-nginx \
          d8-monitoring \
          d8-multitenancy-manager \
          d8-observability \
          d8-operator-ceph \
          d8-operator-prometheus \
          d8-runtime-audit-engine \
          d8-service-accounts \
          d8-snapshot-controller \
          d8-system \
          d8-user-authn \
          d8-user-authz \
          d8-virtualization

  check_or_install_software:
    desc: "Check and install Helm3, Ansible, and K9s"
    cmds:
      - task: install:helm
      - task: install:ansible
      - task: install:k9s

  install:helm:
    desc: "Install Helm if it's not installed"
    cmds:
      - |
        if ! command -v helm &> /dev/null; then
          echo "Installing Helm3..."
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        else
          echo "Helm3 is already installed"
        fi
  install:nelm:
    desc: "Install Helm if it's not installed"
    cmds:
      - |
        if ! command -v helm &> /dev/null; then
          echo "Installing Nelm..."
          wget https://tuf.nelm.sh/targets/releases/1.16.0/linux-amd64/bin/nelm
          mv nelm /usr/bin/nelm

        else
          echo "Helm3 is already installed"
        fi

  install:ansible:
    desc: "Install Ansible if it's not installed"
    cmds:
      - |
        if ! command -v ansible &> /dev/null; then
          echo "Installing Ansible..."
          sudo apt update
          sudo apt install -y ansible
        else
          echo "Ansible is already installed"
        fi

  install:k9s:
    desc: "Install K9s if it's not installed"
    cmds:
      - |
        if ! command -v k9s &> /dev/null; then
          echo "Installing K9s..."
          sudo apt update
          sudo apt install -y curl
          curl -s https://api.github.com/repos/derailed/k9s/releases/latest \
          | grep "browser_download_url.*k9s_Linux" \
          | cut -d : -f 2,3 \
          | tr -d \" \
          | wget -qi -
          tar -xvf k9s_Linux_*.tar.gz
          sudo mv k9s /usr/local/bin/k9s
          k9s version
        else
          echo "K9s is already installed"
        fi
