- name: Run
  hosts: all
  connection: local
  vars:
    d8Version: v0.0.4
    tempDir: /tmp
    d8ArchiveName: d8-{{ d8Version }}-{{ ansible_system | lower }}-{{ ansible_machine }}.tar.gz
    d8CliPathLinux: /usr/local/bin
    d8CliPathDarwin: /opt/homebrew/bin
    namespace: test-perf
    sshKeyPath: "../sshkeys/id_ed"

  tasks:
    - name: "[Linux] Check if d8cli already copy"
      ansible.builtin.stat:
        path: "{{ d8CliPathLinux }}/d8"
      register: d8installed
      delegate_to: localhost
      run_once: true
      when: ansible_system == "Linux"
      tags:
        - tst
        - install

    - name: "[Darwin] Check if d8cli already copy"
      ansible.builtin.stat:
        path: "{{ d8CliPathDarwin }}/d8"
      register: d8installed
      delegate_to: localhost
      run_once: true
      when: ansible_system == "Darwin"
      tags:
        - tst
        - install

    - name: Check if already d8cli downloaded
      ansible.builtin.stat:
        path: /tmp/{{ d8ArchiveName }}
      register: downloaded
      delegate_to: localhost
      run_once: true
      when: (d8installed is undefined) or (not d8installed.stat.exists)
      tags:
        - tst

    - name: Download d8cli
      delegate_to: localhost
      run_once: true
      when: (not downloaded.skipped) or (downloaded is undefined)
      tags:
        - tst
      block:
        - name: Download {{ d8ArchiveName }}
          ansible.builtin.get_url:
            url: https://github.com/deckhouse/deckhouse-cli/releases/download/{{ d8Version }}/{{ d8ArchiveName }}
            dest: /tmp/{{ d8ArchiveName }}
            mode: "0744"

        - name: Create a directory if it does not exist
          ansible.builtin.file:
            path: "{{ tempDir }}/d8"
            state: directory
            mode: "0755"

        - name: Extract d8cli
          ansible.builtin.unarchive:
            src: "{{ tempDir }}/{{ d8ArchiveName }}"
            dest: "{{ tempDir }}/d8"

    - name: "[Linux] Copy d8cli to {{ d8CliPathLinux }}/d8"
      ansible.builtin.copy:
        src: "{{ tempDir }}/d8/{{ ansible_system | lower }}-{{ ansible_machine }}/d8"
        dest: "{{ d8CliPathLinux }}/d8"
        mode: "0755"
      delegate_to: localhost
      run_once: true
      when:
        - (d8installed is undefined) or (not d8installed.stat.exists)
        - ansible_system == "Linux"
      tags:
        - tst
        - install

    - name: "[Darwin] Copy d8cli to {{ d8CliPathDarwin }}/d8"
      ansible.builtin.copy:
        src: "{{ tempDir }}/d8/{{ ansible_system | lower }}-{{ ansible_machine }}/d8"
        dest: "{{ d8CliPathDarwin }}/d8"
        mode: "0755"
      delegate_to: localhost
      run_once: true
      when:
        - (d8installed is undefined) or (not d8installed.stat.exists)
        - ansible_system == "Darwin"
      tags:
        - tst
        - install

    - name: Cleanup
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      delegate_to: localhost
      run_once: true
      with_items:
        - "{{ tempDir }}/{{ d8ArchiveName }}"
        - "{{ tempDir }}/d8"
      when: extracted.stat.exists
      tags:
        - never
        - clean

    - name: Get hostname
      ansible.builtin.shell: >
        ssh -o 'ProxyCommand=d8 v port-forward --stdio=true {{ inventory_hostname }}.{{ namespace }} 22' -i {{ sshKeyPath }} cloud@{{ inventory_hostname }}.{{ namespace }} hostname
      args:
        executable: /bin/bash
      register: result

    - name: Assert result
      ansible.builtin.assert:
        that:
          - "result.stdout == inventory_hostname"
        fail_msg: "'result.stdout' must be {{ inventory_hostname }}"
        success_msg: "All assertions passed; 'result.stdout' is {{ inventory_hostname }}"
      ignore_errors: true
