<?xml version="1.0" encoding="UTF-8"?>
  <testsuites tests="214" disabled="204" errors="0" failures="3" time="624.171613958">
      <testsuite name="Tests" package="/Users/antont/ansible_deckhouse/virtualization-full/tests/e2e" tests="214" disabled="0" skipped="204" errors="0" failures="3" time="624.171613958" timestamp="2025-10-09T12:19:45">
          <properties>
              <property name="SuiteSucceeded" value="false"></property>
              <property name="SuiteHasProgrammaticFocus" value="false"></property>
              <property name="SpecialSuiteFailureReason" value="Suite Timeout Elapsed"></property>
              <property name="SuiteLabels" value="[]"></property>
              <property name="RandomSeed" value="1760001572"></property>
              <property name="RandomizeAllSpecs" value="false"></property>
              <property name="LabelFilter" value=""></property>
              <property name="FocusStrings" value=""></property>
              <property name="SkipStrings" value=""></property>
              <property name="FocusFiles" value=""></property>
              <property name="SkipFiles" value=""></property>
              <property name="FailOnPending" value="false"></property>
              <property name="FailOnEmpty" value="false"></property>
              <property name="FailFast" value="false"></property>
              <property name="FlakeAttempts" value="0"></property>
              <property name="DryRun" value="false"></property>
              <property name="ParallelTotal" value="1"></property>
              <property name="OutputInterceptorMode" value=""></property>
          </properties>
          <testcase name="[SynchronizedBeforeSuite]" classname="Tests" status="passed" time="4.934292792">
              <system-err>&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 12:19:45.251&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 12:19:50.185 (4.934s)&#xA;&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 12:19:50.185&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 12:19:50.185 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the resources are applied result should be succeeded" classname="Tests" status="skipped" time="0.000639667">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeAll] VirtualDiskResizing - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:47 @ 10/09/25 12:19:50.188&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeAll] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:51 @ 10/09/25 12:19:50.189&#xA;&lt; Exit [BeforeAll] VirtualDiskResizing - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:47 @ 10/09/25 12:19:50.189 (1ms)&#xA;&gt; Enter [AfterEach] VirtualDiskResizing - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:65 @ 10/09/25 12:19:50.189&#xA;&lt; Exit [AfterEach] VirtualDiskResizing - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:65 @ 10/09/25 12:19:50.189 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual images are applied checks `VirtualImages` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:82 @ 10/09/25 12:19:50.189&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual disks are applied checks `VirtualDisks` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:94 @ 10/09/25 12:19:50.189&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied checks `VirtualMachine` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:106 @ 10/09/25 12:19:50.189&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:116 @ 10/09/25 12:19:50.189&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine block device attachment is applied checks `VirtualMachineBlockDeviceAttachment` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:132 @ 10/09/25 12:19:50.189&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains the disks metadata before resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:151 @ 10/09/25 12:19:50.19&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready resizes the disks" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:157 @ 10/09/25 12:19:50.19&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready checks `VirtualDisks`, `VirtualMachine` and `VirtualMachineBlockDeviceAttachment` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:189 @ 10/09/25 12:19:50.19&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains and compares the disks metadata after resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:216 @ 10/09/25 12:19:50.19&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because Skip() was called in BeforeAll"></skipped>
              <system-err>[SKIPPED] Spec skipped because Skip() was called in BeforeAll&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_disk_resizing_test.go:252 @ 10/09/25 12:19:50.19&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied result should be succeeded [Serial]" classname="Tests" status="passed" time="32.143705041">
              <system-err>&gt; Enter [BeforeAll] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:51 @ 10/09/25 12:19:50.19&#xA;&lt; Exit [BeforeAll] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:51 @ 10/09/25 12:19:52.19 (2s)&#xA;&gt; Enter [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:61 @ 10/09/25 12:19:52.19&#xA;&lt; Exit [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:61 @ 10/09/25 12:20:22.334 (30.143s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:22.334&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:22.334 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied should fill empty virtualMachineClassName with the default class name [Serial]" classname="Tests" status="passed" time="1.503287792">
              <system-err>&gt; Enter [It] should fill empty virtualMachineClassName with the default class name - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:82 @ 10/09/25 12:20:22.335&#xA;&lt; Exit [It] should fill empty virtualMachineClassName with the default class name - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:82 @ 10/09/25 12:20:23.838 (1.503s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:23.838&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:23.838 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual images are applied checks VIs phases [Serial]" classname="Tests" status="passed" time="1.475842291">
              <system-err>&gt; Enter [It] checks VIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:97 @ 10/09/25 12:20:23.839&#xA;STEP: VIs should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:98 @ 10/09/25 12:20:23.839&#xA;&lt; Exit [It] checks VIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:97 @ 10/09/25 12:20:25.314 (1.476s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:25.314&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:25.314 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When cluster virtual images are applied checks CVIs phases [Serial]" classname="Tests" status="passed" time="1.053958584">
              <system-err>&gt; Enter [It] checks CVIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:108 @ 10/09/25 12:20:25.315&#xA;STEP: CVIs should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:109 @ 10/09/25 12:20:25.315&#xA;&lt; Exit [It] checks CVIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:108 @ 10/09/25 12:20:26.369 (1.054s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:26.369&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:26.369 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine classes are applied checks VMClasses phases [Serial]" classname="Tests" status="passed" time="1.420436459">
              <system-err>&gt; Enter [It] checks VMClasses phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:119 @ 10/09/25 12:20:26.369&#xA;STEP: VMClasses should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:120 @ 10/09/25 12:20:26.369&#xA;&lt; Exit [It] checks VMClasses phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:119 @ 10/09/25 12:20:27.789 (1.42s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:27.789&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:20:27.789 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied patches custom VMIP with unassigned address [Serial]" classname="Tests" status="failed" time="350.630112834">
              <failure message="Timed out after 345.812s.&#xA;Expected success, but got an error:&#xA;    &lt;*errors.errorString | 0x140004da0b0&gt;: &#xA;    cannot patch VMIP &#34;head-45bdb83d-vm-custom-ip&#34; with unnassigned IP address&#xA;    error: timed out waiting for the condition on virtualmachineipaddresses/head-45bdb83d-vm-custom-ip&#xA;    &#xA;    {&#xA;        s: &#34;cannot patch VMIP \&#34;head-45bdb83d-vm-custom-ip\&#34; with unnassigned IP address\nerror: timed out waiting for the condition on virtualmachineipaddresses/head-45bdb83d-vm-custom-ip\n&#34;,&#xA;    }" type="failed">[FAILED] Timed out after 345.812s.&#xA;Expected success, but got an error:&#xA;    &lt;*errors.errorString | 0x140004da0b0&gt;: &#xA;    cannot patch VMIP &#34;head-45bdb83d-vm-custom-ip&#34; with unnassigned IP address&#xA;    error: timed out waiting for the condition on virtualmachineipaddresses/head-45bdb83d-vm-custom-ip&#xA;    &#xA;    {&#xA;        s: &#34;cannot patch VMIP \&#34;head-45bdb83d-vm-custom-ip\&#34; with unnassigned IP address\nerror: timed out waiting for the condition on virtualmachineipaddresses/head-45bdb83d-vm-custom-ip\n&#34;,&#xA;    }&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:134 @ 10/09/25 12:26:13.603&#xA;</failure>
              <system-err>&gt; Enter [It] patches custom VMIP with unassigned address - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130 @ 10/09/25 12:20:27.79&#xA;[FAILED] Timed out after 345.812s.&#xA;Expected success, but got an error:&#xA;    &lt;*errors.errorString | 0x140004da0b0&gt;: &#xA;    cannot patch VMIP &#34;head-45bdb83d-vm-custom-ip&#34; with unnassigned IP address&#xA;    error: timed out waiting for the condition on virtualmachineipaddresses/head-45bdb83d-vm-custom-ip&#xA;    &#xA;    {&#xA;        s: &#34;cannot patch VMIP \&#34;head-45bdb83d-vm-custom-ip\&#34; with unnassigned IP address\nerror: timed out waiting for the condition on virtualmachineipaddresses/head-45bdb83d-vm-custom-ip\n&#34;,&#xA;    }&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:134 @ 10/09/25 12:26:13.603&#xA;&lt; Exit [It] patches custom VMIP with unassigned address - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130 @ 10/09/25 12:26:13.604 (5m45.814s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:26:13.604&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 12:26:18.42 (4.816s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied checks VMIPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:137 @ 10/09/25 12:26:18.42&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:148 @ 10/09/25 12:26:18.42&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with no consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:158 @ 10/09/25 12:26:18.42&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines are applied checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:169 @ 10/09/25 12:26:18.42&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine block device attachments are applied checks VMBDAs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:180 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest External connection When Virtual machine agents are ready checks VMs external connectivity [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:192 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs stops VMs by VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:216 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs checks VMOPs and VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:240 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs cleanup AlwaysOn VM VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:263 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting starts VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:275 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:293 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh stops VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:310 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:334 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh start not AlwaysOn VMs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:347 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:351 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP reboot VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:368 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:381 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by ssh reboot VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:398 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods reboots the VMs by deleting their pods [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:437 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods checks VMs external connection after reboot [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:472 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When Virtual machine agents are ready starts migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:490 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:505 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs external connection after migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:521 @ 10/09/25 12:26:18.421&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When test is completed deletes test case resources [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:538 @ 10/09/25 12:26:18.422&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineEvacuation Evacuation [SIG-Migration]" classname="Tests" status="timedout" time="217.869128417">
              <failure message="A suite timeout occurred" type="timedout">[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96 @ 10/09/25 12:29:37.515&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  VirtualMachineEvacuation Evacuation (Spec Runtime: 3m19.058s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96&#xA;    In [It] (Node Runtime: 3m11.873s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96&#xA;      At [By Step] Virtual machine agents should be ready (Step Runtime: 3m11.873s)&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:97&#xA;&#xA;      Spec Goroutine&#xA;      goroutine 249 [sync.WaitGroup.Wait, 3 minutes]&#xA;        sync.runtime_SemacquireWaitGroup(0x102534b30?, 0xd0?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:114&#xA;        sync.(*WaitGroup).Wait(0x1400130c160)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/waitgroup.go:206&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources({0x140000de320, 0x2, 0x103fa4e70?}, {0x103cc30d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:349&#xA;            | &#x9;&#x9;}()&#xA;            | &#x9;}&#xA;            &gt; &#x9;wg.Wait()&#xA;            | &#x9;Expect(waitErr).To(BeEmpty())&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitByLabel({0x103cc30d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, 0x26}, {0x1400130b3b0, 0x22}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:308&#xA;            | &#x9;&#x9;resources = strings.Split(res.StdOut(), &#34; &#34;)&#xA;            | &#x9;}&#xA;            &gt; &#x9;WaitResources(resources, resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitPhaseByLabel({0x103cc30d7, 0x2a}, {0x103c8037b, 0x7}, {{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, 0x26}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:290&#xA;            | &#x9;GinkgoHelper()&#xA;            | &#x9;opts.For = fmt.Sprintf(&#34;&#39;jsonpath={.status.phase}=%s&#39;&#34;, phase)&#xA;            &gt; &#x9;WaitByLabel(resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitVMAgentReady({{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, 0x26}, {0x0, 0x0}, 0xe8d4a51000})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:274&#xA;            | func WaitVMAgentReady(opts kc.WaitOptions) {&#xA;            | &#x9;GinkgoHelper()&#xA;            &gt; &#x9;WaitPhaseByLabel(kc.ResourceVM, PhaseRunning, opts)&#xA;            | &#x9;WaitConditionIsTrueByLabel(kc.ResourceVM, vmcondition.TypeAgentReady.String(), opts)&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func17.5()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:98&#xA;            | It(&#34;Evacuation&#34;, func() {&#xA;            | &#x9;By(&#34;Virtual machine agents should be ready&#34;)&#xA;            &gt; &#x9;WaitVMAgentReady(kc.WaitOptions{&#xA;            | &#x9;&#x9;Labels:    testCaseLabel,&#xA;            | &#x9;&#x9;Namespace: ns,&#xA;        github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 26&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;      Goroutines of Interest&#xA;      goroutine 260 [syscall, 3 minutes]&#xA;        syscall.syscall6(0x100a8c350?, 0x10b138b70?, 0x10b12ca78?, 0x90?, 0x14000688008?, 0x14000065560?, 0x1400091ca68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x1400091ca98?, 0x1025b66fc?, 0x90?, 0x1045a4660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x1400026b500?, 0x1400091cad4, 0x14000a8c350?, 0x1400026b490?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x14000b11880)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x1400078b408?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000986600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000986600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002a2000?, 0x10463c1e8?, 0x1400026b3b0?}}, {0x10465c808?, 0x1400026b3b0?}, {0x140004ae0d0?, 0xc231fecfb6b50910?}, {0x104635120, 0x14000b11800}, {0x104635120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002a2000?, 0x105b43668?, 0x105b19ee0?}}, {0x10465c808, 0x1400026b3b0}, {0x140004ae0d0, 0xc4})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x104660e48?, 0x1400000e018?}, {0x103c80924?, 0x0?}}, {0x103cc30d7, 0x2a}, {0x14000632380, 0x1f}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 249&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&#xA;      goroutine 261 [syscall, 3 minutes]&#xA;        syscall.syscall6(0x10130c1a0?, 0x152057430?, 0x10b12c5c0?, 0x90?, 0x140000a7008?, 0x1400097e360?, 0x1400059ba68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x1400059ba98?, 0x1025b66fc?, 0x90?, 0x1045a4660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x1400019c7e0?, 0x1400059bad4, 0x1400130c1a0?, 0x1400019c770?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x14000117800)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x14000051c08?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000171680)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000171680)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002a2000?, 0x10463c1e8?, 0x1400019c5b0?}}, {0x10465c808?, 0x1400019c5b0?}, {0x140006fa000?, 0xc231fecfb6b46118?}, {0x104635120, 0x140001176c0}, {0x104635120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002a2000?, 0x105b43668?, 0x105b19ee0?}}, {0x10465c808, 0x1400019c5b0}, {0x140006fa000, 0xc4})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x104660e48?, 0x1400000e018?}, {0x103c80924?, 0x1400059be98?}}, {0x103cc30d7, 0x2a}, {0x140006323a0, 0x1f}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 249&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;</failure>
              <system-err>&gt; Enter [BeforeAll] VirtualMachineEvacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:42 @ 10/09/25 12:26:18.422&#xA;&lt; Exit [BeforeAll] VirtualMachineEvacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:42 @ 10/09/25 12:26:20.396 (1.974s)&#xA;&gt; Enter [BeforeEach] VirtualMachineEvacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:51 @ 10/09/25 12:26:20.396&#xA;&lt; Exit [BeforeEach] VirtualMachineEvacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:51 @ 10/09/25 12:26:25.607 (5.21s)&#xA;&gt; Enter [It] Evacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96 @ 10/09/25 12:26:25.607&#xA;STEP: Virtual machine agents should be ready - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:97 @ 10/09/25 12:26:25.607&#xA;[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96 @ 10/09/25 12:29:37.515&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  VirtualMachineEvacuation Evacuation (Spec Runtime: 3m19.058s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96&#xA;    In [It] (Node Runtime: 3m11.873s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96&#xA;      At [By Step] Virtual machine agents should be ready (Step Runtime: 3m11.873s)&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:97&#xA;&#xA;      Spec Goroutine&#xA;      goroutine 249 [sync.WaitGroup.Wait, 3 minutes]&#xA;        sync.runtime_SemacquireWaitGroup(0x102534b30?, 0xd0?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:114&#xA;        sync.(*WaitGroup).Wait(0x1400130c160)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/waitgroup.go:206&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources({0x140000de320, 0x2, 0x103fa4e70?}, {0x103cc30d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:349&#xA;            | &#x9;&#x9;}()&#xA;            | &#x9;}&#xA;            &gt; &#x9;wg.Wait()&#xA;            | &#x9;Expect(waitErr).To(BeEmpty())&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitByLabel({0x103cc30d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, 0x26}, {0x1400130b3b0, 0x22}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:308&#xA;            | &#x9;&#x9;resources = strings.Split(res.StdOut(), &#34; &#34;)&#xA;            | &#x9;}&#xA;            &gt; &#x9;WaitResources(resources, resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitPhaseByLabel({0x103cc30d7, 0x2a}, {0x103c8037b, 0x7}, {{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, 0x26}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:290&#xA;            | &#x9;GinkgoHelper()&#xA;            | &#x9;opts.For = fmt.Sprintf(&#34;&#39;jsonpath={.status.phase}=%s&#39;&#34;, phase)&#xA;            &gt; &#x9;WaitByLabel(resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitVMAgentReady({{0x0, 0x0, 0x0}, 0x1400061f6b0, {0x1400130af30, 0x26}, {0x0, 0x0}, 0xe8d4a51000})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:274&#xA;            | func WaitVMAgentReady(opts kc.WaitOptions) {&#xA;            | &#x9;GinkgoHelper()&#xA;            &gt; &#x9;WaitPhaseByLabel(kc.ResourceVM, PhaseRunning, opts)&#xA;            | &#x9;WaitConditionIsTrueByLabel(kc.ResourceVM, vmcondition.TypeAgentReady.String(), opts)&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func17.5()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:98&#xA;            | It(&#34;Evacuation&#34;, func() {&#xA;            | &#x9;By(&#34;Virtual machine agents should be ready&#34;)&#xA;            &gt; &#x9;WaitVMAgentReady(kc.WaitOptions{&#xA;            | &#x9;&#x9;Labels:    testCaseLabel,&#xA;            | &#x9;&#x9;Namespace: ns,&#xA;        github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 26&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;      Goroutines of Interest&#xA;      goroutine 260 [syscall, 3 minutes]&#xA;        syscall.syscall6(0x100a8c350?, 0x10b138b70?, 0x10b12ca78?, 0x90?, 0x14000688008?, 0x14000065560?, 0x1400091ca68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x1400091ca98?, 0x1025b66fc?, 0x90?, 0x1045a4660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x1400026b500?, 0x1400091cad4, 0x14000a8c350?, 0x1400026b490?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x14000b11880)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x1400078b408?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000986600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000986600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002a2000?, 0x10463c1e8?, 0x1400026b3b0?}}, {0x10465c808?, 0x1400026b3b0?}, {0x140004ae0d0?, 0xc231fecfb6b50910?}, {0x104635120, 0x14000b11800}, {0x104635120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002a2000?, 0x105b43668?, 0x105b19ee0?}}, {0x10465c808, 0x1400026b3b0}, {0x140004ae0d0, 0xc4})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x104660e48?, 0x1400000e018?}, {0x103c80924?, 0x0?}}, {0x103cc30d7, 0x2a}, {0x14000632380, 0x1f}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 249&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&#xA;      goroutine 261 [syscall, 3 minutes]&#xA;        syscall.syscall6(0x10130c1a0?, 0x152057430?, 0x10b12c5c0?, 0x90?, 0x140000a7008?, 0x1400097e360?, 0x1400059ba68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x1400059ba98?, 0x1025b66fc?, 0x90?, 0x1045a4660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x1400019c7e0?, 0x1400059bad4, 0x1400130c1a0?, 0x1400019c770?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x14000117800)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x14000051c08?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000171680)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000171680)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002a2000?, 0x10463c1e8?, 0x1400019c5b0?}}, {0x10465c808?, 0x1400019c5b0?}, {0x140006fa000?, 0xc231fecfb6b46118?}, {0x104635120, 0x140001176c0}, {0x104635120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002a2000?, 0x105b43668?, 0x105b19ee0?}}, {0x10465c808, 0x1400019c5b0}, {0x140006fa000, 0xc4})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x104660e48?, 0x1400000e018?}, {0x103c80924?, 0x1400059be98?}}, {0x103cc30d7, 0x2a}, {0x140006323a0, 0x1f}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 249&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&lt; Exit [It] Evacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:96 @ 10/09/25 12:29:37.521 (3m11.88s)&#xA;&gt; Enter [AfterEach] VirtualMachineEvacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:59 @ 10/09/25 12:29:37.521&#xA;STEP: Response on deletion request should be successful - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:604 @ 10/09/25 12:29:42.876&#xA;END STEP: Response on deletion request should be successful - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:604 @ 10/09/25 12:29:56.326 (13.45s)&#xA;&lt; Exit [AfterEach] VirtualMachineEvacuation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_evacuation_test.go:59 @ 10/09/25 12:29:56.326 (18.805s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] SizingPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks condition status before changing &#39;virtulaMachineCLass` field with existing class" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending changes VMClassName in VM specification with existing VMClass" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks VM phase and condition status after changing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks condition status before creating `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending changes VMClassName in VM specification with not existing VMClass which have correct prefix for creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending creates new `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks VM phase and condition after creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines in phase Running checks sizing policy match" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted first and completed second [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine deleting [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine stopped from OS [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks Migrate to not matched node should reverted because migration canceled when pod pending [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be failed with RWO VMBDA [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project creates project" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project checks project readiness" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual images are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual disks are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual machines are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the disk count before the images attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use attaches the images into the `VirtualMachine`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks the `VirtualMachine` and the `VirtualMachineBlockDeviceAttachments` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks that the `ISO` image is attached as `CD-ROM`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use check that the images are attached as the `ReadOnly` devices" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use detaches the images" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use restore the `VirtualMachines` with `forced` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual images are applied: checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machine block device attachments are applied: checks VMBDAs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: creates VDs snapshots with `requiredConsistency`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: checks snapshots of unattached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates snapshots with `requiredConsistency` of attached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates `vdSnapshots` concurrently" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks snapshots" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks `FileSystemFrozen` status of VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use restore the `VirtualMachines` with `Safe` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machine agents are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When run curl-helper status should be in Running phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets VMs and SVCs objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check ssh connection via `d8 v` to VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks VMs connection to external network" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check nginx status via `d8 v` on VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes selector in service head-45bdb83d-vm-connectivity-a with selector from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes back selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready get disk count before attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready attaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready checks VM and VMBDA phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready compares disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases get disk count before detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases detaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases checks VM phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases compares disk count before and after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VD phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VDSnapshot phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks CVIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running marks VMs with label map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs labeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running removes label map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs unlabeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase marks VMs with annotation map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs annotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase removes annotation map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs unannotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual disks are applied should be in Ready phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual machines are applied should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is in Running phase changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineCancelMigration Cancel migrate [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Auto Creates vmip with type Auto" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Static Creates vmip with type Static" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machines agents are ready checks the `status.nodeName` field of the `VirtualMachines`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-selector` agent is ready sets the `spec.nodeSelector` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-affinity` agent is ready sets the `spec.affinity.nodeAffinity` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks network availability [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machine agents and network are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks network availability after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has qemu version in the status" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has libvirt version in the status" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[SynchronizedAfterSuite]" classname="Tests" status="failed" time="0.6359455">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x14000405968&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-6594549467-h48mn&#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-6594549467-tm9qp&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-978f84689-5clqz&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x14000405938&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.joinError | 0x14000405908&gt;{&#xA;                        errs: [&#xA;                            &lt;*errors.errorString | 0x1400064e5a0&gt;{&#xA;                                s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-6594549467-h48mn&#34;,&#xA;                            },&#xA;                        ],&#xA;                    },&#xA;                    &lt;*errors.errorString | 0x1400064e5d0&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-6594549467-tm9qp&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400064e5f0&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-978f84689-5clqz&#34;,&#xA;            },&#xA;        ],&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x14000405968&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-6594549467-h48mn&#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-6594549467-tm9qp&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-978f84689-5clqz&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x14000405938&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.joinError | 0x14000405908&gt;{&#xA;                        errs: [&#xA;                            &lt;*errors.errorString | 0x1400064e5a0&gt;{&#xA;                                s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-6594549467-h48mn&#34;,&#xA;                            },&#xA;                        ],&#xA;                    },&#xA;                    &lt;*errors.errorString | 0x1400064e5d0&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-6594549467-tm9qp&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400064e5f0&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-978f84689-5clqz&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 12:29:56.966&#xA;</failure>
              <system-err>&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 12:29:56.33&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 12:29:56.33 (0s)&#xA;&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 12:29:56.33&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x14000405968&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-6594549467-h48mn&#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-6594549467-tm9qp&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-978f84689-5clqz&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x14000405938&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.joinError | 0x14000405908&gt;{&#xA;                        errs: [&#xA;                            &lt;*errors.errorString | 0x1400064e5a0&gt;{&#xA;                                s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-6594549467-h48mn&#34;,&#xA;                            },&#xA;                        ],&#xA;                    },&#xA;                    &lt;*errors.errorString | 0x1400064e5d0&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-6594549467-tm9qp&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400064e5f0&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-978f84689-5clqz&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 12:29:56.966&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 12:29:56.966 (636ms)&#xA;</system-err>
          </testcase>
          <testcase name="[DeferCleanup (Suite)]" classname="Tests" status="passed" time="12.48994875">
              <system-err>&gt; Enter [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 12:29:56.966&#xA;&lt; Exit [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 12:30:09.456 (12.49s)&#xA;</system-err>
          </testcase>
      </testsuite>
  </testsuites>