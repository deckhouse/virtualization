<?xml version="1.0" encoding="UTF-8"?>
  <testsuites tests="214" disabled="204" errors="0" failures="3" time="70.693915125">
      <testsuite name="Tests" package="/Users/antont/ansible_deckhouse/virtualization-full/tests/e2e" tests="214" disabled="0" skipped="204" errors="0" failures="3" time="70.693915125" timestamp="2025-10-09T09:13:29">
          <properties>
              <property name="SuiteSucceeded" value="false"></property>
              <property name="SuiteHasProgrammaticFocus" value="false"></property>
              <property name="SpecialSuiteFailureReason" value="Suite Timeout Elapsed"></property>
              <property name="SuiteLabels" value="[]"></property>
              <property name="RandomSeed" value="1759990396"></property>
              <property name="RandomizeAllSpecs" value="false"></property>
              <property name="LabelFilter" value=""></property>
              <property name="FocusStrings" value=""></property>
              <property name="SkipStrings" value=""></property>
              <property name="FocusFiles" value=""></property>
              <property name="SkipFiles" value=""></property>
              <property name="FailOnPending" value="false"></property>
              <property name="FailOnEmpty" value="false"></property>
              <property name="FailFast" value="false"></property>
              <property name="FlakeAttempts" value="0"></property>
              <property name="DryRun" value="false"></property>
              <property name="ParallelTotal" value="1"></property>
              <property name="OutputInterceptorMode" value=""></property>
          </properties>
          <testcase name="[SynchronizedBeforeSuite]" classname="Tests" status="passed" time="5.077511541">
              <system-err>&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:13:29.763&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:13:34.84 (5.077s)&#xA;&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:13:34.84&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:13:34.841 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtualization resources are applied: result should be succeeded" classname="Tests" status="failed" time="7.0369715">
              <failure message="immediate storage class cannot be nil; please set up the immediate storage class in the cluster&#xA;Expected&#xA;    &lt;*v1.StorageClass | 0x0&gt;: nil&#xA;not to be nil" type="failed">[FAILED] immediate storage class cannot be nil; please set up the immediate storage class in the cluster&#xA;Expected&#xA;    &lt;*v1.StorageClass | 0x0&gt;: nil&#xA;not to be nil&#xA;In [BeforeAll] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:66 @ 10/09/25 09:13:36.813&#xA;</failure>
              <system-err>&gt; Enter [BeforeAll] VirtualDiskSnapshots - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:54 @ 10/09/25 09:13:34.844&#xA;[FAILED] immediate storage class cannot be nil; please set up the immediate storage class in the cluster&#xA;Expected&#xA;    &lt;*v1.StorageClass | 0x0&gt;: nil&#xA;not to be nil&#xA;In [BeforeAll] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:66 @ 10/09/25 09:13:36.813&#xA;&lt; Exit [BeforeAll] VirtualDiskSnapshots - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:54 @ 10/09/25 09:13:36.814 (1.97s)&#xA;&gt; Enter [AfterEach] VirtualDiskSnapshots - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:78 @ 10/09/25 09:13:36.814&#xA;&lt; Exit [AfterEach] VirtualDiskSnapshots - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:78 @ 10/09/25 09:13:41.881 (5.067s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual images are applied: checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:95 @ 10/09/25 09:13:41.881&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:106 @ 10/09/25 09:13:41.881&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:117 @ 10/09/25 09:13:41.881&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machine block device attachments are applied: checks VMBDAs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:128 @ 10/09/25 09:13:41.881&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: creates VDs snapshots with `requiredConsistency`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:139 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: checks snapshots of unattached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:159 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates snapshots with `requiredConsistency` of attached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:180 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates `vdSnapshots` concurrently" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:224 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks snapshots" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:285 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks `FileSystemFrozen` status of VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:331 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vd_snapshots_test.go:357 @ 10/09/25 09:13:41.882&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineCancelMigration Cancel migrate [SIG-Migration]" classname="Tests" status="skipped" time="4.549600584">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeAll] VirtualMachineCancelMigration - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_migration_cancel_test.go:39 @ 10/09/25 09:13:41.882&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeAll] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_migration_cancel_test.go:41 @ 10/09/25 09:13:41.882&#xA;&lt; Exit [BeforeAll] VirtualMachineCancelMigration - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_migration_cancel_test.go:39 @ 10/09/25 09:13:41.883 (0s)&#xA;&gt; Enter [AfterEach] VirtualMachineCancelMigration - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_migration_cancel_test.go:59 @ 10/09/25 09:13:41.883&#xA;STEP: Response on deletion request should be successful - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:604 @ 10/09/25 09:13:41.883&#xA;END STEP: Response on deletion request should be successful - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:604 @ 10/09/25 09:13:46.432 (4.549s)&#xA;&lt; Exit [AfterEach] VirtualMachineCancelMigration - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_migration_cancel_test.go:59 @ 10/09/25 09:13:46.432 (4.549s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied result should be succeeded [Serial]" classname="Tests" status="passed" time="30.071965083">
              <system-err>&gt; Enter [BeforeAll] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:51 @ 10/09/25 09:13:46.432&#xA;&lt; Exit [BeforeAll] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:51 @ 10/09/25 09:13:48.467 (2.035s)&#xA;&gt; Enter [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:61 @ 10/09/25 09:13:48.467&#xA;&lt; Exit [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:61 @ 10/09/25 09:14:16.504 (28.037s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:16.504&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:16.504 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied should fill empty virtualMachineClassName with the default class name [Serial]" classname="Tests" status="passed" time="1.331031042">
              <system-err>&gt; Enter [It] should fill empty virtualMachineClassName with the default class name - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:82 @ 10/09/25 09:14:16.505&#xA;&lt; Exit [It] should fill empty virtualMachineClassName with the default class name - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:82 @ 10/09/25 09:14:17.835 (1.331s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:17.836&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:17.836 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual images are applied checks VIs phases [Serial]" classname="Tests" status="passed" time="1.144721834">
              <system-err>&gt; Enter [It] checks VIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:97 @ 10/09/25 09:14:17.836&#xA;STEP: VIs should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:98 @ 10/09/25 09:14:17.836&#xA;&lt; Exit [It] checks VIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:97 @ 10/09/25 09:14:18.98 (1.145s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:18.981&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:18.981 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When cluster virtual images are applied checks CVIs phases [Serial]" classname="Tests" status="passed" time="1.377431125">
              <system-err>&gt; Enter [It] checks CVIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:108 @ 10/09/25 09:14:18.981&#xA;STEP: CVIs should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:109 @ 10/09/25 09:14:18.981&#xA;&lt; Exit [It] checks CVIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:108 @ 10/09/25 09:14:20.358 (1.377s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:20.358&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:20.358 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine classes are applied checks VMClasses phases [Serial]" classname="Tests" status="passed" time="1.172404125">
              <system-err>&gt; Enter [It] checks VMClasses phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:119 @ 10/09/25 09:14:20.359&#xA;STEP: VMClasses should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:120 @ 10/09/25 09:14:20.359&#xA;&lt; Exit [It] checks VMClasses phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:119 @ 10/09/25 09:14:21.531 (1.172s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:21.531&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:21.531 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied patches custom VMIP with unassigned address [Serial]" classname="Tests" status="timedout" time="5.984339375">
              <failure message="A suite timeout occurred" type="timedout">[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130 @ 10/09/25 09:14:22.736&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  ComplexTest When virtual machines IP addresses are applied patches custom VMIP with unassigned address (Spec Runtime: 1.205s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130&#xA;    In [It] (Node Runtime: 1.205s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130&#xA;&#xA;    Spec Goroutine&#xA;    goroutine 196 [syscall]&#xA;      syscall.syscall6(0x100570570?, 0x104859110?, 0x10484c5c0?, 0x90?, 0x14000100808?, 0x1400022a630?, 0x140008dee38?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;      syscall.wait4(0x140008dee68?, 0x10016e6fc?, 0x90?, 0x10215c660?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;      syscall.Wait4(0x140002d6bd0?, 0x140008deea4, 0x14000570570?, 0x140002d6b60?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;      os.(*Process).pidWait.func1(...)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;      os.ignoringEINTR2[...](...)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;      os.(*Process).pidWait(0x1400067e840)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;      os.(*Process).wait(0x14000672408?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;      os.(*Process).Wait(...)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;      os/exec.(*Cmd).Wait(0x140007ac300)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;      os/exec.(*Cmd).Run(0x140007ac300)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x1400040d9a0?, 0x1021f41e8?, 0x140002d6a80?}}, {0x102214808?, 0x140002d6a80?}, {0x14001034680?, 0xc231f29228d1d828?}, {0x1021ed120, 0x1400067e7c0}, {0x1021ed120, ...})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;          | &#x9;cmd.Stderr = stderr&#xA;          | &#x9;cmd.Stdout = stdout&#xA;          &gt; &#x9;return cmd.Run()&#xA;          | }&#xA;          | &#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x1400040d9a0?, 0x1036fb668?, 0x1036d1ee0?}}, {0x102214808, 0x140002d6a80}, {0x14001034680, 0xc9})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;          | stdout := new(Buffer)&#xA;          | stderr := new(Buffer)&#xA;          &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;          | cmdResult := &amp;CMDResult{&#xA;          | &#x9;stdOut:  stdout,&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.PatchResource({{0x102218e48?, 0x14000429ea8?}, {0x101838924?, 0x1036fba88?}}, {0x10189ba93, 0x35}, {0x140002bc620, 0x1a}, {{0x14000878690, 0x25}, ...})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:291&#xA;          | &#x9;ctx, cancel := context.WithTimeout(context.Background(), ShortTimeout)&#xA;          | &#x9;defer cancel()&#xA;          &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;          | }&#xA;          | &#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.MergePatchResource({0x10189ba93, 0x35}, {0x14000878690, 0x25}, {0x140002bc620, 0x1a}, {0x1400064afc0, 0x21})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:166&#xA;          | func MergePatchResource(resource kc.Resource, ns, name, patch string) error {&#xA;          | &#x9;GinkgoHelper()&#xA;          &gt; &#x9;res := kubectl.PatchResource(resource, name, kc.PatchOptions{&#xA;          | &#x9;&#x9;Namespace:  ns,&#xA;          | &#x9;&#x9;MergePatch: patch,&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.AssignIPToVMIP(0x14000578240?, {0x14000878690, 0x25}, {0x140002bc620, 0x1a})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:570&#xA;          | &#xA;          | patch := fmt.Sprintf(`{&#34;spec&#34;:{&#34;staticIP&#34;:%q}}`, unassignedIP)&#xA;          &gt; err = MergePatchResource(kc.ResourceVMIP, vmipNamespace, vmipName, patch)&#xA;          | if err != nil {&#xA;          | &#x9;return fmt.Errorf(&#34;%s\n%w&#34;, assignErr, err)&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.init.func11.7.1.1()&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:133&#xA;          | &#x9;vmipName := fmt.Sprintf(&#34;%s-%s&#34;, namePrefix, &#34;vm-custom-ip&#34;)&#xA;          | &#x9;Eventually(func() error {&#xA;          &gt; &#x9;&#x9;return AssignIPToVMIP(f, ns, vmipName)&#xA;          | &#x9;}).WithTimeout(LongWaitDuration).WithPolling(Interval).Should(Succeed())&#xA;          | })&#xA;      reflect.Value.call({0x101cd2f00?, 0x140007d15c0?, 0x14000100808?}, {0x101834ea6, 0x4}, {0x1036fb668, 0x0, 0x10011dcac?})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/reflect/value.go:581&#xA;      reflect.Value.Call({0x101cd2f00?, 0x140007d15c0?, 0x140002c0940?}, {0x1036fb668?, 0x101cd2f00?, 0x140007d15c0?})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/reflect/value.go:365&#xA;      github.com/onsi/gomega/internal.(*AsyncAssertion).buildActualPoller.func3()&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/gomega@v1.36.1/internal/async_assertion.go:325&#xA;      github.com/onsi/gomega/internal.(*AsyncAssertion).match(0x140002c0850, {0x1021fecc8, 0x1036fb668}, 0x1, {0x0, 0x0, 0x0})&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/gomega@v1.36.1/internal/async_assertion.go:398&#xA;      github.com/onsi/gomega/internal.(*AsyncAssertion).Should(0x140002c0850, {0x1021fecc8, 0x1036fb668}, {0x0, 0x0, 0x0})&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/gomega@v1.36.1/internal/async_assertion.go:145&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.init.func11.7.1()&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:134&#xA;          | &#x9;Eventually(func() error {&#xA;          | &#x9;&#x9;return AssignIPToVMIP(f, ns, vmipName)&#xA;          &gt; &#x9;}).WithTimeout(LongWaitDuration).WithPolling(Interval).Should(Succeed())&#xA;          | })&#xA;          | &#xA;      github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;      github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;      github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 8&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;    Goroutines of Interest&#xA;    goroutine 116 [sync.Cond.Wait]&#xA;      sync.runtime_notifyListWait(0x1400087edc8, 0x2ff)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;      sync.(*Cond).Wait(0x1400087edb8)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;      golang.org/x/net/http2.(*pipe).Read(0x1400087edb0, {0x140009d7000, 0x1000, 0x1000})&#xA;        /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;      golang.org/x/net/http2.transportResponseBody.Read({0x140009d0a20?}, {0x140009d7000?, 0x101cc9640?, 0x140008b0e70?})&#xA;        /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;      bufio.(*Reader).fill(0x14000819440)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;      bufio.(*Reader).ReadByte(0x14000819440)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;      compress/flate.(*decompressor).moreBits(0x140009a0608)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;      compress/flate.(*decompressor).nextBlock(0x140009a0608)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;      compress/flate.(*decompressor).Read(0x140009a0608, {0x14000b6d285, 0x92d7b, 0x100231c74?})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;      compress/gzip.(*Reader).Read(0x1400029a008, {0x14000b6d285, 0x92d7b, 0x92d7b})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;      golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000b6d285?, 0x140008b7108?, 0x14000b6d158?})&#xA;        /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;      bufio.(*Scanner).Scan(0x1400099bda0)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x140009d0480, {0x12fa5dc00, 0x1400090cb40}, {0x1021ed920, 0x14000075860})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;          | num := 0&#xA;          | &#xA;          &gt; for scanner.Scan() {&#xA;          | &#x9;rawEntry := scanner.Bytes()&#xA;          | &#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;          | defer l.wg.Done()&#xA;          | &#xA;          &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;          | l.mu.Lock()&#xA;          | defer l.mu.Unlock()&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 99&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;          | &#xA;          | l.wg.Add(1)&#xA;          &gt; go func() {&#xA;          | &#x9;defer l.wg.Done()&#xA;          | &#xA;</failure>
              <system-err>&gt; Enter [It] patches custom VMIP with unassigned address - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130 @ 10/09/25 09:14:21.531&#xA;[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130 @ 10/09/25 09:14:22.736&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  ComplexTest When virtual machines IP addresses are applied patches custom VMIP with unassigned address (Spec Runtime: 1.205s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130&#xA;    In [It] (Node Runtime: 1.205s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130&#xA;&#xA;    Spec Goroutine&#xA;    goroutine 196 [syscall]&#xA;      syscall.syscall6(0x100570570?, 0x104859110?, 0x10484c5c0?, 0x90?, 0x14000100808?, 0x1400022a630?, 0x140008dee38?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;      syscall.wait4(0x140008dee68?, 0x10016e6fc?, 0x90?, 0x10215c660?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;      syscall.Wait4(0x140002d6bd0?, 0x140008deea4, 0x14000570570?, 0x140002d6b60?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;      os.(*Process).pidWait.func1(...)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;      os.ignoringEINTR2[...](...)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;      os.(*Process).pidWait(0x1400067e840)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;      os.(*Process).wait(0x14000672408?)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;      os.(*Process).Wait(...)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;      os/exec.(*Cmd).Wait(0x140007ac300)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;      os/exec.(*Cmd).Run(0x140007ac300)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x1400040d9a0?, 0x1021f41e8?, 0x140002d6a80?}}, {0x102214808?, 0x140002d6a80?}, {0x14001034680?, 0xc231f29228d1d828?}, {0x1021ed120, 0x1400067e7c0}, {0x1021ed120, ...})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;          | &#x9;cmd.Stderr = stderr&#xA;          | &#x9;cmd.Stdout = stdout&#xA;          &gt; &#x9;return cmd.Run()&#xA;          | }&#xA;          | &#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x1400040d9a0?, 0x1036fb668?, 0x1036d1ee0?}}, {0x102214808, 0x140002d6a80}, {0x14001034680, 0xc9})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;          | stdout := new(Buffer)&#xA;          | stderr := new(Buffer)&#xA;          &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;          | cmdResult := &amp;CMDResult{&#xA;          | &#x9;stdOut:  stdout,&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.PatchResource({{0x102218e48?, 0x14000429ea8?}, {0x101838924?, 0x1036fba88?}}, {0x10189ba93, 0x35}, {0x140002bc620, 0x1a}, {{0x14000878690, 0x25}, ...})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:291&#xA;          | &#x9;ctx, cancel := context.WithTimeout(context.Background(), ShortTimeout)&#xA;          | &#x9;defer cancel()&#xA;          &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;          | }&#xA;          | &#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.MergePatchResource({0x10189ba93, 0x35}, {0x14000878690, 0x25}, {0x140002bc620, 0x1a}, {0x1400064afc0, 0x21})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:166&#xA;          | func MergePatchResource(resource kc.Resource, ns, name, patch string) error {&#xA;          | &#x9;GinkgoHelper()&#xA;          &gt; &#x9;res := kubectl.PatchResource(resource, name, kc.PatchOptions{&#xA;          | &#x9;&#x9;Namespace:  ns,&#xA;          | &#x9;&#x9;MergePatch: patch,&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.AssignIPToVMIP(0x14000578240?, {0x14000878690, 0x25}, {0x140002bc620, 0x1a})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:570&#xA;          | &#xA;          | patch := fmt.Sprintf(`{&#34;spec&#34;:{&#34;staticIP&#34;:%q}}`, unassignedIP)&#xA;          &gt; err = MergePatchResource(kc.ResourceVMIP, vmipNamespace, vmipName, patch)&#xA;          | if err != nil {&#xA;          | &#x9;return fmt.Errorf(&#34;%s\n%w&#34;, assignErr, err)&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.init.func11.7.1.1()&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:133&#xA;          | &#x9;vmipName := fmt.Sprintf(&#34;%s-%s&#34;, namePrefix, &#34;vm-custom-ip&#34;)&#xA;          | &#x9;Eventually(func() error {&#xA;          &gt; &#x9;&#x9;return AssignIPToVMIP(f, ns, vmipName)&#xA;          | &#x9;}).WithTimeout(LongWaitDuration).WithPolling(Interval).Should(Succeed())&#xA;          | })&#xA;      reflect.Value.call({0x101cd2f00?, 0x140007d15c0?, 0x14000100808?}, {0x101834ea6, 0x4}, {0x1036fb668, 0x0, 0x10011dcac?})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/reflect/value.go:581&#xA;      reflect.Value.Call({0x101cd2f00?, 0x140007d15c0?, 0x140002c0940?}, {0x1036fb668?, 0x101cd2f00?, 0x140007d15c0?})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/reflect/value.go:365&#xA;      github.com/onsi/gomega/internal.(*AsyncAssertion).buildActualPoller.func3()&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/gomega@v1.36.1/internal/async_assertion.go:325&#xA;      github.com/onsi/gomega/internal.(*AsyncAssertion).match(0x140002c0850, {0x1021fecc8, 0x1036fb668}, 0x1, {0x0, 0x0, 0x0})&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/gomega@v1.36.1/internal/async_assertion.go:398&#xA;      github.com/onsi/gomega/internal.(*AsyncAssertion).Should(0x140002c0850, {0x1021fecc8, 0x1036fb668}, {0x0, 0x0, 0x0})&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/gomega@v1.36.1/internal/async_assertion.go:145&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.init.func11.7.1()&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:134&#xA;          | &#x9;Eventually(func() error {&#xA;          | &#x9;&#x9;return AssignIPToVMIP(f, ns, vmipName)&#xA;          &gt; &#x9;}).WithTimeout(LongWaitDuration).WithPolling(Interval).Should(Succeed())&#xA;          | })&#xA;          | &#xA;      github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;      github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;      github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 8&#xA;        /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;    Goroutines of Interest&#xA;    goroutine 116 [sync.Cond.Wait]&#xA;      sync.runtime_notifyListWait(0x1400087edc8, 0x2ff)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;      sync.(*Cond).Wait(0x1400087edb8)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;      golang.org/x/net/http2.(*pipe).Read(0x1400087edb0, {0x140009d7000, 0x1000, 0x1000})&#xA;        /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;      golang.org/x/net/http2.transportResponseBody.Read({0x140009d0a20?}, {0x140009d7000?, 0x101cc9640?, 0x140008b0e70?})&#xA;        /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;      bufio.(*Reader).fill(0x14000819440)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;      bufio.(*Reader).ReadByte(0x14000819440)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;      compress/flate.(*decompressor).moreBits(0x140009a0608)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;      compress/flate.(*decompressor).nextBlock(0x140009a0608)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;      compress/flate.(*decompressor).Read(0x140009a0608, {0x14000b6d285, 0x92d7b, 0x100231c74?})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;      compress/gzip.(*Reader).Read(0x1400029a008, {0x14000b6d285, 0x92d7b, 0x92d7b})&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;      golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000b6d285?, 0x140008b7108?, 0x14000b6d158?})&#xA;        /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;      bufio.(*Scanner).Scan(0x1400099bda0)&#xA;        /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x140009d0480, {0x12fa5dc00, 0x1400090cb40}, {0x1021ed920, 0x14000075860})&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;          | num := 0&#xA;          | &#xA;          &gt; for scanner.Scan() {&#xA;          | &#x9;rawEntry := scanner.Bytes()&#xA;          | &#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;          | defer l.wg.Done()&#xA;          | &#xA;          &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;          | l.mu.Lock()&#xA;          | defer l.mu.Unlock()&#xA;    &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 99&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;          | &#xA;          | l.wg.Add(1)&#xA;          &gt; go func() {&#xA;          | &#x9;defer l.wg.Done()&#xA;          | &#xA;&lt; Exit [It] patches custom VMIP with unassigned address - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:130 @ 10/09/25 09:14:22.738 (1.207s)&#xA;&gt; Enter [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:22.738&#xA;&lt; Exit [AfterEach] ComplexTest - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/complex_test.go:45 @ 10/09/25 09:14:27.516 (4.777s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied checks VMIPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with no consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines are applied checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine block device attachments are applied checks VMBDAs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest External connection When Virtual machine agents are ready checks VMs external connectivity [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs stops VMs by VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs checks VMOPs and VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs cleanup AlwaysOn VM VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting starts VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh stops VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh start not AlwaysOn VMs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP reboot VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by ssh reboot VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods reboots the VMs by deleting their pods [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods checks VMs external connection after reboot [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When Virtual machine agents are ready starts migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs external connection after migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When test is completed deletes test case resources [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machines agents are ready checks the `status.nodeName` field of the `VirtualMachines`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-selector` agent is ready sets the `spec.nodeSelector` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-affinity` agent is ready sets the `spec.affinity.nodeAffinity` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use restore the `VirtualMachines` with `forced` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineEvacuation Evacuation [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks condition status before changing &#39;virtulaMachineCLass` field with existing class" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending changes VMClassName in VM specification with existing VMClass" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks VM phase and condition status after changing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks condition status before creating `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending changes VMClassName in VM specification with not existing VMClass which have correct prefix for creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending creates new `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks VM phase and condition after creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines in phase Running checks sizing policy match" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready get disk count before attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready attaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready checks VM and VMBDA phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready compares disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases get disk count before detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases detaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases checks VM phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases compares disk count before and after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted first and completed second [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine deleting [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine stopped from OS [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks Migrate to not matched node should reverted because migration canceled when pod pending [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be failed with RWO VMBDA [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When run curl-helper status should be in Running phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets VMs and SVCs objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check ssh connection via `d8 v` to VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks VMs connection to external network" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check nginx status via `d8 v` on VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes selector in service head-45bdb83d-vm-connectivity-a with selector from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes back selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual images are applied checks `VirtualImages` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual disks are applied checks `VirtualDisks` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied checks `VirtualMachine` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine block device attachment is applied checks `VirtualMachineBlockDeviceAttachment` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains the disks metadata before resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready resizes the disks" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready checks `VirtualDisks`, `VirtualMachine` and `VirtualMachineBlockDeviceAttachment` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains and compares the disks metadata after resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has qemu version in the status" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has libvirt version in the status" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the disk count before the images attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use attaches the images into the `VirtualMachine`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks the `VirtualMachine` and the `VirtualMachineBlockDeviceAttachments` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks that the `ISO` image is attached as `CD-ROM`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use check that the images are attached as the `ReadOnly` devices" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use detaches the images" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project creates project" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project checks project readiness" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual images are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual disks are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual machines are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Auto Creates vmip with type Auto" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Static Creates vmip with type Static" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running marks VMs with label map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs labeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running removes label map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs unlabeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase marks VMs with annotation map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs annotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase removes annotation map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs unannotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VD phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VDSnapshot phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks CVIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks network availability [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machine agents and network are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks network availability after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use restore the `VirtualMachines` with `Safe` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machine agents are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual disks are applied should be in Ready phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual machines are applied should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is in Running phase changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[SynchronizedAfterSuite]" classname="Tests" status="failed" time="0.256954417">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x1400077f590&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-669d7897c9-zsqpn&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-98cf87c7-n9w9c&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x1400077f578&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.errorString | 0x1400062fe50&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-669d7897c9-zsqpn&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400062fe80&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-98cf87c7-n9w9c&#34;,&#xA;            },&#xA;        ],&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x1400077f590&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-669d7897c9-zsqpn&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-98cf87c7-n9w9c&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x1400077f578&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.errorString | 0x1400062fe50&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-669d7897c9-zsqpn&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400062fe80&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-98cf87c7-n9w9c&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 09:14:27.775&#xA;</failure>
              <system-err>&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:14:27.519&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:14:27.519 (0s)&#xA;&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:14:27.519&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x1400077f590&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-669d7897c9-zsqpn&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-98cf87c7-n9w9c&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x1400077f578&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.errorString | 0x1400062fe50&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-669d7897c9-zsqpn&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400062fe80&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-98cf87c7-n9w9c&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 09:14:27.775&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:14:27.775 (257ms)&#xA;</system-err>
          </testcase>
          <testcase name="[DeferCleanup (Suite)]" classname="Tests" status="passed" time="12.679161">
              <system-err>&gt; Enter [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 09:14:27.776&#xA;&lt; Exit [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 09:14:40.455 (12.679s)&#xA;</system-err>
          </testcase>
      </testsuite>
  </testsuites>