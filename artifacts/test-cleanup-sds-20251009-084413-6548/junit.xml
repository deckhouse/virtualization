<?xml version="1.0" encoding="UTF-8"?>
  <testsuites tests="214" disabled="202" errors="0" failures="3" time="301.655365625">
      <testsuite name="Tests" package="/Users/antont/ansible_deckhouse/virtualization-full/tests/e2e" tests="214" disabled="0" skipped="202" errors="0" failures="3" time="301.655365625" timestamp="2025-10-09T09:05:20">
          <properties>
              <property name="SuiteSucceeded" value="false"></property>
              <property name="SuiteHasProgrammaticFocus" value="false"></property>
              <property name="SpecialSuiteFailureReason" value="Suite Timeout Elapsed"></property>
              <property name="SuiteLabels" value="[]"></property>
              <property name="RandomSeed" value="1759989907"></property>
              <property name="RandomizeAllSpecs" value="false"></property>
              <property name="LabelFilter" value=""></property>
              <property name="FocusStrings" value=""></property>
              <property name="SkipStrings" value=""></property>
              <property name="FocusFiles" value=""></property>
              <property name="SkipFiles" value=""></property>
              <property name="FailOnPending" value="false"></property>
              <property name="FailOnEmpty" value="false"></property>
              <property name="FailFast" value="false"></property>
              <property name="FlakeAttempts" value="0"></property>
              <property name="DryRun" value="false"></property>
              <property name="ParallelTotal" value="1"></property>
              <property name="OutputInterceptorMode" value=""></property>
          </properties>
          <testcase name="[SynchronizedBeforeSuite]" classname="Tests" status="passed" time="4.995590708">
              <system-err>&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:05:20.13&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:05:25.125 (4.996s)&#xA;&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:05:25.125&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 09:05:25.125 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualImageCreation When resources are applied result should be succeeded" classname="Tests" status="failed" time="6.7065785">
              <failure message="immediate storage class cannot be nil; please set up the immediate storage class in the cluster&#xA;Expected&#xA;    &lt;*v1.StorageClass | 0x0&gt;: nil&#xA;not to be nil" type="failed">[FAILED] immediate storage class cannot be nil; please set up the immediate storage class in the cluster&#xA;Expected&#xA;    &lt;*v1.StorageClass | 0x0&gt;: nil&#xA;not to be nil&#xA;In [BeforeAll] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:50 @ 10/09/25 09:05:27.134&#xA;</failure>
              <system-err>&gt; Enter [BeforeAll] VirtualImageCreation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:38 @ 10/09/25 09:05:25.128&#xA;[FAILED] immediate storage class cannot be nil; please set up the immediate storage class in the cluster&#xA;Expected&#xA;    &lt;*v1.StorageClass | 0x0&gt;: nil&#xA;not to be nil&#xA;In [BeforeAll] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:50 @ 10/09/25 09:05:27.134&#xA;&lt; Exit [BeforeAll] VirtualImageCreation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:38 @ 10/09/25 09:05:27.134 (2.007s)&#xA;&gt; Enter [AfterEach] VirtualImageCreation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:70 @ 10/09/25 09:05:27.134&#xA;&lt; Exit [AfterEach] VirtualImageCreation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:70 @ 10/09/25 09:05:31.834 (4.7s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VD phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:87 @ 10/09/25 09:05:31.834&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VDSnapshot phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:96 @ 10/09/25 09:05:31.835&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:107 @ 10/09/25 09:05:31.835&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks CVIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:116 @ 10/09/25 09:05:31.835&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualImageCreation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped - Spec skipped because an earlier spec in an ordered container failed"></skipped>
              <system-err>[SKIPPED] Spec skipped because an earlier spec in an ordered container failed&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/images_creation_test.go:127 @ 10/09/25 09:05:31.835&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0.000295125">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.835&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.835&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.835 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0.000138667">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.836&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0.000135916">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.836&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0.000126416">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.836&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0.000117166">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.836&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="9.7333e-05">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.836&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.837&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0.0001285">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.837&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="8.5833e-05">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.837&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0.000107042">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:52 @ 10/09/25 09:05:31.837&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration when storage class changed - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_storage_class_changed.go:50 @ 10/09/25 09:05:31.837 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtualization resources are applied: result should be succeeded" classname="Tests" status="passed" time="4.468142542">
              <system-err>&gt; Enter [BeforeAll] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:35 @ 10/09/25 09:05:31.837&#xA;&lt; Exit [BeforeAll] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:35 @ 10/09/25 09:05:33.853 (2.015s)&#xA;&gt; Enter [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:33.853&#xA;&lt; Exit [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:33.853 (0s)&#xA;&gt; Enter [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:57 @ 10/09/25 09:05:33.853&#xA;&lt; Exit [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:57 @ 10/09/25 09:05:36.305 (2.452s)&#xA;&gt; Enter [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:36.305&#xA;&lt; Exit [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:36.305 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual disks are applied: checks VDs phases" classname="Tests" status="passed" time="20.320959875">
              <system-err>&gt; Enter [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:36.308&#xA;&lt; Exit [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:36.308 (0s)&#xA;&gt; Enter [It] checks VDs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:67 @ 10/09/25 09:05:36.308&#xA;STEP: VDs should be in Ready phase - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:68 @ 10/09/25 09:05:36.308&#xA;&lt; Exit [It] checks VDs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:67 @ 10/09/25 09:05:56.629 (20.321s)&#xA;&gt; Enter [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:56.629&#xA;&lt; Exit [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:56.629 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are applied: checks VMs phases" classname="Tests" status="passed" time="2.817525">
              <system-err>&gt; Enter [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:56.63&#xA;&lt; Exit [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:56.63 (0s)&#xA;&gt; Enter [It] checks VMs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:78 @ 10/09/25 09:05:56.63&#xA;STEP: VM should be in Running phase - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:79 @ 10/09/25 09:05:56.63&#xA;&lt; Exit [It] checks VMs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:78 @ 10/09/25 09:05:59.447 (2.817s)&#xA;&gt; Enter [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:59.447&#xA;&lt; Exit [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:59.447 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has qemu version in the status" classname="Tests" status="passed" time="7.45e-05">
              <system-err>&gt; Enter [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:59.448 (0s)&#xA;&gt; Enter [It] has qemu version in the status - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:97 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [It] has qemu version in the status - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:97 @ 10/09/25 09:05:59.448 (0s)&#xA;&gt; Enter [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:59.448 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has libvirt version in the status" classname="Tests" status="passed" time="5.7958e-05">
              <system-err>&gt; Enter [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:59.448 (0s)&#xA;&gt; Enter [It] has libvirt version in the status - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:103 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [It] has libvirt version in the status - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:103 @ 10/09/25 09:05:59.448 (0s)&#xA;&gt; Enter [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:05:59.448 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When test is completed deletes test case resources" classname="Tests" status="passed" time="70.477763958">
              <system-err>&gt; Enter [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:59.448&#xA;&lt; Exit [BeforeEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:44 @ 10/09/25 09:05:59.448 (0s)&#xA;&gt; Enter [It] deletes test case resources - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:114 @ 10/09/25 09:05:59.448&#xA;STEP: Response on deletion request should be successful - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:604 @ 10/09/25 09:05:59.448&#xA;END STEP: Response on deletion request should be successful - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:604 @ 10/09/25 09:07:09.925 (1m10.478s)&#xA;&lt; Exit [It] deletes test case resources - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:114 @ 10/09/25 09:07:09.926 (1m10.478s)&#xA;&gt; Enter [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:07:09.926&#xA;&lt; Exit [AfterEach] VirtualMachineVersions - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_version_test.go:50 @ 10/09/25 09:07:09.926 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0.000482583">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.926&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.926&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.926 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0.000161">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.927&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.927&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.927 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0.000235042">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.927&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.927&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.927 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0.000128083">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.927&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.927&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.927 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0.000144292">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.928&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0.000122792">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.928&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="9.7917e-05">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.928&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted first and completed second [SIG-Storage]" classname="Tests" status="skipped" time="0.000101125">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.928&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine deleting [SIG-Storage]" classname="Tests" status="skipped" time="0.000100083">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.928&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.928 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine stopped from OS [SIG-Storage]" classname="Tests" status="skipped" time="9.275e-05">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.929&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.929&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.929 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks Migrate to not matched node should reverted because migration canceled when pod pending [SIG-Storage]" classname="Tests" status="skipped" time="0.00010325">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.929&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.929&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.929 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be failed with RWO VMBDA [SIG-Storage]" classname="Tests" status="skipped" time="0.000110167">
              <skipped message="skipped - This test case is not working everytime. Should be fixed."></skipped>
              <system-err>&gt; Enter [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.929&#xA;[SKIPPED] This test case is not working everytime. Should be fixed.&#xA;In [BeforeEach] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:55 @ 10/09/25 09:07:09.929&#xA;&lt; Exit [BeforeEach] [sig-storage] Volume migration with local disks - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/storage/volume_migration_local_disks.go:53 @ 10/09/25 09:07:09.929 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="passed" time="9.045853792">
              <system-err>&gt; Enter [BeforeAll] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:55 @ 10/09/25 09:07:09.929&#xA;&lt; Exit [BeforeAll] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:55 @ 10/09/25 09:07:12.06 (2.13s)&#xA;&gt; Enter [BeforeEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:64 @ 10/09/25 09:07:12.06&#xA;&lt; Exit [BeforeEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:64 @ 10/09/25 09:07:12.06 (0s)&#xA;&gt; Enter [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:80 @ 10/09/25 09:07:12.06&#xA;&lt; Exit [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:80 @ 10/09/25 09:07:18.975 (6.915s)&#xA;&gt; Enter [AfterEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:71 @ 10/09/25 09:07:18.975&#xA;&lt; Exit [AfterEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:71 @ 10/09/25 09:07:18.975 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="timedout" time="178.7445695">
              <failure message="A suite timeout occurred" type="timedout">[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111 @ 10/09/25 09:10:12.892&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  VirtualMachineRestoreForce When the virtualization resources are applied checks the resources phase (Spec Runtime: 2m53.891s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111&#xA;    In [It] (Node Runtime: 2m53.891s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111&#xA;      At [By Step] `VirtualMachine` agent should be ready (Step Runtime: 2m53.891s)&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:112&#xA;&#xA;      Spec Goroutine&#xA;      goroutine 220 [sync.WaitGroup.Wait, 4 minutes]&#xA;        sync.runtime_SemacquireWaitGroup(0x100bfcb30?, 0x20?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:114&#xA;        sync.(*WaitGroup).Wait(0x140008bf1d0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/waitgroup.go:206&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources({0x1400081e460, 0x2, 0x10266ce70?}, {0x10238b0d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:349&#xA;            | &#x9;&#x9;}()&#xA;            | &#x9;}&#xA;            &gt; &#x9;wg.Wait()&#xA;            | &#x9;Expect(waitErr).To(BeEmpty())&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitByLabel({0x10238b0d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, 0x29}, {0x14000962090, 0x22}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:308&#xA;            | &#x9;&#x9;resources = strings.Split(res.StdOut(), &#34; &#34;)&#xA;            | &#x9;}&#xA;            &gt; &#x9;WaitResources(resources, resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitPhaseByLabel({0x10238b0d7, 0x2a}, {0x10234837b, 0x7}, {{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, 0x29}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:290&#xA;            | &#x9;GinkgoHelper()&#xA;            | &#x9;opts.For = fmt.Sprintf(&#34;&#39;jsonpath={.status.phase}=%s&#39;&#34;, phase)&#xA;            &gt; &#x9;WaitByLabel(resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitVMAgentReady({{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, 0x29}, {0x0, 0x0}, 0xe8d4a51000})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:274&#xA;            | func WaitVMAgentReady(opts kc.WaitOptions) {&#xA;            | &#x9;GinkgoHelper()&#xA;            &gt; &#x9;WaitPhaseByLabel(kc.ResourceVM, PhaseRunning, opts)&#xA;            | &#x9;WaitConditionIsTrueByLabel(kc.ResourceVM, vmcondition.TypeAgentReady.String(), opts)&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func21.4.2.1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:113&#xA;            | It(&#34;checks the resources phase&#34;, func() {&#xA;            | &#x9;By(&#34;`VirtualMachine` agent should be ready&#34;, func() {&#xA;            &gt; &#x9;&#x9;WaitVMAgentReady(kc.WaitOptions{&#xA;            | &#x9;&#x9;&#x9;Labels:    testCaseLabel,&#xA;            | &#x9;&#x9;&#x9;Namespace: namespace,&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).By(0x1400044b508, {0x102382434, 0x26}, {0x1400015ff48, 0x1, 0x1022db584?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:323&#xA;        github.com/onsi/ginkgo/v2.By({0x102382434?, 0x102d04210?}, {0x14000fc3f48?, 0x140004bcfa0?, 0x14000fc3f58?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/core_dsl.go:600&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func21.4.2()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:112&#xA;            | &#xA;            | It(&#34;checks the resources phase&#34;, func() {&#xA;            &gt; &#x9;By(&#34;`VirtualMachine` agent should be ready&#34;, func() {&#xA;            | &#x9;&#x9;WaitVMAgentReady(kc.WaitOptions{&#xA;            | &#x9;&#x9;&#x9;Labels:    testCaseLabel,&#xA;        github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 7&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;      Goroutines of Interest&#xA;      goroutine 95 [sync.Cond.Wait, 4 minutes]&#xA;        sync.runtime_notifyListWait(0x140008d81c8, 0x27)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;        sync.(*Cond).Wait(0x140008d81b8)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;        golang.org/x/net/http2.(*pipe).Read(0x140008d81b0, {0x140008cd000, 0x1000, 0x1000})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;        golang.org/x/net/http2.transportResponseBody.Read({0x140005bc570?}, {0x140008cd000?, 0x1027d9640?, 0x14000828e70?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;        bufio.(*Reader).fill(0x140007c8600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;        bufio.(*Reader).ReadByte(0x140007c8600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;        compress/flate.(*decompressor).moreBits(0x140008ea008)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;        compress/flate.(*decompressor).nextBlock(0x140008ea008)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;        compress/flate.(*decompressor).Read(0x140008ea008, {0x14000c08ae0, 0xf7520, 0x100d41c74?})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;        compress/gzip.(*Reader).Read(0x1400029a008, {0x14000c08ae0, 0xf7520, 0xf7520})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;        golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000c08ae0?, 0x140002bba98?, 0x14000c08856?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;        bufio.(*Scanner).Scan(0x140007dbda0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x14000536450, {0x1105901b0, 0x140009f9980}, {0x102cfd920, 0x14000119380})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;            | num := 0&#xA;            | &#xA;            &gt; for scanner.Scan() {&#xA;            | &#x9;rawEntry := scanner.Bytes()&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;            | defer l.wg.Done()&#xA;            | &#xA;            &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;            | l.mu.Lock()&#xA;            | defer l.mu.Unlock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 27&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;            | &#xA;            | l.wg.Add(1)&#xA;            &gt; go func() {&#xA;            | &#x9;defer l.wg.Done()&#xA;            | &#xA;&#xA;      goroutine 224 [syscall, 4 minutes]&#xA;        syscall.syscall6(0x100a00e60?, 0x110864660?, 0x104f545c0?, 0x90?, 0x14000680008?, 0x140008ae3f0?, 0x14001021a68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x14001021a98?, 0x100c7e6fc?, 0x90?, 0x102c6c660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x1400028a7e0?, 0x14001021ad4, 0x14000a00e60?, 0x1400028a770?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x14000480700)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x1400097b008?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000626180)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000626180)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002b99a0?, 0x102d041e8?, 0x1400028a690?}}, {0x102d24808?, 0x1400028a690?}, {0x14000064340?, 0xc231f3250106dcf8?}, {0x102cfd120, 0x14000480680}, {0x102cfd120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002b99a0?, 0x10420b668?, 0x1041e1ee0?}}, {0x102d24808, 0x1400028a690}, {0x14000064340, 0xd0})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x102d28e48?, 0x1400048c210?}, {0x102348924?, 0x14000fc3ed8?}}, {0x10238b0d7, 0x2a}, {0x14000fa36d0, 0x28}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 220&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&#xA;      goroutine 225 [syscall, 4 minutes]&#xA;        syscall.syscall6(0x1008bf210?, 0x11060c648?, 0x104f54a78?, 0x90?, 0x140000a5808?, 0x14000868ea0?, 0x1400101fa68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x1400101fa98?, 0x100c7e6fc?, 0x90?, 0x102c6c660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x14000280850?, 0x1400101fad4, 0x140008bf210?, 0x140002807e0?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x140006d2d40)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x1400095f808?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x140008d8780)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x140008d8780)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002b99a0?, 0x102d041e8?, 0x14000280700?}}, {0x102d24808?, 0x14000280700?}, {0x140008baea0?, 0xc231f3250106b5e8?}, {0x102cfd120, 0x140006d2cc0}, {0x102cfd120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002b99a0?, 0x10420b668?, 0x1041e1ee0?}}, {0x102d24808, 0x14000280700}, {0x140008baea0, 0xc6})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x102d28e48?, 0x1400048c210?}, {0x102348924?, 0x0?}}, {0x10238b0d7, 0x2a}, {0x14000fa36f9, 0x1e}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 220&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;</failure>
              <system-err>&gt; Enter [BeforeEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:64 @ 10/09/25 09:07:18.975&#xA;&lt; Exit [BeforeEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:64 @ 10/09/25 09:07:18.975 (0s)&#xA;&gt; Enter [It] checks the resources phase - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111 @ 10/09/25 09:07:18.975&#xA;STEP: `VirtualMachine` agent should be ready - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:112 @ 10/09/25 09:07:18.975&#xA;[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111 @ 10/09/25 09:10:12.892&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  VirtualMachineRestoreForce When the virtualization resources are applied checks the resources phase (Spec Runtime: 2m53.891s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111&#xA;    In [It] (Node Runtime: 2m53.891s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111&#xA;      At [By Step] `VirtualMachine` agent should be ready (Step Runtime: 2m53.891s)&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:112&#xA;&#xA;      Spec Goroutine&#xA;      goroutine 220 [sync.WaitGroup.Wait, 4 minutes]&#xA;        sync.runtime_SemacquireWaitGroup(0x100bfcb30?, 0x20?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:114&#xA;        sync.(*WaitGroup).Wait(0x140008bf1d0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/waitgroup.go:206&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources({0x1400081e460, 0x2, 0x10266ce70?}, {0x10238b0d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:349&#xA;            | &#x9;&#x9;}()&#xA;            | &#x9;}&#xA;            &gt; &#x9;wg.Wait()&#xA;            | &#x9;Expect(waitErr).To(BeEmpty())&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitByLabel({0x10238b0d7, 0x2a}, {{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, 0x29}, {0x14000962090, 0x22}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:308&#xA;            | &#x9;&#x9;resources = strings.Split(res.StdOut(), &#34; &#34;)&#xA;            | &#x9;}&#xA;            &gt; &#x9;WaitResources(resources, resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitPhaseByLabel({0x10238b0d7, 0x2a}, {0x10234837b, 0x7}, {{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, 0x29}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:290&#xA;            | &#x9;GinkgoHelper()&#xA;            | &#x9;opts.For = fmt.Sprintf(&#34;&#39;jsonpath={.status.phase}=%s&#39;&#34;, phase)&#xA;            &gt; &#x9;WaitByLabel(resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitVMAgentReady({{0x0, 0x0, 0x0}, 0x1400053e2a0, {0x1400039fb30, 0x29}, {0x0, 0x0}, 0xe8d4a51000})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:274&#xA;            | func WaitVMAgentReady(opts kc.WaitOptions) {&#xA;            | &#x9;GinkgoHelper()&#xA;            &gt; &#x9;WaitPhaseByLabel(kc.ResourceVM, PhaseRunning, opts)&#xA;            | &#x9;WaitConditionIsTrueByLabel(kc.ResourceVM, vmcondition.TypeAgentReady.String(), opts)&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func21.4.2.1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:113&#xA;            | It(&#34;checks the resources phase&#34;, func() {&#xA;            | &#x9;By(&#34;`VirtualMachine` agent should be ready&#34;, func() {&#xA;            &gt; &#x9;&#x9;WaitVMAgentReady(kc.WaitOptions{&#xA;            | &#x9;&#x9;&#x9;Labels:    testCaseLabel,&#xA;            | &#x9;&#x9;&#x9;Namespace: namespace,&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).By(0x1400044b508, {0x102382434, 0x26}, {0x1400015ff48, 0x1, 0x1022db584?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:323&#xA;        github.com/onsi/ginkgo/v2.By({0x102382434?, 0x102d04210?}, {0x14000fc3f48?, 0x140004bcfa0?, 0x14000fc3f58?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/core_dsl.go:600&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func21.4.2()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:112&#xA;            | &#xA;            | It(&#34;checks the resources phase&#34;, func() {&#xA;            &gt; &#x9;By(&#34;`VirtualMachine` agent should be ready&#34;, func() {&#xA;            | &#x9;&#x9;WaitVMAgentReady(kc.WaitOptions{&#xA;            | &#x9;&#x9;&#x9;Labels:    testCaseLabel,&#xA;        github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 7&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;      Goroutines of Interest&#xA;      goroutine 95 [sync.Cond.Wait, 4 minutes]&#xA;        sync.runtime_notifyListWait(0x140008d81c8, 0x27)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;        sync.(*Cond).Wait(0x140008d81b8)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;        golang.org/x/net/http2.(*pipe).Read(0x140008d81b0, {0x140008cd000, 0x1000, 0x1000})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;        golang.org/x/net/http2.transportResponseBody.Read({0x140005bc570?}, {0x140008cd000?, 0x1027d9640?, 0x14000828e70?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;        bufio.(*Reader).fill(0x140007c8600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;        bufio.(*Reader).ReadByte(0x140007c8600)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;        compress/flate.(*decompressor).moreBits(0x140008ea008)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;        compress/flate.(*decompressor).nextBlock(0x140008ea008)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;        compress/flate.(*decompressor).Read(0x140008ea008, {0x14000c08ae0, 0xf7520, 0x100d41c74?})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;        compress/gzip.(*Reader).Read(0x1400029a008, {0x14000c08ae0, 0xf7520, 0xf7520})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;        golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000c08ae0?, 0x140002bba98?, 0x14000c08856?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;        bufio.(*Scanner).Scan(0x140007dbda0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x14000536450, {0x1105901b0, 0x140009f9980}, {0x102cfd920, 0x14000119380})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;            | num := 0&#xA;            | &#xA;            &gt; for scanner.Scan() {&#xA;            | &#x9;rawEntry := scanner.Bytes()&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;            | defer l.wg.Done()&#xA;            | &#xA;            &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;            | l.mu.Lock()&#xA;            | defer l.mu.Unlock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 27&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;            | &#xA;            | l.wg.Add(1)&#xA;            &gt; go func() {&#xA;            | &#x9;defer l.wg.Done()&#xA;            | &#xA;&#xA;      goroutine 224 [syscall, 4 minutes]&#xA;        syscall.syscall6(0x100a00e60?, 0x110864660?, 0x104f545c0?, 0x90?, 0x14000680008?, 0x140008ae3f0?, 0x14001021a68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x14001021a98?, 0x100c7e6fc?, 0x90?, 0x102c6c660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x1400028a7e0?, 0x14001021ad4, 0x14000a00e60?, 0x1400028a770?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x14000480700)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x1400097b008?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000626180)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000626180)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002b99a0?, 0x102d041e8?, 0x1400028a690?}}, {0x102d24808?, 0x1400028a690?}, {0x14000064340?, 0xc231f3250106dcf8?}, {0x102cfd120, 0x14000480680}, {0x102cfd120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002b99a0?, 0x10420b668?, 0x1041e1ee0?}}, {0x102d24808, 0x1400028a690}, {0x14000064340, 0xd0})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x102d28e48?, 0x1400048c210?}, {0x102348924?, 0x14000fc3ed8?}}, {0x10238b0d7, 0x2a}, {0x14000fa36d0, 0x28}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 220&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&#xA;      goroutine 225 [syscall, 4 minutes]&#xA;        syscall.syscall6(0x1008bf210?, 0x11060c648?, 0x104f54a78?, 0x90?, 0x140000a5808?, 0x14000868ea0?, 0x1400101fa68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x1400101fa98?, 0x100c7e6fc?, 0x90?, 0x102c6c660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x14000280850?, 0x1400101fad4, 0x140008bf210?, 0x140002807e0?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x140006d2d40)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x1400095f808?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x140008d8780)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x140008d8780)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002b99a0?, 0x102d041e8?, 0x14000280700?}}, {0x102d24808?, 0x14000280700?}, {0x140008baea0?, 0xc231f3250106b5e8?}, {0x102cfd120, 0x140006d2cc0}, {0x102cfd120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002b99a0?, 0x10420b668?, 0x1041e1ee0?}}, {0x102d24808, 0x14000280700}, {0x140008baea0, 0xc6})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x102d28e48?, 0x1400048c210?}, {0x102348924?, 0x0?}}, {0x10238b0d7, 0x2a}, {0x14000fa36f9, 0x1e}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 220&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&lt; Exit [It] checks the resources phase - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:111 @ 10/09/25 09:10:12.895 (2m53.894s)&#xA;&gt; Enter [AfterEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:71 @ 10/09/25 09:10:12.895&#xA;&lt; Exit [AfterEach] VirtualMachineRestoreForce - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_restore_force_test.go:71 @ 10/09/25 09:10:17.746 (4.851s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use restore the `VirtualMachines` with `forced` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual images are applied: checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machine block device attachments are applied: checks VMBDAs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: creates VDs snapshots with `requiredConsistency`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: checks snapshots of unattached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates snapshots with `requiredConsistency` of attached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates `vdSnapshots` concurrently" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks snapshots" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks `FileSystemFrozen` status of VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineEvacuation Evacuation [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use restore the `VirtualMachines` with `Safe` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready get disk count before attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready attaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready checks VM and VMBDA phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready compares disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases get disk count before detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases detaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases checks VM phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases compares disk count before and after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project creates project" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project checks project readiness" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual images are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual disks are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual machines are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running marks VMs with label map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs labeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running removes label map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs unlabeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase marks VMs with annotation map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs annotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase removes annotation map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs unannotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual images are applied checks `VirtualImages` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual disks are applied checks `VirtualDisks` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied checks `VirtualMachine` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine block device attachment is applied checks `VirtualMachineBlockDeviceAttachment` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains the disks metadata before resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready resizes the disks" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready checks `VirtualDisks`, `VirtualMachine` and `VirtualMachineBlockDeviceAttachment` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains and compares the disks metadata after resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks network availability [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machine agents and network are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks network availability after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machine agents are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Auto Creates vmip with type Auto" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Static Creates vmip with type Static" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied result should be succeeded [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied should fill empty virtualMachineClassName with the default class name [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual images are applied checks VIs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When cluster virtual images are applied checks CVIs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine classes are applied checks VMClasses phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied patches custom VMIP with unassigned address [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied checks VMIPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with no consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines are applied checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine block device attachments are applied checks VMBDAs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest External connection When Virtual machine agents are ready checks VMs external connectivity [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs stops VMs by VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs checks VMOPs and VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs cleanup AlwaysOn VM VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting starts VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh stops VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh start not AlwaysOn VMs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP reboot VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by ssh reboot VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods reboots the VMs by deleting their pods [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods checks VMs external connection after reboot [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When Virtual machine agents are ready starts migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs external connection after migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When test is completed deletes test case resources [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machines agents are ready checks the `status.nodeName` field of the `VirtualMachines`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-selector` agent is ready sets the `spec.nodeSelector` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-affinity` agent is ready sets the `spec.affinity.nodeAffinity` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When run curl-helper status should be in Running phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets VMs and SVCs objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check ssh connection via `d8 v` to VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks VMs connection to external network" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check nginx status via `d8 v` on VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes selector in service head-45bdb83d-vm-connectivity-a with selector from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes back selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the disk count before the images attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use attaches the images into the `VirtualMachine`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks the `VirtualMachine` and the `VirtualMachineBlockDeviceAttachments` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks that the `ISO` image is attached as `CD-ROM`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use check that the images are attached as the `ReadOnly` devices" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use detaches the images" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineCancelMigration Cancel migrate [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual disks are applied should be in Ready phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual machines are applied should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is in Running phase changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks condition status before changing &#39;virtulaMachineCLass` field with existing class" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending changes VMClassName in VM specification with existing VMClass" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks VM phase and condition status after changing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks condition status before creating `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending changes VMClassName in VM specification with not existing VMClass which have correct prefix for creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending creates new `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks VM phase and condition after creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines in phase Running checks sizing policy match" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[SynchronizedAfterSuite]" classname="Tests" status="failed" time="0.262569917">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x140008191d0&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-7845b5698b-g7jl2&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-7d7c98f8d-czdq9&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x140008191b8&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.errorString | 0x1400081a260&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-7845b5698b-g7jl2&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400081a290&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-7d7c98f8d-czdq9&#34;,&#xA;            },&#xA;        ],&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x140008191d0&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-7845b5698b-g7jl2&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-7d7c98f8d-czdq9&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x140008191b8&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.errorString | 0x1400081a260&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-7845b5698b-g7jl2&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400081a290&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-7d7c98f8d-czdq9&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 09:10:18.01&#xA;</failure>
              <system-err>&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:10:17.748&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:10:17.748 (0s)&#xA;&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:10:17.748&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x140008191d0&gt;: &#xA;    the container &#34;virtualization-controller&#34; was restarted: virtualization-controller-7845b5698b-g7jl2&#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-7d7c98f8d-czdq9&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.joinError | 0x140008191b8&gt;{&#xA;                errs: [&#xA;                    &lt;*errors.errorString | 0x1400081a260&gt;{&#xA;                        s: &#34;the container \&#34;virtualization-controller\&#34; was restarted: virtualization-controller-7845b5698b-g7jl2&#34;,&#xA;                    },&#xA;                ],&#xA;            },&#xA;            &lt;*errors.errorString | 0x1400081a290&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-7d7c98f8d-czdq9&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 09:10:18.01&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 09:10:18.01 (263ms)&#xA;</system-err>
          </testcase>
          <testcase name="[DeferCleanup (Suite)]" classname="Tests" status="passed" time="3.795200708">
              <system-err>&gt; Enter [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 09:10:18.011&#xA;&lt; Exit [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 09:10:21.806 (3.795s)&#xA;</system-err>
          </testcase>
      </testsuite>
  </testsuites>