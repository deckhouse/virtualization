<?xml version="1.0" encoding="UTF-8"?>
  <testsuites tests="214" disabled="208" errors="0" failures="2" time="601.738761833">
      <testsuite name="Tests" package="/Users/antont/ansible_deckhouse/virtualization-full/tests/e2e" tests="214" disabled="0" skipped="208" errors="0" failures="2" time="601.738761833" timestamp="2025-10-09T16:09:50">
          <properties>
              <property name="SuiteSucceeded" value="false"></property>
              <property name="SuiteHasProgrammaticFocus" value="false"></property>
              <property name="SpecialSuiteFailureReason" value="Suite Timeout Elapsed"></property>
              <property name="SuiteLabels" value="[]"></property>
              <property name="RandomSeed" value="1760015377"></property>
              <property name="RandomizeAllSpecs" value="false"></property>
              <property name="LabelFilter" value=""></property>
              <property name="FocusStrings" value=""></property>
              <property name="SkipStrings" value=""></property>
              <property name="FocusFiles" value=""></property>
              <property name="SkipFiles" value=""></property>
              <property name="FailOnPending" value="false"></property>
              <property name="FailOnEmpty" value="false"></property>
              <property name="FailFast" value="false"></property>
              <property name="FlakeAttempts" value="0"></property>
              <property name="DryRun" value="false"></property>
              <property name="ParallelTotal" value="1"></property>
              <property name="OutputInterceptorMode" value=""></property>
          </properties>
          <testcase name="[SynchronizedBeforeSuite]" classname="Tests" status="passed" time="4.801870542">
              <system-err>&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 16:09:50.255&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 16:09:55.057 (4.802s)&#xA;&gt; Enter [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 16:09:55.057&#xA;&lt; Exit [SynchronizedBeforeSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:137 @ 10/09/25 16:09:55.057 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When resources are applied result should be succeeded" classname="Tests" status="passed" time="5.279668709">
              <system-err>&gt; Enter [BeforeAll] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:42 @ 10/09/25 16:09:55.063&#xA;&lt; Exit [BeforeAll] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:42 @ 10/09/25 16:09:57.031 (1.968s)&#xA;&gt; Enter [BeforeEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:51 @ 10/09/25 16:09:57.031&#xA;&lt; Exit [BeforeEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:51 @ 10/09/25 16:09:57.031 (0s)&#xA;&gt; Enter [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:64 @ 10/09/25 16:09:57.031&#xA;&lt; Exit [It] result should be succeeded - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:64 @ 10/09/25 16:10:00.342 (3.311s)&#xA;&gt; Enter [AfterEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:57 @ 10/09/25 16:10:00.342&#xA;&lt; Exit [AfterEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:57 @ 10/09/25 16:10:00.342 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual images are applied checks VIs phases" classname="Tests" status="passed" time="7.94090225">
              <system-err>&gt; Enter [BeforeEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:51 @ 10/09/25 16:10:00.343&#xA;&lt; Exit [BeforeEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:51 @ 10/09/25 16:10:00.343 (0s)&#xA;&gt; Enter [It] checks VIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:74 @ 10/09/25 16:10:00.343&#xA;STEP: VIs should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:75 @ 10/09/25 16:10:00.343&#xA;&lt; Exit [It] checks VIs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:74 @ 10/09/25 16:10:08.283 (7.941s)&#xA;&gt; Enter [AfterEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:57 @ 10/09/25 16:10:08.283&#xA;&lt; Exit [AfterEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:57 @ 10/09/25 16:10:08.284 (0s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual disks are applied checks VDs phases" classname="Tests" status="timedout" time="579.593453708">
              <failure message="A suite timeout occurred" type="timedout">[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85 @ 10/09/25 16:19:43.188&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  VirtualMachineLabelAndAnnotation When virtual disks are applied checks VDs phases (Spec Runtime: 9m34.864s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85&#xA;    In [It] (Node Runtime: 9m34.863s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85&#xA;      At [By Step] VDs should be in Ready phases (Step Runtime: 9m34.863s)&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:86&#xA;&#xA;      Spec Goroutine&#xA;      goroutine 148 [sync.WaitGroup.Wait, 9 minutes]&#xA;        sync.runtime_SemacquireWaitGroup(0x1046fcb30?, 0x60?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:114&#xA;        sync.(*WaitGroup).Wait(0x1400026ebe0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/waitgroup.go:206&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources({0x140005a0ff0, 0x1, 0x10616ce70?}, {0x105e868ae, 0x28}, {{0x0, 0x0, 0x0}, 0x1400065f260, {0x14000164360, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:349&#xA;            | &#x9;&#x9;}()&#xA;            | &#x9;}&#xA;            &gt; &#x9;wg.Wait()&#xA;            | &#x9;Expect(waitErr).To(BeEmpty())&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitByLabel({0x105e868ae, 0x28}, {{0x0, 0x0, 0x0}, 0x1400065f260, {0x14000164360, 0x2c}, {0x1400064dd60, 0x20}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:308&#xA;            | &#x9;&#x9;resources = strings.Split(res.StdOut(), &#34; &#34;)&#xA;            | &#x9;}&#xA;            &gt; &#x9;WaitResources(resources, resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitPhaseByLabel({0x105e868ae, 0x28}, {0x105e45865, 0x5}, {{0x0, 0x0, 0x0}, 0x1400065f260, {0x14000164360, 0x2c}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:290&#xA;            | &#x9;GinkgoHelper()&#xA;            | &#x9;opts.For = fmt.Sprintf(&#34;&#39;jsonpath={.status.phase}=%s&#39;&#34;, phase)&#xA;            &gt; &#x9;WaitByLabel(resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func18.6.1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:87&#xA;            | It(&#34;checks VDs phases&#34;, func() {&#xA;            | &#x9;By(fmt.Sprintf(&#34;VDs should be in %s phases&#34;, PhaseReady))&#xA;            &gt; &#x9;WaitPhaseByLabel(kc.ResourceVD, PhaseReady, kc.WaitOptions{&#xA;            | &#x9;&#x9;Labels:    testCaseLabel,&#xA;            | &#x9;&#x9;Namespace: ns,&#xA;        github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 5&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;      Goroutines of Interest&#xA;      goroutine 72 [sync.Cond.Wait, 9 minutes]&#xA;        sync.runtime_notifyListWait(0x140006e6048, 0x45)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;        sync.(*Cond).Wait(0x140006e6038)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;        golang.org/x/net/http2.(*pipe).Read(0x140006e6030, {0x140006f2000, 0x1000, 0x1000})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;        golang.org/x/net/http2.transportResponseBody.Read({0x14000444b10?}, {0x140006f2000?, 0x1062d9640?, 0x140009818c0?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;        bufio.(*Reader).fill(0x1400047b740)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;        bufio.(*Reader).ReadByte(0x1400047b740)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;        compress/flate.(*decompressor).moreBits(0x1400044f308)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;        compress/flate.(*decompressor).nextBlock(0x1400044f308)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;        compress/flate.(*decompressor).Read(0x1400044f308, {0x14000d1ab98, 0xed468, 0x104841c74?})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;        compress/gzip.(*Reader).Read(0x14000329088, {0x14000d1ab98, 0xed468, 0xed468})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;        golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000d1ab98?, 0x14000eac028?, 0x14000d1aa40?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;        bufio.(*Scanner).Scan(0x1400028dda0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x140008eb8c0, {0x1341d9600, 0x140008b6900}, {0x1067fd920, 0x14000077320})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;            | num := 0&#xA;            | &#xA;            &gt; for scanner.Scan() {&#xA;            | &#x9;rawEntry := scanner.Bytes()&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;            | defer l.wg.Done()&#xA;            | &#xA;            &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;            | l.mu.Lock()&#xA;            | defer l.mu.Unlock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 41&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;            | &#xA;            | l.wg.Add(1)&#xA;            &gt; go func() {&#xA;            | &#x9;defer l.wg.Done()&#xA;            | &#xA;&#xA;      goroutine 106 [sync.Cond.Wait, 9 minutes]&#xA;        sync.runtime_notifyListWait(0x14000423cc8, 0x13)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;        sync.(*Cond).Wait(0x14000423cb8)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;        golang.org/x/net/http2.(*pipe).Read(0x14000423cb0, {0x14000704000, 0x1000, 0x1000})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;        golang.org/x/net/http2.transportResponseBody.Read({0x14000444b10?}, {0x14000704000?, 0x1062d9640?, 0x14000910840?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;        bufio.(*Reader).fill(0x14000076360)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;        bufio.(*Reader).ReadByte(0x14000076360)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;        compress/flate.(*decompressor).moreBits(0x14000898608)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;        compress/flate.(*decompressor).nextBlock(0x14000898608)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;        compress/flate.(*decompressor).Read(0x14000898608, {0x14000c0d765, 0xfa89b, 0x104841c74?})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;        compress/gzip.(*Reader).Read(0x1400026c2c8, {0x14000c0d765, 0xfa89b, 0xfa89b})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;        golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000c0d765?, 0x140009126e8?, 0x14000c0d4cf?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;        bufio.(*Scanner).Scan(0x14000991da0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x140008eb8c0, {0x1341d9600, 0x140003e1560}, {0x1067fd920, 0x14000077320})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;            | num := 0&#xA;            | &#xA;            &gt; for scanner.Scan() {&#xA;            | &#x9;rawEntry := scanner.Bytes()&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;            | defer l.wg.Done()&#xA;            | &#xA;            &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;            | l.mu.Lock()&#xA;            | defer l.mu.Unlock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 41&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;            | &#xA;            | l.wg.Add(1)&#xA;            &gt; go func() {&#xA;            | &#x9;defer l.wg.Done()&#xA;            | &#xA;&#xA;      goroutine 152 [syscall, 9 minutes]&#xA;        syscall.syscall6(0x10026ed20?, 0x134011580?, 0x108a553e8?, 0x90?, 0x14000808008?, 0x140008dc1b0?, 0x14000617a68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x14000617a98?, 0x10477e6fc?, 0x90?, 0x10676c660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x14000260bd0?, 0x14000617ad4, 0x1400026ed20?, 0x14000260b60?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x140000ef200)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x14000e51408?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000422300)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000422300)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002a3010?, 0x1068041e8?, 0x14000260930?}}, {0x106824808?, 0x14000260930?}, {0x14000e64000?, 0xc2320beb56221f58?}, {0x1067fd120, 0x140000eef80}, {0x1067fd120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002a3010?, 0x107d0b668?, 0x107ce1ee0?}}, {0x106824808, 0x14000260930}, {0x14000e64000, 0xcd})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x106828e48?, 0x1400012aba0?}, {0x105e48924?, 0x1400012c5a0?}}, {0x105e868ae, 0x28}, {0x14000184d20, 0x26}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 148&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;</failure>
              <system-err>&gt; Enter [BeforeEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:51 @ 10/09/25 16:10:08.284&#xA;&lt; Exit [BeforeEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:51 @ 10/09/25 16:10:08.284 (0s)&#xA;&gt; Enter [It] checks VDs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85 @ 10/09/25 16:10:08.284&#xA;STEP: VDs should be in Ready phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:86 @ 10/09/25 16:10:08.284&#xA;[TIMEDOUT] A suite timeout occurred&#xA;In [It] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85 @ 10/09/25 16:19:43.188&#xA;&#xA;This is the Progress Report generated when the suite timeout occurred:&#xA;  VirtualMachineLabelAndAnnotation When virtual disks are applied checks VDs phases (Spec Runtime: 9m34.864s)&#xA;    /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85&#xA;    In [It] (Node Runtime: 9m34.863s)&#xA;      /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85&#xA;      At [By Step] VDs should be in Ready phases (Step Runtime: 9m34.863s)&#xA;        /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:86&#xA;&#xA;      Spec Goroutine&#xA;      goroutine 148 [sync.WaitGroup.Wait, 9 minutes]&#xA;        sync.runtime_SemacquireWaitGroup(0x1046fcb30?, 0x60?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:114&#xA;        sync.(*WaitGroup).Wait(0x1400026ebe0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/waitgroup.go:206&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources({0x140005a0ff0, 0x1, 0x10616ce70?}, {0x105e868ae, 0x28}, {{0x0, 0x0, 0x0}, 0x1400065f260, {0x14000164360, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:349&#xA;            | &#x9;&#x9;}()&#xA;            | &#x9;}&#xA;            &gt; &#x9;wg.Wait()&#xA;            | &#x9;Expect(waitErr).To(BeEmpty())&#xA;            | }&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitByLabel({0x105e868ae, 0x28}, {{0x0, 0x0, 0x0}, 0x1400065f260, {0x14000164360, 0x2c}, {0x1400064dd60, 0x20}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:308&#xA;            | &#x9;&#x9;resources = strings.Split(res.StdOut(), &#34; &#34;)&#xA;            | &#x9;}&#xA;            &gt; &#x9;WaitResources(resources, resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitPhaseByLabel({0x105e868ae, 0x28}, {0x105e45865, 0x5}, {{0x0, 0x0, 0x0}, 0x1400065f260, {0x14000164360, 0x2c}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:290&#xA;            | &#x9;GinkgoHelper()&#xA;            | &#x9;opts.For = fmt.Sprintf(&#34;&#39;jsonpath={.status.phase}=%s&#39;&#34;, phase)&#xA;            &gt; &#x9;WaitByLabel(resource, opts)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.init.func18.6.1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:87&#xA;            | It(&#34;checks VDs phases&#34;, func() {&#xA;            | &#x9;By(fmt.Sprintf(&#34;VDs should be in %s phases&#34;, PhaseReady))&#xA;            &gt; &#x9;WaitPhaseByLabel(kc.ResourceVD, PhaseReady, kc.WaitOptions{&#xA;            | &#x9;&#x9;Labels:    testCaseLabel,&#xA;            | &#x9;&#x9;Namespace: ns,&#xA;        github.com/onsi/ginkgo/v2/internal.extractBodyFunction.func3({0x0?, 0x0?})&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/node.go:475&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode.func3()&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:894&#xA;        github.com/onsi/ginkgo/v2/internal.(*Suite).runNode in goroutine 5&#xA;          /Users/antont/go/pkg/mod/github.com/onsi/ginkgo/v2@v2.22.0/internal/suite.go:881&#xA;&#xA;      Goroutines of Interest&#xA;      goroutine 72 [sync.Cond.Wait, 9 minutes]&#xA;        sync.runtime_notifyListWait(0x140006e6048, 0x45)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;        sync.(*Cond).Wait(0x140006e6038)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;        golang.org/x/net/http2.(*pipe).Read(0x140006e6030, {0x140006f2000, 0x1000, 0x1000})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;        golang.org/x/net/http2.transportResponseBody.Read({0x14000444b10?}, {0x140006f2000?, 0x1062d9640?, 0x140009818c0?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;        bufio.(*Reader).fill(0x1400047b740)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;        bufio.(*Reader).ReadByte(0x1400047b740)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;        compress/flate.(*decompressor).moreBits(0x1400044f308)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;        compress/flate.(*decompressor).nextBlock(0x1400044f308)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;        compress/flate.(*decompressor).Read(0x1400044f308, {0x14000d1ab98, 0xed468, 0x104841c74?})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;        compress/gzip.(*Reader).Read(0x14000329088, {0x14000d1ab98, 0xed468, 0xed468})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;        golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000d1ab98?, 0x14000eac028?, 0x14000d1aa40?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;        bufio.(*Scanner).Scan(0x1400028dda0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x140008eb8c0, {0x1341d9600, 0x140008b6900}, {0x1067fd920, 0x14000077320})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;            | num := 0&#xA;            | &#xA;            &gt; for scanner.Scan() {&#xA;            | &#x9;rawEntry := scanner.Bytes()&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;            | defer l.wg.Done()&#xA;            | &#xA;            &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;            | l.mu.Lock()&#xA;            | defer l.mu.Unlock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 41&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;            | &#xA;            | l.wg.Add(1)&#xA;            &gt; go func() {&#xA;            | &#x9;defer l.wg.Done()&#xA;            | &#xA;&#xA;      goroutine 106 [sync.Cond.Wait, 9 minutes]&#xA;        sync.runtime_notifyListWait(0x14000423cc8, 0x13)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sema.go:606&#xA;        sync.(*Cond).Wait(0x14000423cb8)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/sync/cond.go:71&#xA;        golang.org/x/net/http2.(*pipe).Read(0x14000423cb0, {0x14000704000, 0x1000, 0x1000})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/pipe.go:76&#xA;        golang.org/x/net/http2.transportResponseBody.Read({0x14000444b10?}, {0x14000704000?, 0x1062d9640?, 0x14000910840?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:2560&#xA;        bufio.(*Reader).fill(0x14000076360)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:113&#xA;        bufio.(*Reader).ReadByte(0x14000076360)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/bufio.go:273&#xA;        compress/flate.(*decompressor).moreBits(0x14000898608)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:697&#xA;        compress/flate.(*decompressor).nextBlock(0x14000898608)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:304&#xA;        compress/flate.(*decompressor).Read(0x14000898608, {0x14000c0d765, 0xfa89b, 0x104841c74?})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/flate/inflate.go:348&#xA;        compress/gzip.(*Reader).Read(0x1400026c2c8, {0x14000c0d765, 0xfa89b, 0xfa89b})&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/compress/gzip/gunzip.go:252&#xA;        golang.org/x/net/http2.(*gzipReader).Read(0x0?, {0x14000c0d765?, 0x140009126e8?, 0x14000c0d4cf?})&#xA;          /Users/antont/go/pkg/mod/golang.org/x/net@v0.39.0/http2/transport.go:3151&#xA;        bufio.(*Scanner).Scan(0x14000991da0)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/bufio/scan.go:219&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/errlogger.(*LogStreamer).Stream(0x140008eb8c0, {0x1341d9600, 0x140003e1560}, {0x1067fd920, 0x14000077320})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/errlogger/errlogger.go:78&#xA;            | num := 0&#xA;            | &#xA;            &gt; for scanner.Scan() {&#xA;            | &#x9;rawEntry := scanner.Bytes()&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:248&#xA;            | defer l.wg.Done()&#xA;            | &#xA;            &gt; n, err := logStreamer.Stream(readCloser, GinkgoWriter)&#xA;            | l.mu.Lock()&#xA;            | defer l.mu.Unlock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.(*logStreamer).Start in goroutine 41&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:245&#xA;            | &#xA;            | l.wg.Add(1)&#xA;            &gt; go func() {&#xA;            | &#x9;defer l.wg.Done()&#xA;            | &#xA;&#xA;      goroutine 152 [syscall, 9 minutes]&#xA;        syscall.syscall6(0x10026ed20?, 0x134011580?, 0x108a553e8?, 0x90?, 0x14000808008?, 0x140008dc1b0?, 0x14000617a68?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/runtime/sys_darwin.go:60&#xA;        syscall.wait4(0x14000617a98?, 0x10477e6fc?, 0x90?, 0x10676c660?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/zsyscall_darwin_arm64.go:44&#xA;        syscall.Wait4(0x14000260bd0?, 0x14000617ad4, 0x1400026ed20?, 0x14000260b60?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/syscall/syscall_bsd.go:144&#xA;        os.(*Process).pidWait.func1(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:64&#xA;        os.ignoringEINTR2[...](...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/file_posix.go:266&#xA;        os.(*Process).pidWait(0x140000ef200)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:63&#xA;        os.(*Process).wait(0x14000e51408?)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec_unix.go:28&#xA;        os.(*Process).Wait(...)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec.go:340&#xA;        os/exec.(*Cmd).Wait(0x14000422300)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:922&#xA;        os/exec.(*Cmd).Run(0x14000422300)&#xA;          /opt/homebrew/Cellar/go/1.25.1/libexec/src/os/exec/exec.go:626&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecuteContext({{0x140002a3010?, 0x1068041e8?, 0x14000260930?}}, {0x106824808?, 0x14000260930?}, {0x14000e64000?, 0xc2320beb56221f58?}, {0x1067fd120, 0x140000eef80}, {0x1067fd120, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:76&#xA;            | &#x9;cmd.Stderr = stderr&#xA;            | &#x9;cmd.Stdout = stdout&#xA;            &gt; &#x9;return cmd.Run()&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/executor.CMDExecutor.ExecContext({{0x140002a3010?, 0x107d0b668?, 0x107ce1ee0?}}, {0x106824808, 0x14000260930}, {0x14000e64000, 0xcd})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/executor/executor.go:49&#xA;            | stdout := new(Buffer)&#xA;            | stderr := new(Buffer)&#xA;            &gt; err := e.ExecuteContext(ctx, command, stdout, stderr)&#xA;            | cmdResult := &amp;CMDResult{&#xA;            | &#x9;stdOut:  stdout,&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e/kubectl.KubectlCMD.WaitResource({{0x106828e48?, 0x1400012aba0?}, {0x105e48924?, 0x1400012c5a0?}}, {0x105e868ae, 0x28}, {0x14000184d20, 0x26}, {{0x0, 0x0, ...}, ...})&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/kubectl/kubectl.go:259&#xA;            | &#x9;ctx, cancel := context.WithTimeout(context.Background(), timeout)&#xA;            | &#x9;defer cancel()&#xA;            &gt; &#x9;return k.ExecContext(ctx, cmd)&#xA;            | }&#xA;            | &#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources.func1()&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:341&#xA;            | go func() {&#xA;            | &#x9;defer wg.Done()&#xA;            &gt; &#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;            | &#x9;if res.Error() != nil {&#xA;            | &#x9;&#x9;mu.Lock()&#xA;      &gt; github.com/deckhouse/virtualization/tests/e2e.WaitResources in goroutine 148&#xA;          /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/util_test.go:339&#xA;            | for _, name := range resources {&#xA;            | &#x9;wg.Add(1)&#xA;            &gt; &#x9;go func() {&#xA;            | &#x9;&#x9;defer wg.Done()&#xA;            | &#x9;&#x9;res := kubectl.WaitResource(resource, name, waitOpts)&#xA;&lt; Exit [It] checks VDs phases - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:85 @ 10/09/25 16:19:43.194 (9m34.869s)&#xA;&gt; Enter [AfterEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:57 @ 10/09/25 16:19:43.194&#xA;&lt; Exit [AfterEach] VirtualMachineLabelAndAnnotation - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/vm_label_annotation_test.go:57 @ 10/09/25 16:19:47.918 (4.724s)&#xA;</system-err>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running marks VMs with label map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs labeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running removes label map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When virtual machine is running checks VMs and pods labels after VMs unlabeling" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase marks VMs with annotation map[&#34;specialKey&#34;:&#34;specialValue&#34;]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs annotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase removes annotation map[specialKey:specialValue] from VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation Annotate `VirtualMachines` in Running phase checks VMs and pods annotations after VMs unannotating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineLabelAndAnnotation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual images are applied checks `VirtualImages` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual disks are applied checks `VirtualDisks` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied checks `VirtualMachine` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine are applied retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When the virtual machine block device attachment is applied checks `VirtualMachineBlockDeviceAttachment` phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains the disks metadata before resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready resizes the disks" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready checks `VirtualDisks`, `VirtualMachine` and `VirtualMachineBlockDeviceAttachment` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing Resizing When the virtual machine is ready obtains and compares the disks metadata after resizing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskResizing When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual images are applied: checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machine block device attachments are applied: checks VMBDAs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: creates VDs snapshots with `requiredConsistency`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When unattached VDs in phase Ready: checks snapshots of unattached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates snapshots with `requiredConsistency` of attached VDs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase creates `vdSnapshots` concurrently" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks snapshots" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When virtual machines in Running phase checks `FileSystemFrozen` status of VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskSnapshots When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VD phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When base virtual resources are ready checks VDSnapshot phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When virtual images are applied checks CVIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualImageCreation When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the virtualization resources are applied checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the test objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use retrieves the disk count before the images attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use attaches the images into the `VirtualMachine`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks the `VirtualMachine` and the `VirtualMachineBlockDeviceAttachments` phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use checks that the `ISO` image is attached as `CD-ROM`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use check that the images are attached as the `ReadOnly` devices" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use detaches the images" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When the resources are ready to use compares the disk count after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImageHotplug When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only root disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one local additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when root disk changed storage class and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be reverted when only additional disk changed storage class [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration when storage class changed should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use restore the `VirtualMachines` with `Safe` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreSafe When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual disks are applied should be in Ready phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When virtual machines are applied should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Manual restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is in Running phase changes the number of processor cores" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is patched checks the number of processor cores in specification" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine is restarted should be ready" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 Automatic restart approval mode 1 When virtual machine agents are ready checks that the number of processor cores was changed" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConfiguration 1 When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual disks are applied: checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are applied: checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has qemu version in the status" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When virtual machines are ready: has libvirt version in the status" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineVersions When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When virtual machine agents are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineMigration When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineEvacuation Evacuation [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual disks are applied checks VDs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:not-existing-vmclass-with-changing] and map[vm:not-existing-vmclass-with-creating] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines are applied checks VMs phases with map[vm:existing-vmclass] label" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks condition status before changing &#39;virtulaMachineCLass` field with existing class" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending changes VMClassName in VM specification with existing VMClass" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-changing] in phase Pending checks VM phase and condition status after changing" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks condition status before creating `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending changes VMClassName in VM specification with not existing VMClass which have correct prefix for creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending creates new `VirtualMachineClass`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy Not existing virtual machine class When virtual machine with label map[vm:not-existing-vmclass-with-creating] in phase Pending checks VM phase and condition after creating" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When virtual machines in phase Running checks sizing policy match" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] SizingPolicy When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready get disk count before attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready attaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready checks VM and VMBDA phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Attachment When virtual machine agents are ready compares disk count before and after attachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases get disk count before detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases detaches virtual disk" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases checks VM phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment Detachment When virtual machines are in Running phases compares disk count before and after detachment" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualDiskAttachment When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project creates project" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy Project checks project readiness" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual images are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual disks are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ImporterNetworkPolicy When resources are applied When virtual machines are applied" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied result should be succeeded [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtualization resources are applied should fill empty virtualMachineClassName with the default class name [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual images are applied checks VIs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When cluster virtual images are applied checks CVIs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine classes are applied checks VMClasses phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied patches custom VMIP with unassigned address [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines IP addresses are applied checks VMIPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual disks are applied checks VDs phases with no consumers [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machines are applied checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When virtual machine block device attachments are applied checks VMBDAs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest External connection When Virtual machine agents are ready checks VMs external connectivity [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs stops VMs by VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs checks VMOPs and VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by VMOPs cleanup AlwaysOn VM VMOPs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting starts VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are starting checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh stops VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh start not AlwaysOn VMs [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are stopping by ssh checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP reboot VMs by VMOP [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by VMOP checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting by ssh reboot VMs by ssh [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods reboots the VMs by deleting their pods [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Power state checks Verify that the virtual machines are restarting after deleting their pods checks VMs external connection after reboot [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When Virtual machine agents are ready starts migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs and VMOPs phases [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest Migrations When VMs migrations are applied checks VMs external connection after migrations [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] ComplexTest When test is completed deletes test case resources [Serial]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When resources are applied result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual images are applied checks VIs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual disks are applied checks VDs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machines are applied checks VMs phases" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When run curl-helper status should be in Running phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets VMs and SVCs objects" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check ssh connection via `d8 v` to VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks VMs connection to external network" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready check nginx status via `d8 v` on VMs" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes selector in service head-45bdb83d-vm-connectivity-a with selector from service head-45bdb83d-vm-connectivity-b" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready gets page from service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready changes back selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When virtual machine agents are ready checks selector in service head-45bdb83d-vm-connectivity-a" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineConnectivity When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: result should be succeeded" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtualization resources are applied: checks the resources phase" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machines agents are ready checks the `status.nodeName` field of the `VirtualMachines`" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-selector` agent is ready sets the `spec.nodeSelector` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When the virtual machine `node-affinity` agent is ready sets the `spec.affinity.nodeAffinity` field" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAffinityAndToleration When test is completed deletes test case resources" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineCancelMigration Cancel migrate [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Auto Creates vmip with type Auto" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] IPAM vmip with type Static Creates vmip with type Static" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When resources are applied result should be succeeded [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks VMs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machines are applied checks network availability [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When virtual machine agents and network are ready starts migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs and VMOPs phases [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks VMs external connection after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When VMs migrations are applied checks network availability after migrations [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineAdditionalNetworkInterfaces When test is completed deletes test case resources [SIG-Migration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only root disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when root disk on local storage and one additional disk [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted when only additional disk on local storage [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be successful two migrations in a row [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted first and completed second [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine deleting [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be reverted because virtual machine stopped when virtual machine stopped from OS [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks Migrate to not matched node should reverted because migration canceled when pod pending [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] [sig-storage] Volume migration with local disks should be failed with RWO VMBDA [SIG-Storage]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied result should be succeeded [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied checks the resources phase [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the virtualization resources are applied add additional interface to virtual machines [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use restore the `VirtualMachines` with `forced` mode [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When the resources are ready to use check the .status.networks of each VM after restore [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[It] VirtualMachineRestoreForce When test is completed deletes test case resources [SIG-Restoration]" classname="Tests" status="skipped" time="0">
              <skipped message="skipped"></skipped>
          </testcase>
          <testcase name="[SynchronizedAfterSuite]" classname="Tests" status="failed" time="0.252044084">
              <failure message="Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x1400040b398&gt;: &#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-789fdbbc5d-ks2cn&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.errorString | 0x1400078ccc0&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-789fdbbc5d-ks2cn&#34;,&#xA;            },&#xA;        ],&#xA;    }" type="failed">[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x1400040b398&gt;: &#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-789fdbbc5d-ks2cn&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.errorString | 0x1400078ccc0&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-789fdbbc5d-ks2cn&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 16:19:48.173&#xA;</failure>
              <system-err>&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 16:19:47.921&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 16:19:47.921 (0s)&#xA;&gt; Enter [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 16:19:47.921&#xA;[FAILED] Expected success, but got an error:&#xA;    &lt;*errors.joinError | 0x1400040b398&gt;: &#xA;    the container &#34;virtualization-controller&#34; was not found: virtualization-controller-789fdbbc5d-ks2cn&#xA;    {&#xA;        errs: [&#xA;            &lt;*errors.errorString | 0x1400078ccc0&gt;{&#xA;                s: &#34;the container \&#34;virtualization-controller\&#34; was not found: virtualization-controller-789fdbbc5d-ks2cn&#34;,&#xA;            },&#xA;        ],&#xA;    }&#xA;In [SynchronizedAfterSuite] at: /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:183 @ 10/09/25 16:19:48.173&#xA;&lt; Exit [SynchronizedAfterSuite] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:182 @ 10/09/25 16:19:48.173 (252ms)&#xA;</system-err>
          </testcase>
          <testcase name="[DeferCleanup (Suite)]" classname="Tests" status="passed" time="3.859081209">
              <system-err>&gt; Enter [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 16:19:48.174&#xA;&lt; Exit [DeferCleanup (Suite)] TOP-LEVEL - /Users/antont/ansible_deckhouse/virtualization-full/tests/e2e/e2e_test.go:175 @ 10/09/25 16:19:52.033 (3.859s)&#xA;</system-err>
          </testcase>
      </testsuite>
  </testsuites>