apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: virtualmachineimages.virtualization.deckhouse.io
  labels:
    heritage: deckhouse
    module: virtualization
spec:
  group: virtualization.deckhouse.io
  scope: Namespaced
  names:
    plural: virtualmachineimages
    singular: virtualmachineimage
    kind: VirtualMachineImage
  preserveUnknownFields: false
  versions:
    - name: v2alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          description: |
            Describes a virtual machine disk image which could be used as data source for new `VirtualMachineDisks` or could be mounted to `VirtualMachines` as is. This resource is immutable, once created, cannot be modified.

            A container image is created under the hood of this resource, which is stored in a dedicated deckhouse virtualization container registy (DVCR) or PVC, into which the data from the source is filled.
          required:
            - spec
          properties:
            spec:
              type: object
              required:
                - storage
                - dataSource
              properties:
                storage:
                  type: string
                  enum: ['Kubernetes', 'ContainerRegistry']
                  description: |
                    Storage type to store the image for current virtualization setup.

                    * `Kubernetes` — use a PersistentVolumeClaim in current k8s cluster. In this case, image will be downloaded and copied to a PV as is.
                    * `ContainerRegistry` — use a dedicated deckhouse virtualization container registry (DVCR). In this case, images will be downloaded and injected to a container, then pushed to a DVCR (shipped with the virtualization module).
                persistentVolumeClaim:
                  type: object
                  description: Settings for creating PVCs to store the image.
                  properties:
                    storageClassName:
                      type: string
                      description: |
                        The name of the StorageClass required by the claim. More info — https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                dataSource:
                  type: object
                  description: An origin of the image.
                  required:
                  - type
                  properties:
                    type:
                      type: string
                      enum:
                      - 'HTTP'
                      - 'ContainerImage'
                      - 'VirtualMachineImage'
                      - 'ClusterVirtualMachineImage'
                      - 'VirtualMachineDisk'
                      - 'VirtualMachineDiskSnapshot'
                      - 'PersistentVolumeClaim'
                      - 'Upload'
                      description: |
                        The type of an origin of the image. Options are:

                        * `HTTP` — fill the image with data from some external http/https url.
                        * `ContainerImage` — use an image, stored in container registry image.
                        * `VirtualMachineImage` — use another existing `VirtualMachineImage`.
                        * `ClusterVirtualMachineImage` — use another existing `ClusterVirtualMachineImage`.
                        * `VirtualMachineDisk` — use an existing `VirtualMachineDisk`.
                        * `PersistentVolumeClaim` — use an existing `PersistentVolumeClaim`.
                        * `Upload` — fill the image with data, uploaded by user via the special interface.
                    http:
                      type: object
                      description: |
                        Fill the image with data from some external url. Supported schemas are:

                        * http
                        * https

                        For https schema there is an option to skip TLS verification.
                      required:
                      - url
                      properties:
                        url:
                          type: string
                          example: 'https://mirror.example.com/images/slackware-15.qcow.gz'
                          # https://regex101.com/r/2zx8as/1
                          pattern: ^http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$
                          description: |
                            The http url with an image. The following formats are supported:
                            * qcow2
                            * vmdk
                            * vdi
                            * vhd
                            * vhdx
                            * iso
                            * raw
                            these formats can also be compressed with the following formats:
                            * gz
                            * xz
                        caBundle:
                          type: string
                          description: The CA chain in base64 format to verify the url.
                          example: |
                            YWFhCg==
                        insecureSkipVerify:
                          type: boolean
                          default: false
                          description: |
                            If a CA chain isn't provided, this option can be used to turn off TLS certificate checks.
                            As noted, it is insecure and shouldn't be used in production environments.
                        checksum:
                          type: object
                          description: |
                            A checksum of the file, provided by the url, to verify if it was downloaded correctly or wasn't changed. The file should match all specified checksums.
                          properties:
                            md5:
                              type: string
                              pattern: ^[0-9a-fA-F]{32}$
                              minLength: 32
                              maxLength: 32
                              example: f3b59bed9f91e32fac1210184fcff6f5
                            sha256:
                              type: string
                              pattern: ^[0-9a-fA-F]{64}$
                              minLength: 64
                              maxLength: 64
                              example: 78be890d71dde316c412da2ce8332ba47b9ce7a29d573801d2777e01aa20b9b5
                    containerImage:
                      type: object
                      required:
                      - image
                      description: |
                        Use an image stored in external container regitry. Use an image stored in external container registry. Only TLS enabled registries are supported. Use caBundle field to provide custom CA chain if needed.
                      properties:
                        image:
                          type: string
                          example: 'registry.example.com/images/slackware:15'
                          # https://regex101.com/r/nmSDPA/1
                          pattern: |
                            ^
                            (?P<name>
                              (?:(?P<domain>(?:(?:localhost|[\w-]+(?:\.[\w-]+)+)(?::\d+)?)|[\w]+:\d+)/)?
                              (?P<image>[a-z0-9_.-]+(?:/[a-z0-9_.-]+)*)
                            )
                            (?::(?P<tag>[\w][\w.-]{0,127}))?
                            (?:@(?P<digest>[A-Za-z][A-Za-z0-9]*(?:[+.-_][A-Za-z][A-Za-z0-9]*)*:[0-9a-fA-F]{32,}))?
                            $
                          description: The container registry address of an image.
                        imagePullSecret:
                          type: object
                          properties:
                            name:
                              type: string
                              description: A name of the secret containing registry credentials which must be located in the same namespace.
                        caBundle:
                          type: string
                          description: The CA chain in base64 format to verify the container registry.
                          example: |
                            YWFhCg==
                    virtualMachineImage:
                      type: object
                      description: Use another existing `VirtualMachineImage`.
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: A name of existing `VirtualMachineImage`.
                    clusterVirtualMachineImage:
                      type: object
                      description: Use another existing `ClusterVirtualMachineImage`.
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: A name of existing `ClusterVirtualMachineImage`.
                    virtualMachineDisk:
                      type: object
                      description: Use another existing `VirtualMachineDisk`.
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: A name of existing `VirtualMachineDisk`.
                    virtualMachineDiskSnapshot:
                      type: object
                      description: Use another existing `VirtualMachineDiskSnapshot`.
                      required:
                        - name
                        - namespace
                      properties:
                        name:
                          type: string
                          description: A name of existing `virtualMachineDiskSnapshot`.
                        namespace:
                          type: string
                          description: A namespace where `virtualMachineDiskSnapshot` is located.
                    persistentVolumeClaim:
                      type: object
                      description: Use another existing `PersistentVolumeClaim`.
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: A name of existing `PersistentVolumeClaim`.
                  oneOf:
                  - properties:
                      type:
                        enum: ['HTTP']
                      http: {}
                    required: ['http']
                  - properties:
                      type:
                        enum: ['ContainerImage']
                      containerImage: {}
                    required: ['containerImage']
                  - properties:
                      type:
                        enum: ['VirtualMachineImage']
                      virtualMachineImage: {}
                    required: ['virtualMachineImage']
                  - properties:
                      type:
                        enum: ['ClusterVirtualMachineImage']
                      clusterVirtualMachineImage: {}
                    required: ['clusterVirtualMachineImage']
                  - properties:
                      type:
                        enum: ['VirtualMachineDisk']
                      virtualMachineDisk: {}
                    required: ['virtualMachineDisk']
                  - properties:
                      type:
                        enum: ['VirtualMachineDiskSnapshot']
                      virtualMachineDiskSnapshot: {}
                    required: ['virtualMachineDiskSnapshot']
                  - properties:
                      type:
                        enum: ['PersistentVolumeClaim']
                      persistentVolumeClaim: {}
                    required: ['persistentVolumeClaim']
                  - properties:
                      type:
                        enum: ['Upload']
              oneOf:
              - properties:
                  storage:
                    enum: ['Kubernetes']
                  persistentVolumeClaim: {}
                required: ['persistentVolumeClaim']
              - properties:
                  storage:
                    enum: ['ContainerRegistry']
            status:
              type: object
              properties:
                importDuration:
                  type: string
                  example: 1m44s
                  description: |
                    The duration of the image import (from the moment of creation resource, to the moment of going to the Ready phase).
                downloadSpeed:
                  type: object
                  description: |
                    Image download speed from an external source. Appears only during the `Provisioning' phase.
                  properties:
                    avg:
                      type: string
                      example: 1 Mbps
                      description: Average download speed.
                    current:
                      type: string
                      example: 5 Mbps
                      description: Current download speed.
                size:
                  type: object
                  description: |
                    Discovered sizes of the image.
                  properties:
                    stored:
                      type: string
                      example: 199M
                      description: Image size in DVCR or in PVC in human-readable format.
                    unpacked:
                      type: string
                      example: 1G
                      description: Unpacked image size in human-readable format.
                cdrom:
                  type: boolean
                  description: |
                    Whether the image is a format that is supposed to be mounted as a cdrom, such as iso and so on.
                target:
                  type: object
                  properties:
                    registryURL:
                      type: string
                      example: dvcr.svc.<dvcr-namespace>/cvmi/<image-name>:latest
                      description: |
                        Created image in DVCR.
                    persistentVolumeClaimName:
                      type: string
                      example: some-pvc-name
                      description: |
                        Created PersistentVolumeClaim name for Kubernetes storage.
                phase:
                  type: string
                  description: |
                    Current status of `VirtualMachineImage` resource:
                    * Pending - The resource has been created and is on a waiting queue.
                    * Provisioning - The process of resource creation (copying/downloading/building the image/filling the PVC with data) is in progress.
                    * WaitForUserUpload - Waiting for the user to upload the image. The endpoint to upload the image is specified in `.status.uploadCommand`.
                    * Ready - The resource is created and ready to use.
                    * Failed - There was a problem when creating a resource, details can be seen in `.status.failureReason` and `.status.failureMessage`.
                    * NotReady - It is not possible to get information about the child image because of inability to connect to DVCR. The resource cannot be used.
                    * ImageLost - The child image of the resource is missing. The resource cannot be used.
                    * PVCLost - The child PVC of the resource is missing. The resource cannot be used.
                  enum: ['Pending', 'Provisioning', 'WaitForUserUpload', 'Ready', 'Failed', 'NotReady', 'ImageLost','PVCLost']
                progress:
                  type: string
                  description: |
                    Progress of copying an image from source to PVC.
                uploadCommand:
                  type: string
                  description: |
                    Command for uploading a image for the 'Upload' type.
                failureReason:
                  type: string
                  description: |
                    A brief description of the cause of the error.
                failureMessage:
                  type: string
                  description: |
                    Detailed description of the error.
      additionalPrinterColumns:
      - name: ImportDuration
        type: string
        jsonPath: .status.importDuration
        priority: 1
      - name: UnpackedSize
        type: string
        jsonPath: .status.size.unpacked
        priority: 1
      - name: StoredSize
        type: string
        jsonPath: .status.size.stored
        priority: 1
      - name: CDROM
        type: boolean
        jsonPath: .status.cdrom
      - name: Phase
        type: string
        jsonPath: .status.phase
      - name: Progress
        type: string
        jsonPath: .status.progress
      subresources:
        status: {}
