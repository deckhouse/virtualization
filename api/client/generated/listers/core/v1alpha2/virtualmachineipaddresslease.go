/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineIPAddressLeaseLister helps list VirtualMachineIPAddressLeases.
// All objects returned here must be treated as read-only.
type VirtualMachineIPAddressLeaseLister interface {
	// List lists all VirtualMachineIPAddressLeases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddressLease, err error)
	// VirtualMachineIPAddressLeases returns an object that can list and get VirtualMachineIPAddressLeases.
	VirtualMachineIPAddressLeases(namespace string) VirtualMachineIPAddressLeaseNamespaceLister
	VirtualMachineIPAddressLeaseListerExpansion
}

// virtualMachineIPAddressLeaseLister implements the VirtualMachineIPAddressLeaseLister interface.
type virtualMachineIPAddressLeaseLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineIPAddressLeaseLister returns a new VirtualMachineIPAddressLeaseLister.
func NewVirtualMachineIPAddressLeaseLister(indexer cache.Indexer) VirtualMachineIPAddressLeaseLister {
	return &virtualMachineIPAddressLeaseLister{indexer: indexer}
}

// List lists all VirtualMachineIPAddressLeases in the indexer.
func (s *virtualMachineIPAddressLeaseLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddressLease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineIPAddressLease))
	})
	return ret, err
}

// VirtualMachineIPAddressLeases returns an object that can list and get VirtualMachineIPAddressLeases.
func (s *virtualMachineIPAddressLeaseLister) VirtualMachineIPAddressLeases(namespace string) VirtualMachineIPAddressLeaseNamespaceLister {
	return virtualMachineIPAddressLeaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineIPAddressLeaseNamespaceLister helps list and get VirtualMachineIPAddressLeases.
// All objects returned here must be treated as read-only.
type VirtualMachineIPAddressLeaseNamespaceLister interface {
	// List lists all VirtualMachineIPAddressLeases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddressLease, err error)
	// Get retrieves the VirtualMachineIPAddressLease from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualMachineIPAddressLease, error)
	VirtualMachineIPAddressLeaseNamespaceListerExpansion
}

// virtualMachineIPAddressLeaseNamespaceLister implements the VirtualMachineIPAddressLeaseNamespaceLister
// interface.
type virtualMachineIPAddressLeaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineIPAddressLeases in the indexer for a given namespace.
func (s virtualMachineIPAddressLeaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddressLease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineIPAddressLease))
	})
	return ret, err
}

// Get retrieves the VirtualMachineIPAddressLease from the indexer for a given namespace and name.
func (s virtualMachineIPAddressLeaseNamespaceLister) Get(name string) (*v1alpha2.VirtualMachineIPAddressLease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualmachineipaddresslease"), name)
	}
	return obj.(*v1alpha2.VirtualMachineIPAddressLease), nil
}
