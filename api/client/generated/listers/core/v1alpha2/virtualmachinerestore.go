/*
Copyright Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineRestoreLister helps list VirtualMachineRestores.
// All objects returned here must be treated as read-only.
type VirtualMachineRestoreLister interface {
	// List lists all VirtualMachineRestores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineRestore, err error)
	// VirtualMachineRestores returns an object that can list and get VirtualMachineRestores.
	VirtualMachineRestores(namespace string) VirtualMachineRestoreNamespaceLister
	VirtualMachineRestoreListerExpansion
}

// virtualMachineRestoreLister implements the VirtualMachineRestoreLister interface.
type virtualMachineRestoreLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineRestoreLister returns a new VirtualMachineRestoreLister.
func NewVirtualMachineRestoreLister(indexer cache.Indexer) VirtualMachineRestoreLister {
	return &virtualMachineRestoreLister{indexer: indexer}
}

// List lists all VirtualMachineRestores in the indexer.
func (s *virtualMachineRestoreLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineRestore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineRestore))
	})
	return ret, err
}

// VirtualMachineRestores returns an object that can list and get VirtualMachineRestores.
func (s *virtualMachineRestoreLister) VirtualMachineRestores(namespace string) VirtualMachineRestoreNamespaceLister {
	return virtualMachineRestoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineRestoreNamespaceLister helps list and get VirtualMachineRestores.
// All objects returned here must be treated as read-only.
type VirtualMachineRestoreNamespaceLister interface {
	// List lists all VirtualMachineRestores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineRestore, err error)
	// Get retrieves the VirtualMachineRestore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualMachineRestore, error)
	VirtualMachineRestoreNamespaceListerExpansion
}

// virtualMachineRestoreNamespaceLister implements the VirtualMachineRestoreNamespaceLister
// interface.
type virtualMachineRestoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineRestores in the indexer for a given namespace.
func (s virtualMachineRestoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineRestore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineRestore))
	})
	return ret, err
}

// Get retrieves the VirtualMachineRestore from the indexer for a given namespace and name.
func (s virtualMachineRestoreNamespaceLister) Get(name string) (*v1alpha2.VirtualMachineRestore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualmachinerestore"), name)
	}
	return obj.(*v1alpha2.VirtualMachineRestore), nil
}
