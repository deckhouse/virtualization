/*
Copyright Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineIPAddressLister helps list VirtualMachineIPAddresses.
// All objects returned here must be treated as read-only.
type VirtualMachineIPAddressLister interface {
	// List lists all VirtualMachineIPAddresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddress, err error)
	// VirtualMachineIPAddresses returns an object that can list and get VirtualMachineIPAddresses.
	VirtualMachineIPAddresses(namespace string) VirtualMachineIPAddressNamespaceLister
	VirtualMachineIPAddressListerExpansion
}

// virtualMachineIPAddressLister implements the VirtualMachineIPAddressLister interface.
type virtualMachineIPAddressLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineIPAddressLister returns a new VirtualMachineIPAddressLister.
func NewVirtualMachineIPAddressLister(indexer cache.Indexer) VirtualMachineIPAddressLister {
	return &virtualMachineIPAddressLister{indexer: indexer}
}

// List lists all VirtualMachineIPAddresses in the indexer.
func (s *virtualMachineIPAddressLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineIPAddress))
	})
	return ret, err
}

// VirtualMachineIPAddresses returns an object that can list and get VirtualMachineIPAddresses.
func (s *virtualMachineIPAddressLister) VirtualMachineIPAddresses(namespace string) VirtualMachineIPAddressNamespaceLister {
	return virtualMachineIPAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineIPAddressNamespaceLister helps list and get VirtualMachineIPAddresses.
// All objects returned here must be treated as read-only.
type VirtualMachineIPAddressNamespaceLister interface {
	// List lists all VirtualMachineIPAddresses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddress, err error)
	// Get retrieves the VirtualMachineIPAddress from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualMachineIPAddress, error)
	VirtualMachineIPAddressNamespaceListerExpansion
}

// virtualMachineIPAddressNamespaceLister implements the VirtualMachineIPAddressNamespaceLister
// interface.
type virtualMachineIPAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineIPAddresses in the indexer for a given namespace.
func (s virtualMachineIPAddressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineIPAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineIPAddress))
	})
	return ret, err
}

// Get retrieves the VirtualMachineIPAddress from the indexer for a given namespace and name.
func (s virtualMachineIPAddressNamespaceLister) Get(name string) (*v1alpha2.VirtualMachineIPAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualmachineipaddress"), name)
	}
	return obj.(*v1alpha2.VirtualMachineIPAddress), nil
}
