/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualDiskSnapshotLister helps list VirtualDiskSnapshots.
// All objects returned here must be treated as read-only.
type VirtualDiskSnapshotLister interface {
	// List lists all VirtualDiskSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualDiskSnapshot, err error)
	// VirtualDiskSnapshots returns an object that can list and get VirtualDiskSnapshots.
	VirtualDiskSnapshots(namespace string) VirtualDiskSnapshotNamespaceLister
	VirtualDiskSnapshotListerExpansion
}

// virtualDiskSnapshotLister implements the VirtualDiskSnapshotLister interface.
type virtualDiskSnapshotLister struct {
	indexer cache.Indexer
}

// NewVirtualDiskSnapshotLister returns a new VirtualDiskSnapshotLister.
func NewVirtualDiskSnapshotLister(indexer cache.Indexer) VirtualDiskSnapshotLister {
	return &virtualDiskSnapshotLister{indexer: indexer}
}

// List lists all VirtualDiskSnapshots in the indexer.
func (s *virtualDiskSnapshotLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualDiskSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualDiskSnapshot))
	})
	return ret, err
}

// VirtualDiskSnapshots returns an object that can list and get VirtualDiskSnapshots.
func (s *virtualDiskSnapshotLister) VirtualDiskSnapshots(namespace string) VirtualDiskSnapshotNamespaceLister {
	return virtualDiskSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualDiskSnapshotNamespaceLister helps list and get VirtualDiskSnapshots.
// All objects returned here must be treated as read-only.
type VirtualDiskSnapshotNamespaceLister interface {
	// List lists all VirtualDiskSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualDiskSnapshot, err error)
	// Get retrieves the VirtualDiskSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualDiskSnapshot, error)
	VirtualDiskSnapshotNamespaceListerExpansion
}

// virtualDiskSnapshotNamespaceLister implements the VirtualDiskSnapshotNamespaceLister
// interface.
type virtualDiskSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualDiskSnapshots in the indexer for a given namespace.
func (s virtualDiskSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualDiskSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualDiskSnapshot))
	})
	return ret, err
}

// Get retrieves the VirtualDiskSnapshot from the indexer for a given namespace and name.
func (s virtualDiskSnapshotNamespaceLister) Get(name string) (*v1alpha2.VirtualDiskSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualdisksnapshot"), name)
	}
	return obj.(*v1alpha2.VirtualDiskSnapshot), nil
}
