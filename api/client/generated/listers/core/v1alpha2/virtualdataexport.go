/*
Copyright Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualDataExportLister helps list VirtualDataExports.
// All objects returned here must be treated as read-only.
type VirtualDataExportLister interface {
	// List lists all VirtualDataExports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualDataExport, err error)
	// VirtualDataExports returns an object that can list and get VirtualDataExports.
	VirtualDataExports(namespace string) VirtualDataExportNamespaceLister
	VirtualDataExportListerExpansion
}

// virtualDataExportLister implements the VirtualDataExportLister interface.
type virtualDataExportLister struct {
	indexer cache.Indexer
}

// NewVirtualDataExportLister returns a new VirtualDataExportLister.
func NewVirtualDataExportLister(indexer cache.Indexer) VirtualDataExportLister {
	return &virtualDataExportLister{indexer: indexer}
}

// List lists all VirtualDataExports in the indexer.
func (s *virtualDataExportLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualDataExport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualDataExport))
	})
	return ret, err
}

// VirtualDataExports returns an object that can list and get VirtualDataExports.
func (s *virtualDataExportLister) VirtualDataExports(namespace string) VirtualDataExportNamespaceLister {
	return virtualDataExportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualDataExportNamespaceLister helps list and get VirtualDataExports.
// All objects returned here must be treated as read-only.
type VirtualDataExportNamespaceLister interface {
	// List lists all VirtualDataExports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualDataExport, err error)
	// Get retrieves the VirtualDataExport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualDataExport, error)
	VirtualDataExportNamespaceListerExpansion
}

// virtualDataExportNamespaceLister implements the VirtualDataExportNamespaceLister
// interface.
type virtualDataExportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualDataExports in the indexer for a given namespace.
func (s virtualDataExportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualDataExport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualDataExport))
	})
	return ret, err
}

// Get retrieves the VirtualDataExport from the indexer for a given namespace and name.
func (s virtualDataExportNamespaceLister) Get(name string) (*v1alpha2.VirtualDataExport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualdataexport"), name)
	}
	return obj.(*v1alpha2.VirtualDataExport), nil
}
