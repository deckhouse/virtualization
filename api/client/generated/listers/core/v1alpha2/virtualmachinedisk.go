/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineDiskLister helps list VirtualMachineDisks.
// All objects returned here must be treated as read-only.
type VirtualMachineDiskLister interface {
	// List lists all VirtualMachineDisks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineDisk, err error)
	// VirtualMachineDisks returns an object that can list and get VirtualMachineDisks.
	VirtualMachineDisks(namespace string) VirtualMachineDiskNamespaceLister
	VirtualMachineDiskListerExpansion
}

// virtualMachineDiskLister implements the VirtualMachineDiskLister interface.
type virtualMachineDiskLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineDiskLister returns a new VirtualMachineDiskLister.
func NewVirtualMachineDiskLister(indexer cache.Indexer) VirtualMachineDiskLister {
	return &virtualMachineDiskLister{indexer: indexer}
}

// List lists all VirtualMachineDisks in the indexer.
func (s *virtualMachineDiskLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineDisk, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineDisk))
	})
	return ret, err
}

// VirtualMachineDisks returns an object that can list and get VirtualMachineDisks.
func (s *virtualMachineDiskLister) VirtualMachineDisks(namespace string) VirtualMachineDiskNamespaceLister {
	return virtualMachineDiskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineDiskNamespaceLister helps list and get VirtualMachineDisks.
// All objects returned here must be treated as read-only.
type VirtualMachineDiskNamespaceLister interface {
	// List lists all VirtualMachineDisks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineDisk, err error)
	// Get retrieves the VirtualMachineDisk from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualMachineDisk, error)
	VirtualMachineDiskNamespaceListerExpansion
}

// virtualMachineDiskNamespaceLister implements the VirtualMachineDiskNamespaceLister
// interface.
type virtualMachineDiskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineDisks in the indexer for a given namespace.
func (s virtualMachineDiskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineDisk, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineDisk))
	})
	return ret, err
}

// Get retrieves the VirtualMachineDisk from the indexer for a given namespace and name.
func (s virtualMachineDiskNamespaceLister) Get(name string) (*v1alpha2.VirtualMachineDisk, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualmachinedisk"), name)
	}
	return obj.(*v1alpha2.VirtualMachineDisk), nil
}
