/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualImageLister helps list VirtualImages.
// All objects returned here must be treated as read-only.
type VirtualImageLister interface {
	// List lists all VirtualImages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualImage, err error)
	// VirtualImages returns an object that can list and get VirtualImages.
	VirtualImages(namespace string) VirtualImageNamespaceLister
	VirtualImageListerExpansion
}

// virtualImageLister implements the VirtualImageLister interface.
type virtualImageLister struct {
	indexer cache.Indexer
}

// NewVirtualImageLister returns a new VirtualImageLister.
func NewVirtualImageLister(indexer cache.Indexer) VirtualImageLister {
	return &virtualImageLister{indexer: indexer}
}

// List lists all VirtualImages in the indexer.
func (s *virtualImageLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualImage))
	})
	return ret, err
}

// VirtualImages returns an object that can list and get VirtualImages.
func (s *virtualImageLister) VirtualImages(namespace string) VirtualImageNamespaceLister {
	return virtualImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualImageNamespaceLister helps list and get VirtualImages.
// All objects returned here must be treated as read-only.
type VirtualImageNamespaceLister interface {
	// List lists all VirtualImages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualImage, err error)
	// Get retrieves the VirtualImage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualImage, error)
	VirtualImageNamespaceListerExpansion
}

// virtualImageNamespaceLister implements the VirtualImageNamespaceLister
// interface.
type virtualImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualImages in the indexer for a given namespace.
func (s virtualImageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualImage))
	})
	return ret, err
}

// Get retrieves the VirtualImage from the indexer for a given namespace and name.
func (s virtualImageNamespaceLister) Get(name string) (*v1alpha2.VirtualImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualimage"), name)
	}
	return obj.(*v1alpha2.VirtualImage), nil
}
