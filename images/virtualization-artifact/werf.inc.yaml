---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}
final: false
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/golang-bookworm-1.24" "builder/alt-go-svace" }}
git:
- add: {{ .ModuleDir }}/api
  to: /src/api
  stageDependencies:
    install:
      - go.mod
      - go.sum
    setup:
      - "**/*.go"
- add: {{ .ModuleDir }}/images/{{ .ImageName }}
  to: /src/images/virtualization-artifact
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=$(cat /run/secrets/GOPROXY)
{{- if eq $.DELVE_DEBUG "true" }}
  - go install github.com/go-delve/delve/cmd/dlv@latest
{{- end }}
  - cd /src/images/virtualization-artifact
  - go mod download
  setup:
  - cd /src/images/virtualization-artifact
  - mkdir /out
  - export GOOS=linux
  - export GOARCH=amd64
  - export CGO_ENABLED=0

  - |
    echo "Build virtualization-controller binary"
    {{- $buildCommand := "" }}
    {{- $_ := set $ "ProjectName" (list $.ImageName "virtualization-controller" | join "/") }}
    
    {{- if and (eq $.DELVE_DEBUG "true") (eq $.COMPONENT_DEBUG "delve/virtualization-controller") }}
    {{-   $buildCommand = printf "go build -tags %s -v -a -o /out/virtualization-controller ./cmd/virtualization-controller" .MODULE_EDITION -}}
    {{- else }}
    {{-   $buildCommand = printf "go build -ldflags=\"-s -w\" -tags %s -v -a -o /out/virtualization-controller ./cmd/virtualization-controller" .MODULE_EDITION -}}
    {{- end }}

    echo "{{ $buildCommand }}  ===="
    
    {{- include "image-build.build" (set $ "BuildCommand" $buildCommand) | nindent 4 }}
  - |
    echo "Build virtualization-api binary"
    {{- $_ := set $ "ProjectName" (list $.ImageName "virtualization-api" | join "/") }}
    
    {{- if and (eq $.DELVE_DEBUG "true") (eq $.COMPONENT_DEBUG "delve/virtualization-api") }}
    {{-   include "image-build.build" (set $ "BuildCommand" `go build -v -o /out/virtualization-api ./cmd/virtualization-api`) | nindent 4 }}
    {{- else }}
    {{-   include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -v -o /out/virtualization-api ./cmd/virtualization-api`) | nindent 4 }}
    {{- end }}

{{- if or (eq .MODULE_EDITION "EE") (eq .SVACE_ENABLED "true") }}
  - |
    echo "Build virtualization-audit binary"
    {{- $_ := set $ "ProjectName" (list $.ImageName "virtualization-audit" | join "/") }}
    {{- if and (eq $.DELVE_DEBUG "true") (eq $.COMPONENT_DEBUG "delve/virtualization-audit") }}
    {{-   include "image-build.build" (set $ "BuildCommand" `go build -v -o /out/virtualization-audit ./cmd/virtualization-audit`) | nindent 4 }}
    {{- else }}
    {{-   include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -v -o /out/virtualization-audit ./cmd/virtualization-audit`) | nindent 4 }}
    {{- end }}
{{- end }}
