/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/deckhouse/virtualization-controller/api/core/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineImageLister helps list VirtualMachineImages.
// All objects returned here must be treated as read-only.
type VirtualMachineImageLister interface {
	// List lists all VirtualMachineImages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineImage, err error)
	// VirtualMachineImages returns an object that can list and get VirtualMachineImages.
	VirtualMachineImages(namespace string) VirtualMachineImageNamespaceLister
	VirtualMachineImageListerExpansion
}

// virtualMachineImageLister implements the VirtualMachineImageLister interface.
type virtualMachineImageLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineImageLister returns a new VirtualMachineImageLister.
func NewVirtualMachineImageLister(indexer cache.Indexer) VirtualMachineImageLister {
	return &virtualMachineImageLister{indexer: indexer}
}

// List lists all VirtualMachineImages in the indexer.
func (s *virtualMachineImageLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineImage))
	})
	return ret, err
}

// VirtualMachineImages returns an object that can list and get VirtualMachineImages.
func (s *virtualMachineImageLister) VirtualMachineImages(namespace string) VirtualMachineImageNamespaceLister {
	return virtualMachineImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineImageNamespaceLister helps list and get VirtualMachineImages.
// All objects returned here must be treated as read-only.
type VirtualMachineImageNamespaceLister interface {
	// List lists all VirtualMachineImages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineImage, err error)
	// Get retrieves the VirtualMachineImage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.VirtualMachineImage, error)
	VirtualMachineImageNamespaceListerExpansion
}

// virtualMachineImageNamespaceLister implements the VirtualMachineImageNamespaceLister
// interface.
type virtualMachineImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineImages in the indexer for a given namespace.
func (s virtualMachineImageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.VirtualMachineImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.VirtualMachineImage))
	})
	return ret, err
}

// Get retrieves the VirtualMachineImage from the indexer for a given namespace and name.
func (s virtualMachineImageNamespaceLister) Get(name string) (*v1alpha2.VirtualMachineImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("virtualmachineimage"), name)
	}
	return obj.(*v1alpha2.VirtualMachineImage), nil
}
