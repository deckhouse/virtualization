// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package events

import (
	"sync"
)

// Ensure, that indexerMock does implement indexer.
// If this is not the case, regenerate this file with moq.
var _ indexer = &indexerMock{}

// indexerMock is a mock implementation of indexer.
//
//	func TestSomethingThatUsesindexer(t *testing.T) {
//
//		// make and configure a mocked indexer
//		mockedindexer := &indexerMock{
//			GetByKeyFunc: func(s string) (any, bool, error) {
//				panic("mock out the GetByKey method")
//			},
//		}
//
//		// use mockedindexer in code that requires indexer
//		// and then make assertions.
//
//	}
type indexerMock struct {
	// GetByKeyFunc mocks the GetByKey method.
	GetByKeyFunc func(s string) (any, bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByKey holds details about calls to the GetByKey method.
		GetByKey []struct {
			// S is the s argument value.
			S string
		}
	}
	lockGetByKey sync.RWMutex
}

// GetByKey calls GetByKeyFunc.
func (mock *indexerMock) GetByKey(s string) (any, bool, error) {
	if mock.GetByKeyFunc == nil {
		panic("indexerMock.GetByKeyFunc: method is nil but indexer.GetByKey was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetByKey.Lock()
	mock.calls.GetByKey = append(mock.calls.GetByKey, callInfo)
	mock.lockGetByKey.Unlock()
	return mock.GetByKeyFunc(s)
}

// GetByKeyCalls gets all the calls that were made to GetByKey.
// Check the length with:
//
//	len(mockedindexer.GetByKeyCalls())
func (mock *indexerMock) GetByKeyCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetByKey.RLock()
	calls = mock.calls.GetByKey
	mock.lockGetByKey.RUnlock()
	return calls
}
