// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	virtv2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	"sync"
)

// Ensure, that OneShotMigrationMock does implement OneShotMigration.
// If this is not the case, regenerate this file with moq.
var _ OneShotMigration = &OneShotMigrationMock{}

// OneShotMigrationMock is a mock implementation of OneShotMigration.
//
//	func TestSomethingThatUsesOneShotMigration(t *testing.T) {
//
//		// make and configure a mocked OneShotMigration
//		mockedOneShotMigration := &OneShotMigrationMock{
//			OnceMigrateFunc: func(ctx context.Context, vm *virtv2.VirtualMachine, annotationKey string, annotationExpectedValue string) (bool, error) {
//				panic("mock out the OnceMigrate method")
//			},
//		}
//
//		// use mockedOneShotMigration in code that requires OneShotMigration
//		// and then make assertions.
//
//	}
type OneShotMigrationMock struct {
	// OnceMigrateFunc mocks the OnceMigrate method.
	OnceMigrateFunc func(ctx context.Context, vm *virtv2.VirtualMachine, annotationKey string, annotationExpectedValue string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// OnceMigrate holds details about calls to the OnceMigrate method.
		OnceMigrate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// VM is the vm argument value.
			VM *virtv2.VirtualMachine
			// AnnotationKey is the annotationKey argument value.
			AnnotationKey string
			// AnnotationExpectedValue is the annotationExpectedValue argument value.
			AnnotationExpectedValue string
		}
	}
	lockOnceMigrate sync.RWMutex
}

// OnceMigrate calls OnceMigrateFunc.
func (mock *OneShotMigrationMock) OnceMigrate(ctx context.Context, vm *virtv2.VirtualMachine, annotationKey string, annotationExpectedValue string) (bool, error) {
	if mock.OnceMigrateFunc == nil {
		panic("OneShotMigrationMock.OnceMigrateFunc: method is nil but OneShotMigration.OnceMigrate was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		VM                      *virtv2.VirtualMachine
		AnnotationKey           string
		AnnotationExpectedValue string
	}{
		Ctx:                     ctx,
		VM:                      vm,
		AnnotationKey:           annotationKey,
		AnnotationExpectedValue: annotationExpectedValue,
	}
	mock.lockOnceMigrate.Lock()
	mock.calls.OnceMigrate = append(mock.calls.OnceMigrate, callInfo)
	mock.lockOnceMigrate.Unlock()
	return mock.OnceMigrateFunc(ctx, vm, annotationKey, annotationExpectedValue)
}

// OnceMigrateCalls gets all the calls that were made to OnceMigrate.
// Check the length with:
//
//	len(mockedOneShotMigration.OnceMigrateCalls())
func (mock *OneShotMigrationMock) OnceMigrateCalls() []struct {
	Ctx                     context.Context
	VM                      *virtv2.VirtualMachine
	AnnotationKey           string
	AnnotationExpectedValue string
} {
	var calls []struct {
		Ctx                     context.Context
		VM                      *virtv2.VirtualMachine
		AnnotationKey           string
		AnnotationExpectedValue string
	}
	mock.lockOnceMigrate.RLock()
	calls = mock.calls.OnceMigrate
	mock.lockOnceMigrate.RUnlock()
	return calls
}
