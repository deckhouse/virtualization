// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"context"
	virtv2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	vsv1 "github.com/kubernetes-csi/external-snapshotter/client/v6/apis/volumesnapshot/v1"
	corev1 "k8s.io/api/core/v1"
	"sync"
)

// Ensure, that VirtualDiskReadySnapshotterMock does implement VirtualDiskReadySnapshotter.
// If this is not the case, regenerate this file with moq.
var _ VirtualDiskReadySnapshotter = &VirtualDiskReadySnapshotterMock{}

// VirtualDiskReadySnapshotterMock is a mock implementation of VirtualDiskReadySnapshotter.
//
//	func TestSomethingThatUsesVirtualDiskReadySnapshotter(t *testing.T) {
//
//		// make and configure a mocked VirtualDiskReadySnapshotter
//		mockedVirtualDiskReadySnapshotter := &VirtualDiskReadySnapshotterMock{
//			GetVirtualDiskFunc: func(ctx context.Context, name string, namespace string) (*virtv2.VirtualDisk, error) {
//				panic("mock out the GetVirtualDisk method")
//			},
//		}
//
//		// use mockedVirtualDiskReadySnapshotter in code that requires VirtualDiskReadySnapshotter
//		// and then make assertions.
//
//	}
type VirtualDiskReadySnapshotterMock struct {
	// GetVirtualDiskFunc mocks the GetVirtualDisk method.
	GetVirtualDiskFunc func(ctx context.Context, name string, namespace string) (*virtv2.VirtualDisk, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetVirtualDisk holds details about calls to the GetVirtualDisk method.
		GetVirtualDisk []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockGetVirtualDisk sync.RWMutex
}

// GetVirtualDisk calls GetVirtualDiskFunc.
func (mock *VirtualDiskReadySnapshotterMock) GetVirtualDisk(ctx context.Context, name string, namespace string) (*virtv2.VirtualDisk, error) {
	if mock.GetVirtualDiskFunc == nil {
		panic("VirtualDiskReadySnapshotterMock.GetVirtualDiskFunc: method is nil but VirtualDiskReadySnapshotter.GetVirtualDisk was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockGetVirtualDisk.Lock()
	mock.calls.GetVirtualDisk = append(mock.calls.GetVirtualDisk, callInfo)
	mock.lockGetVirtualDisk.Unlock()
	return mock.GetVirtualDiskFunc(ctx, name, namespace)
}

// GetVirtualDiskCalls gets all the calls that were made to GetVirtualDisk.
// Check the length with:
//
//	len(mockedVirtualDiskReadySnapshotter.GetVirtualDiskCalls())
func (mock *VirtualDiskReadySnapshotterMock) GetVirtualDiskCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockGetVirtualDisk.RLock()
	calls = mock.calls.GetVirtualDisk
	mock.lockGetVirtualDisk.RUnlock()
	return calls
}

// Ensure, that LifeCycleSnapshotterMock does implement LifeCycleSnapshotter.
// If this is not the case, regenerate this file with moq.
var _ LifeCycleSnapshotter = &LifeCycleSnapshotterMock{}

// LifeCycleSnapshotterMock is a mock implementation of LifeCycleSnapshotter.
//
//	func TestSomethingThatUsesLifeCycleSnapshotter(t *testing.T) {
//
//		// make and configure a mocked LifeCycleSnapshotter
//		mockedLifeCycleSnapshotter := &LifeCycleSnapshotterMock{
//			CanFreezeFunc: func(vm *virtv2.VirtualMachine) bool {
//				panic("mock out the CanFreeze method")
//			},
//			CanUnfreezeWithVirtualDiskSnapshotFunc: func(ctx context.Context, vdSnapshotName string, vm *virtv2.VirtualMachine) (bool, error) {
//				panic("mock out the CanUnfreezeWithVirtualDiskSnapshot method")
//			},
//			CreateVolumeSnapshotFunc: func(ctx context.Context, vs *vsv1.VolumeSnapshot) (*vsv1.VolumeSnapshot, error) {
//				panic("mock out the CreateVolumeSnapshot method")
//			},
//			FreezeFunc: func(ctx context.Context, name string, namespace string) error {
//				panic("mock out the Freeze method")
//			},
//			GetPersistentVolumeClaimFunc: func(ctx context.Context, name string, namespace string) (*corev1.PersistentVolumeClaim, error) {
//				panic("mock out the GetPersistentVolumeClaim method")
//			},
//			GetVirtualDiskFunc: func(ctx context.Context, name string, namespace string) (*virtv2.VirtualDisk, error) {
//				panic("mock out the GetVirtualDisk method")
//			},
//			GetVirtualMachineFunc: func(ctx context.Context, name string, namespace string) (*virtv2.VirtualMachine, error) {
//				panic("mock out the GetVirtualMachine method")
//			},
//			GetVolumeSnapshotFunc: func(ctx context.Context, name string, namespace string) (*vsv1.VolumeSnapshot, error) {
//				panic("mock out the GetVolumeSnapshot method")
//			},
//			IsFrozenFunc: func(vm *virtv2.VirtualMachine) bool {
//				panic("mock out the IsFrozen method")
//			},
//			UnfreezeFunc: func(ctx context.Context, name string, namespace string) error {
//				panic("mock out the Unfreeze method")
//			},
//		}
//
//		// use mockedLifeCycleSnapshotter in code that requires LifeCycleSnapshotter
//		// and then make assertions.
//
//	}
type LifeCycleSnapshotterMock struct {
	// CanFreezeFunc mocks the CanFreeze method.
	CanFreezeFunc func(vm *virtv2.VirtualMachine) bool

	// CanUnfreezeWithVirtualDiskSnapshotFunc mocks the CanUnfreezeWithVirtualDiskSnapshot method.
	CanUnfreezeWithVirtualDiskSnapshotFunc func(ctx context.Context, vdSnapshotName string, vm *virtv2.VirtualMachine) (bool, error)

	// CreateVolumeSnapshotFunc mocks the CreateVolumeSnapshot method.
	CreateVolumeSnapshotFunc func(ctx context.Context, vs *vsv1.VolumeSnapshot) (*vsv1.VolumeSnapshot, error)

	// FreezeFunc mocks the Freeze method.
	FreezeFunc func(ctx context.Context, name string, namespace string) error

	// GetPersistentVolumeClaimFunc mocks the GetPersistentVolumeClaim method.
	GetPersistentVolumeClaimFunc func(ctx context.Context, name string, namespace string) (*corev1.PersistentVolumeClaim, error)

	// GetVirtualDiskFunc mocks the GetVirtualDisk method.
	GetVirtualDiskFunc func(ctx context.Context, name string, namespace string) (*virtv2.VirtualDisk, error)

	// GetVirtualMachineFunc mocks the GetVirtualMachine method.
	GetVirtualMachineFunc func(ctx context.Context, name string, namespace string) (*virtv2.VirtualMachine, error)

	// GetVolumeSnapshotFunc mocks the GetVolumeSnapshot method.
	GetVolumeSnapshotFunc func(ctx context.Context, name string, namespace string) (*vsv1.VolumeSnapshot, error)

	// IsFrozenFunc mocks the IsFrozen method.
	IsFrozenFunc func(vm *virtv2.VirtualMachine) bool

	// UnfreezeFunc mocks the Unfreeze method.
	UnfreezeFunc func(ctx context.Context, name string, namespace string) error

	// calls tracks calls to the methods.
	calls struct {
		// CanFreeze holds details about calls to the CanFreeze method.
		CanFreeze []struct {
			// VM is the vm argument value.
			VM *virtv2.VirtualMachine
		}
		// CanUnfreezeWithVirtualDiskSnapshot holds details about calls to the CanUnfreezeWithVirtualDiskSnapshot method.
		CanUnfreezeWithVirtualDiskSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// VdSnapshotName is the vdSnapshotName argument value.
			VdSnapshotName string
			// VM is the vm argument value.
			VM *virtv2.VirtualMachine
		}
		// CreateVolumeSnapshot holds details about calls to the CreateVolumeSnapshot method.
		CreateVolumeSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Vs is the vs argument value.
			Vs *vsv1.VolumeSnapshot
		}
		// Freeze holds details about calls to the Freeze method.
		Freeze []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GetPersistentVolumeClaim holds details about calls to the GetPersistentVolumeClaim method.
		GetPersistentVolumeClaim []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GetVirtualDisk holds details about calls to the GetVirtualDisk method.
		GetVirtualDisk []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GetVirtualMachine holds details about calls to the GetVirtualMachine method.
		GetVirtualMachine []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GetVolumeSnapshot holds details about calls to the GetVolumeSnapshot method.
		GetVolumeSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// IsFrozen holds details about calls to the IsFrozen method.
		IsFrozen []struct {
			// VM is the vm argument value.
			VM *virtv2.VirtualMachine
		}
		// Unfreeze holds details about calls to the Unfreeze method.
		Unfreeze []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockCanFreeze                          sync.RWMutex
	lockCanUnfreezeWithVirtualDiskSnapshot sync.RWMutex
	lockCreateVolumeSnapshot               sync.RWMutex
	lockFreeze                             sync.RWMutex
	lockGetPersistentVolumeClaim           sync.RWMutex
	lockGetVirtualDisk                     sync.RWMutex
	lockGetVirtualMachine                  sync.RWMutex
	lockGetVolumeSnapshot                  sync.RWMutex
	lockIsFrozen                           sync.RWMutex
	lockUnfreeze                           sync.RWMutex
}

// CanFreeze calls CanFreezeFunc.
func (mock *LifeCycleSnapshotterMock) CanFreeze(vm *virtv2.VirtualMachine) bool {
	if mock.CanFreezeFunc == nil {
		panic("LifeCycleSnapshotterMock.CanFreezeFunc: method is nil but LifeCycleSnapshotter.CanFreeze was just called")
	}
	callInfo := struct {
		VM *virtv2.VirtualMachine
	}{
		VM: vm,
	}
	mock.lockCanFreeze.Lock()
	mock.calls.CanFreeze = append(mock.calls.CanFreeze, callInfo)
	mock.lockCanFreeze.Unlock()
	return mock.CanFreezeFunc(vm)
}

// CanFreezeCalls gets all the calls that were made to CanFreeze.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.CanFreezeCalls())
func (mock *LifeCycleSnapshotterMock) CanFreezeCalls() []struct {
	VM *virtv2.VirtualMachine
} {
	var calls []struct {
		VM *virtv2.VirtualMachine
	}
	mock.lockCanFreeze.RLock()
	calls = mock.calls.CanFreeze
	mock.lockCanFreeze.RUnlock()
	return calls
}

// CanUnfreezeWithVirtualDiskSnapshot calls CanUnfreezeWithVirtualDiskSnapshotFunc.
func (mock *LifeCycleSnapshotterMock) CanUnfreezeWithVirtualDiskSnapshot(ctx context.Context, vdSnapshotName string, vm *virtv2.VirtualMachine) (bool, error) {
	if mock.CanUnfreezeWithVirtualDiskSnapshotFunc == nil {
		panic("LifeCycleSnapshotterMock.CanUnfreezeWithVirtualDiskSnapshotFunc: method is nil but LifeCycleSnapshotter.CanUnfreezeWithVirtualDiskSnapshot was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		VdSnapshotName string
		VM             *virtv2.VirtualMachine
	}{
		Ctx:            ctx,
		VdSnapshotName: vdSnapshotName,
		VM:             vm,
	}
	mock.lockCanUnfreezeWithVirtualDiskSnapshot.Lock()
	mock.calls.CanUnfreezeWithVirtualDiskSnapshot = append(mock.calls.CanUnfreezeWithVirtualDiskSnapshot, callInfo)
	mock.lockCanUnfreezeWithVirtualDiskSnapshot.Unlock()
	return mock.CanUnfreezeWithVirtualDiskSnapshotFunc(ctx, vdSnapshotName, vm)
}

// CanUnfreezeWithVirtualDiskSnapshotCalls gets all the calls that were made to CanUnfreezeWithVirtualDiskSnapshot.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.CanUnfreezeWithVirtualDiskSnapshotCalls())
func (mock *LifeCycleSnapshotterMock) CanUnfreezeWithVirtualDiskSnapshotCalls() []struct {
	Ctx            context.Context
	VdSnapshotName string
	VM             *virtv2.VirtualMachine
} {
	var calls []struct {
		Ctx            context.Context
		VdSnapshotName string
		VM             *virtv2.VirtualMachine
	}
	mock.lockCanUnfreezeWithVirtualDiskSnapshot.RLock()
	calls = mock.calls.CanUnfreezeWithVirtualDiskSnapshot
	mock.lockCanUnfreezeWithVirtualDiskSnapshot.RUnlock()
	return calls
}

// CreateVolumeSnapshot calls CreateVolumeSnapshotFunc.
func (mock *LifeCycleSnapshotterMock) CreateVolumeSnapshot(ctx context.Context, vs *vsv1.VolumeSnapshot) (*vsv1.VolumeSnapshot, error) {
	if mock.CreateVolumeSnapshotFunc == nil {
		panic("LifeCycleSnapshotterMock.CreateVolumeSnapshotFunc: method is nil but LifeCycleSnapshotter.CreateVolumeSnapshot was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Vs  *vsv1.VolumeSnapshot
	}{
		Ctx: ctx,
		Vs:  vs,
	}
	mock.lockCreateVolumeSnapshot.Lock()
	mock.calls.CreateVolumeSnapshot = append(mock.calls.CreateVolumeSnapshot, callInfo)
	mock.lockCreateVolumeSnapshot.Unlock()
	return mock.CreateVolumeSnapshotFunc(ctx, vs)
}

// CreateVolumeSnapshotCalls gets all the calls that were made to CreateVolumeSnapshot.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.CreateVolumeSnapshotCalls())
func (mock *LifeCycleSnapshotterMock) CreateVolumeSnapshotCalls() []struct {
	Ctx context.Context
	Vs  *vsv1.VolumeSnapshot
} {
	var calls []struct {
		Ctx context.Context
		Vs  *vsv1.VolumeSnapshot
	}
	mock.lockCreateVolumeSnapshot.RLock()
	calls = mock.calls.CreateVolumeSnapshot
	mock.lockCreateVolumeSnapshot.RUnlock()
	return calls
}

// Freeze calls FreezeFunc.
func (mock *LifeCycleSnapshotterMock) Freeze(ctx context.Context, name string, namespace string) error {
	if mock.FreezeFunc == nil {
		panic("LifeCycleSnapshotterMock.FreezeFunc: method is nil but LifeCycleSnapshotter.Freeze was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockFreeze.Lock()
	mock.calls.Freeze = append(mock.calls.Freeze, callInfo)
	mock.lockFreeze.Unlock()
	return mock.FreezeFunc(ctx, name, namespace)
}

// FreezeCalls gets all the calls that were made to Freeze.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.FreezeCalls())
func (mock *LifeCycleSnapshotterMock) FreezeCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockFreeze.RLock()
	calls = mock.calls.Freeze
	mock.lockFreeze.RUnlock()
	return calls
}

// GetPersistentVolumeClaim calls GetPersistentVolumeClaimFunc.
func (mock *LifeCycleSnapshotterMock) GetPersistentVolumeClaim(ctx context.Context, name string, namespace string) (*corev1.PersistentVolumeClaim, error) {
	if mock.GetPersistentVolumeClaimFunc == nil {
		panic("LifeCycleSnapshotterMock.GetPersistentVolumeClaimFunc: method is nil but LifeCycleSnapshotter.GetPersistentVolumeClaim was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockGetPersistentVolumeClaim.Lock()
	mock.calls.GetPersistentVolumeClaim = append(mock.calls.GetPersistentVolumeClaim, callInfo)
	mock.lockGetPersistentVolumeClaim.Unlock()
	return mock.GetPersistentVolumeClaimFunc(ctx, name, namespace)
}

// GetPersistentVolumeClaimCalls gets all the calls that were made to GetPersistentVolumeClaim.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.GetPersistentVolumeClaimCalls())
func (mock *LifeCycleSnapshotterMock) GetPersistentVolumeClaimCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockGetPersistentVolumeClaim.RLock()
	calls = mock.calls.GetPersistentVolumeClaim
	mock.lockGetPersistentVolumeClaim.RUnlock()
	return calls
}

// GetVirtualDisk calls GetVirtualDiskFunc.
func (mock *LifeCycleSnapshotterMock) GetVirtualDisk(ctx context.Context, name string, namespace string) (*virtv2.VirtualDisk, error) {
	if mock.GetVirtualDiskFunc == nil {
		panic("LifeCycleSnapshotterMock.GetVirtualDiskFunc: method is nil but LifeCycleSnapshotter.GetVirtualDisk was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockGetVirtualDisk.Lock()
	mock.calls.GetVirtualDisk = append(mock.calls.GetVirtualDisk, callInfo)
	mock.lockGetVirtualDisk.Unlock()
	return mock.GetVirtualDiskFunc(ctx, name, namespace)
}

// GetVirtualDiskCalls gets all the calls that were made to GetVirtualDisk.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.GetVirtualDiskCalls())
func (mock *LifeCycleSnapshotterMock) GetVirtualDiskCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockGetVirtualDisk.RLock()
	calls = mock.calls.GetVirtualDisk
	mock.lockGetVirtualDisk.RUnlock()
	return calls
}

// GetVirtualMachine calls GetVirtualMachineFunc.
func (mock *LifeCycleSnapshotterMock) GetVirtualMachine(ctx context.Context, name string, namespace string) (*virtv2.VirtualMachine, error) {
	if mock.GetVirtualMachineFunc == nil {
		panic("LifeCycleSnapshotterMock.GetVirtualMachineFunc: method is nil but LifeCycleSnapshotter.GetVirtualMachine was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockGetVirtualMachine.Lock()
	mock.calls.GetVirtualMachine = append(mock.calls.GetVirtualMachine, callInfo)
	mock.lockGetVirtualMachine.Unlock()
	return mock.GetVirtualMachineFunc(ctx, name, namespace)
}

// GetVirtualMachineCalls gets all the calls that were made to GetVirtualMachine.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.GetVirtualMachineCalls())
func (mock *LifeCycleSnapshotterMock) GetVirtualMachineCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockGetVirtualMachine.RLock()
	calls = mock.calls.GetVirtualMachine
	mock.lockGetVirtualMachine.RUnlock()
	return calls
}

// GetVolumeSnapshot calls GetVolumeSnapshotFunc.
func (mock *LifeCycleSnapshotterMock) GetVolumeSnapshot(ctx context.Context, name string, namespace string) (*vsv1.VolumeSnapshot, error) {
	if mock.GetVolumeSnapshotFunc == nil {
		panic("LifeCycleSnapshotterMock.GetVolumeSnapshotFunc: method is nil but LifeCycleSnapshotter.GetVolumeSnapshot was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockGetVolumeSnapshot.Lock()
	mock.calls.GetVolumeSnapshot = append(mock.calls.GetVolumeSnapshot, callInfo)
	mock.lockGetVolumeSnapshot.Unlock()
	return mock.GetVolumeSnapshotFunc(ctx, name, namespace)
}

// GetVolumeSnapshotCalls gets all the calls that were made to GetVolumeSnapshot.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.GetVolumeSnapshotCalls())
func (mock *LifeCycleSnapshotterMock) GetVolumeSnapshotCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockGetVolumeSnapshot.RLock()
	calls = mock.calls.GetVolumeSnapshot
	mock.lockGetVolumeSnapshot.RUnlock()
	return calls
}

// IsFrozen calls IsFrozenFunc.
func (mock *LifeCycleSnapshotterMock) IsFrozen(vm *virtv2.VirtualMachine) bool {
	if mock.IsFrozenFunc == nil {
		panic("LifeCycleSnapshotterMock.IsFrozenFunc: method is nil but LifeCycleSnapshotter.IsFrozen was just called")
	}
	callInfo := struct {
		VM *virtv2.VirtualMachine
	}{
		VM: vm,
	}
	mock.lockIsFrozen.Lock()
	mock.calls.IsFrozen = append(mock.calls.IsFrozen, callInfo)
	mock.lockIsFrozen.Unlock()
	return mock.IsFrozenFunc(vm)
}

// IsFrozenCalls gets all the calls that were made to IsFrozen.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.IsFrozenCalls())
func (mock *LifeCycleSnapshotterMock) IsFrozenCalls() []struct {
	VM *virtv2.VirtualMachine
} {
	var calls []struct {
		VM *virtv2.VirtualMachine
	}
	mock.lockIsFrozen.RLock()
	calls = mock.calls.IsFrozen
	mock.lockIsFrozen.RUnlock()
	return calls
}

// Unfreeze calls UnfreezeFunc.
func (mock *LifeCycleSnapshotterMock) Unfreeze(ctx context.Context, name string, namespace string) error {
	if mock.UnfreezeFunc == nil {
		panic("LifeCycleSnapshotterMock.UnfreezeFunc: method is nil but LifeCycleSnapshotter.Unfreeze was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}{
		Ctx:       ctx,
		Name:      name,
		Namespace: namespace,
	}
	mock.lockUnfreeze.Lock()
	mock.calls.Unfreeze = append(mock.calls.Unfreeze, callInfo)
	mock.lockUnfreeze.Unlock()
	return mock.UnfreezeFunc(ctx, name, namespace)
}

// UnfreezeCalls gets all the calls that were made to Unfreeze.
// Check the length with:
//
//	len(mockedLifeCycleSnapshotter.UnfreezeCalls())
func (mock *LifeCycleSnapshotterMock) UnfreezeCalls() []struct {
	Ctx       context.Context
	Name      string
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Namespace string
	}
	mock.lockUnfreeze.RLock()
	calls = mock.calls.Unfreeze
	mock.lockUnfreeze.RUnlock()
	return calls
}
