// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package restorer

import (
	"context"
	"github.com/deckhouse/virtualization/api/core/v1alpha2"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

// Ensure, that ObjectHandlerMock does implement ObjectHandler.
// If this is not the case, regenerate this file with moq.
var _ ObjectHandler = &ObjectHandlerMock{}

// ObjectHandlerMock is a mock implementation of ObjectHandler.
//
//	func TestSomethingThatUsesObjectHandler(t *testing.T) {
//
//		// make and configure a mocked ObjectHandler
//		mockedObjectHandler := &ObjectHandlerMock{
//			CustomizeFunc: func(prefix string, suffix string)  {
//				panic("mock out the Customize method")
//			},
//			ObjectFunc: func() client.Object {
//				panic("mock out the Object method")
//			},
//			OverrideFunc: func(rules []v1alpha2.NameReplacement)  {
//				panic("mock out the Override method")
//			},
//			ProcessCloneFunc: func(ctx context.Context) error {
//				panic("mock out the ProcessClone method")
//			},
//			ProcessRestoreFunc: func(ctx context.Context) error {
//				panic("mock out the ProcessRestore method")
//			},
//			ValidateCloneFunc: func(ctx context.Context) error {
//				panic("mock out the ValidateClone method")
//			},
//			ValidateRestoreFunc: func(ctx context.Context) error {
//				panic("mock out the ValidateRestore method")
//			},
//		}
//
//		// use mockedObjectHandler in code that requires ObjectHandler
//		// and then make assertions.
//
//	}
type ObjectHandlerMock struct {
	// CustomizeFunc mocks the Customize method.
	CustomizeFunc func(prefix string, suffix string)

	// ObjectFunc mocks the Object method.
	ObjectFunc func() client.Object

	// OverrideFunc mocks the Override method.
	OverrideFunc func(rules []v1alpha2.NameReplacement)

	// ProcessCloneFunc mocks the ProcessClone method.
	ProcessCloneFunc func(ctx context.Context) error

	// ProcessRestoreFunc mocks the ProcessRestore method.
	ProcessRestoreFunc func(ctx context.Context) error

	// ValidateCloneFunc mocks the ValidateClone method.
	ValidateCloneFunc func(ctx context.Context) error

	// ValidateRestoreFunc mocks the ValidateRestore method.
	ValidateRestoreFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Customize holds details about calls to the Customize method.
		Customize []struct {
			// Prefix is the prefix argument value.
			Prefix string
			// Suffix is the suffix argument value.
			Suffix string
		}
		// Object holds details about calls to the Object method.
		Object []struct {
		}
		// Override holds details about calls to the Override method.
		Override []struct {
			// Rules is the rules argument value.
			Rules []v1alpha2.NameReplacement
		}
		// ProcessClone holds details about calls to the ProcessClone method.
		ProcessClone []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ProcessRestore holds details about calls to the ProcessRestore method.
		ProcessRestore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ValidateClone holds details about calls to the ValidateClone method.
		ValidateClone []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ValidateRestore holds details about calls to the ValidateRestore method.
		ValidateRestore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCustomize       sync.RWMutex
	lockObject          sync.RWMutex
	lockOverride        sync.RWMutex
	lockProcessClone    sync.RWMutex
	lockProcessRestore  sync.RWMutex
	lockValidateClone   sync.RWMutex
	lockValidateRestore sync.RWMutex
}

// Customize calls CustomizeFunc.
func (mock *ObjectHandlerMock) Customize(prefix string, suffix string) {
	if mock.CustomizeFunc == nil {
		panic("ObjectHandlerMock.CustomizeFunc: method is nil but ObjectHandler.Customize was just called")
	}
	callInfo := struct {
		Prefix string
		Suffix string
	}{
		Prefix: prefix,
		Suffix: suffix,
	}
	mock.lockCustomize.Lock()
	mock.calls.Customize = append(mock.calls.Customize, callInfo)
	mock.lockCustomize.Unlock()
	mock.CustomizeFunc(prefix, suffix)
}

// CustomizeCalls gets all the calls that were made to Customize.
// Check the length with:
//
//	len(mockedObjectHandler.CustomizeCalls())
func (mock *ObjectHandlerMock) CustomizeCalls() []struct {
	Prefix string
	Suffix string
} {
	var calls []struct {
		Prefix string
		Suffix string
	}
	mock.lockCustomize.RLock()
	calls = mock.calls.Customize
	mock.lockCustomize.RUnlock()
	return calls
}

// Object calls ObjectFunc.
func (mock *ObjectHandlerMock) Object() client.Object {
	if mock.ObjectFunc == nil {
		panic("ObjectHandlerMock.ObjectFunc: method is nil but ObjectHandler.Object was just called")
	}
	callInfo := struct {
	}{}
	mock.lockObject.Lock()
	mock.calls.Object = append(mock.calls.Object, callInfo)
	mock.lockObject.Unlock()
	return mock.ObjectFunc()
}

// ObjectCalls gets all the calls that were made to Object.
// Check the length with:
//
//	len(mockedObjectHandler.ObjectCalls())
func (mock *ObjectHandlerMock) ObjectCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockObject.RLock()
	calls = mock.calls.Object
	mock.lockObject.RUnlock()
	return calls
}

// Override calls OverrideFunc.
func (mock *ObjectHandlerMock) Override(rules []v1alpha2.NameReplacement) {
	if mock.OverrideFunc == nil {
		panic("ObjectHandlerMock.OverrideFunc: method is nil but ObjectHandler.Override was just called")
	}
	callInfo := struct {
		Rules []v1alpha2.NameReplacement
	}{
		Rules: rules,
	}
	mock.lockOverride.Lock()
	mock.calls.Override = append(mock.calls.Override, callInfo)
	mock.lockOverride.Unlock()
	mock.OverrideFunc(rules)
}

// OverrideCalls gets all the calls that were made to Override.
// Check the length with:
//
//	len(mockedObjectHandler.OverrideCalls())
func (mock *ObjectHandlerMock) OverrideCalls() []struct {
	Rules []v1alpha2.NameReplacement
} {
	var calls []struct {
		Rules []v1alpha2.NameReplacement
	}
	mock.lockOverride.RLock()
	calls = mock.calls.Override
	mock.lockOverride.RUnlock()
	return calls
}

// ProcessClone calls ProcessCloneFunc.
func (mock *ObjectHandlerMock) ProcessClone(ctx context.Context) error {
	if mock.ProcessCloneFunc == nil {
		panic("ObjectHandlerMock.ProcessCloneFunc: method is nil but ObjectHandler.ProcessClone was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockProcessClone.Lock()
	mock.calls.ProcessClone = append(mock.calls.ProcessClone, callInfo)
	mock.lockProcessClone.Unlock()
	return mock.ProcessCloneFunc(ctx)
}

// ProcessCloneCalls gets all the calls that were made to ProcessClone.
// Check the length with:
//
//	len(mockedObjectHandler.ProcessCloneCalls())
func (mock *ObjectHandlerMock) ProcessCloneCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockProcessClone.RLock()
	calls = mock.calls.ProcessClone
	mock.lockProcessClone.RUnlock()
	return calls
}

// ProcessRestore calls ProcessRestoreFunc.
func (mock *ObjectHandlerMock) ProcessRestore(ctx context.Context) error {
	if mock.ProcessRestoreFunc == nil {
		panic("ObjectHandlerMock.ProcessRestoreFunc: method is nil but ObjectHandler.ProcessRestore was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockProcessRestore.Lock()
	mock.calls.ProcessRestore = append(mock.calls.ProcessRestore, callInfo)
	mock.lockProcessRestore.Unlock()
	return mock.ProcessRestoreFunc(ctx)
}

// ProcessRestoreCalls gets all the calls that were made to ProcessRestore.
// Check the length with:
//
//	len(mockedObjectHandler.ProcessRestoreCalls())
func (mock *ObjectHandlerMock) ProcessRestoreCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockProcessRestore.RLock()
	calls = mock.calls.ProcessRestore
	mock.lockProcessRestore.RUnlock()
	return calls
}

// ValidateClone calls ValidateCloneFunc.
func (mock *ObjectHandlerMock) ValidateClone(ctx context.Context) error {
	if mock.ValidateCloneFunc == nil {
		panic("ObjectHandlerMock.ValidateCloneFunc: method is nil but ObjectHandler.ValidateClone was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockValidateClone.Lock()
	mock.calls.ValidateClone = append(mock.calls.ValidateClone, callInfo)
	mock.lockValidateClone.Unlock()
	return mock.ValidateCloneFunc(ctx)
}

// ValidateCloneCalls gets all the calls that were made to ValidateClone.
// Check the length with:
//
//	len(mockedObjectHandler.ValidateCloneCalls())
func (mock *ObjectHandlerMock) ValidateCloneCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockValidateClone.RLock()
	calls = mock.calls.ValidateClone
	mock.lockValidateClone.RUnlock()
	return calls
}

// ValidateRestore calls ValidateRestoreFunc.
func (mock *ObjectHandlerMock) ValidateRestore(ctx context.Context) error {
	if mock.ValidateRestoreFunc == nil {
		panic("ObjectHandlerMock.ValidateRestoreFunc: method is nil but ObjectHandler.ValidateRestore was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockValidateRestore.Lock()
	mock.calls.ValidateRestore = append(mock.calls.ValidateRestore, callInfo)
	mock.lockValidateRestore.Unlock()
	return mock.ValidateRestoreFunc(ctx)
}

// ValidateRestoreCalls gets all the calls that were made to ValidateRestore.
// Check the length with:
//
//	len(mockedObjectHandler.ValidateRestoreCalls())
func (mock *ObjectHandlerMock) ValidateRestoreCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockValidateRestore.RLock()
	calls = mock.calls.ValidateRestore
	mock.lockValidateRestore.RUnlock()
	return calls
}
