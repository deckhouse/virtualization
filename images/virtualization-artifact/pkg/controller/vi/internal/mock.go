/*
Copyright 2024 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"context"
	virtv2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	storagev1 "k8s.io/api/storage/v1"
	"sync"
)

// Ensure, that DiskServiceMock does implement DiskService.
// If this is not the case, regenerate this file with moq.
var _ DiskService = &DiskServiceMock{}

// DiskServiceMock is a mock implementation of DiskService.
//
//	func TestSomethingThatUsesDiskService(t *testing.T) {
//
//		// make and configure a mocked DiskService
//		mockedDiskService := &DiskServiceMock{
//			GetStorageClassFunc: func(ctx context.Context, storageClassName *string) (*storagev1.StorageClass, error) {
//				panic("mock out the GetStorageClass method")
//			},
//		}
//
//		// use mockedDiskService in code that requires DiskService
//		// and then make assertions.
//
//	}
type DiskServiceMock struct {
	// GetStorageClassFunc mocks the GetStorageClass method.
	GetStorageClassFunc func(ctx context.Context, storageClassName *string) (*storagev1.StorageClass, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStorageClass holds details about calls to the GetStorageClass method.
		GetStorageClass []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StorageClassName is the storageClassName argument value.
			StorageClassName *string
		}
	}
	lockGetStorageClass sync.RWMutex
}

// GetStorageClass calls GetStorageClassFunc.
func (mock *DiskServiceMock) GetStorageClass(ctx context.Context, storageClassName *string) (*storagev1.StorageClass, error) {
	if mock.GetStorageClassFunc == nil {
		panic("DiskServiceMock.GetStorageClassFunc: method is nil but DiskService.GetStorageClass was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		StorageClassName *string
	}{
		Ctx:              ctx,
		StorageClassName: storageClassName,
	}
	mock.lockGetStorageClass.Lock()
	mock.calls.GetStorageClass = append(mock.calls.GetStorageClass, callInfo)
	mock.lockGetStorageClass.Unlock()
	return mock.GetStorageClassFunc(ctx, storageClassName)
}

// GetStorageClassCalls gets all the calls that were made to GetStorageClass.
// Check the length with:
//
//	len(mockedDiskService.GetStorageClassCalls())
func (mock *DiskServiceMock) GetStorageClassCalls() []struct {
	Ctx              context.Context
	StorageClassName *string
} {
	var calls []struct {
		Ctx              context.Context
		StorageClassName *string
	}
	mock.lockGetStorageClass.RLock()
	calls = mock.calls.GetStorageClass
	mock.lockGetStorageClass.RUnlock()
	return calls
}

// Ensure, that SourcesMock does implement Sources.
// If this is not the case, regenerate this file with moq.
var _ Sources = &SourcesMock{}

// SourcesMock is a mock implementation of Sources.
//
//	func TestSomethingThatUsesSources(t *testing.T) {
//
//		// make and configure a mocked Sources
//		mockedSources := &SourcesMock{
//			CleanUpFunc: func(ctx context.Context, vd *virtv2.VirtualImage) (bool, error) {
//				panic("mock out the CleanUp method")
//			},
//		}
//
//		// use mockedSources in code that requires Sources
//		// and then make assertions.
//
//	}
type SourcesMock struct {
	// CleanUpFunc mocks the CleanUp method.
	CleanUpFunc func(ctx context.Context, vd *virtv2.VirtualImage) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// CleanUp holds details about calls to the CleanUp method.
		CleanUp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Vd is the vd argument value.
			Vd *virtv2.VirtualImage
		}
	}
	lockCleanUp sync.RWMutex
}

// CleanUp calls CleanUpFunc.
func (mock *SourcesMock) CleanUp(ctx context.Context, vd *virtv2.VirtualImage) (bool, error) {
	if mock.CleanUpFunc == nil {
		panic("SourcesMock.CleanUpFunc: method is nil but Sources.CleanUp was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Vd  *virtv2.VirtualImage
	}{
		Ctx: ctx,
		Vd:  vd,
	}
	mock.lockCleanUp.Lock()
	mock.calls.CleanUp = append(mock.calls.CleanUp, callInfo)
	mock.lockCleanUp.Unlock()
	return mock.CleanUpFunc(ctx, vd)
}

// CleanUpCalls gets all the calls that were made to CleanUp.
// Check the length with:
//
//	len(mockedSources.CleanUpCalls())
func (mock *SourcesMock) CleanUpCalls() []struct {
	Ctx context.Context
	Vd  *virtv2.VirtualImage
} {
	var calls []struct {
		Ctx context.Context
		Vd  *virtv2.VirtualImage
	}
	mock.lockCleanUp.RLock()
	calls = mock.calls.CleanUp
	mock.lockCleanUp.RUnlock()
	return calls
}
