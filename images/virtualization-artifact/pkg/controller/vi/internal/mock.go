// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"context"
	"github.com/deckhouse/virtualization-controller/pkg/controller/supplements"
	"github.com/deckhouse/virtualization-controller/pkg/controller/vi/internal/source"
	virtv2 "github.com/deckhouse/virtualization/api/core/v1alpha2"
	corev1 "k8s.io/api/core/v1"
	storagev1 "k8s.io/api/storage/v1"
	cdiv1 "kubevirt.io/containerized-data-importer-api/pkg/apis/core/v1beta1"
	"sync"
)

// Ensure, that DiskServiceMock does implement DiskService.
// If this is not the case, regenerate this file with moq.
var _ DiskService = &DiskServiceMock{}

// DiskServiceMock is a mock implementation of DiskService.
//
//	func TestSomethingThatUsesDiskService(t *testing.T) {
//
//		// make and configure a mocked DiskService
//		mockedDiskService := &DiskServiceMock{
//			GetPersistentVolumeClaimFunc: func(ctx context.Context, sup *supplements.Generator) (*corev1.PersistentVolumeClaim, error) {
//				panic("mock out the GetPersistentVolumeClaim method")
//			},
//			GetStorageClassFunc: func(ctx context.Context, storageClassName *string) (*storagev1.StorageClass, error) {
//				panic("mock out the GetStorageClass method")
//			},
//		}
//
//		// use mockedDiskService in code that requires DiskService
//		// and then make assertions.
//
//	}
type DiskServiceMock struct {
	// GetPersistentVolumeClaimFunc mocks the GetPersistentVolumeClaim method.
	GetPersistentVolumeClaimFunc func(ctx context.Context, sup *supplements.Generator) (*corev1.PersistentVolumeClaim, error)

	// GetStorageClassFunc mocks the GetStorageClass method.
	GetStorageClassFunc func(ctx context.Context, storageClassName *string) (*storagev1.StorageClass, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPersistentVolumeClaim holds details about calls to the GetPersistentVolumeClaim method.
		GetPersistentVolumeClaim []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sup is the sup argument value.
			Sup *supplements.Generator
		}
		// GetStorageClass holds details about calls to the GetStorageClass method.
		GetStorageClass []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StorageClassName is the storageClassName argument value.
			StorageClassName *string
		}
	}
	lockGetPersistentVolumeClaim sync.RWMutex
	lockGetStorageClass          sync.RWMutex
}

// GetPersistentVolumeClaim calls GetPersistentVolumeClaimFunc.
func (mock *DiskServiceMock) GetPersistentVolumeClaim(ctx context.Context, sup *supplements.Generator) (*corev1.PersistentVolumeClaim, error) {
	if mock.GetPersistentVolumeClaimFunc == nil {
		panic("DiskServiceMock.GetPersistentVolumeClaimFunc: method is nil but DiskService.GetPersistentVolumeClaim was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sup *supplements.Generator
	}{
		Ctx: ctx,
		Sup: sup,
	}
	mock.lockGetPersistentVolumeClaim.Lock()
	mock.calls.GetPersistentVolumeClaim = append(mock.calls.GetPersistentVolumeClaim, callInfo)
	mock.lockGetPersistentVolumeClaim.Unlock()
	return mock.GetPersistentVolumeClaimFunc(ctx, sup)
}

// GetPersistentVolumeClaimCalls gets all the calls that were made to GetPersistentVolumeClaim.
// Check the length with:
//
//	len(mockedDiskService.GetPersistentVolumeClaimCalls())
func (mock *DiskServiceMock) GetPersistentVolumeClaimCalls() []struct {
	Ctx context.Context
	Sup *supplements.Generator
} {
	var calls []struct {
		Ctx context.Context
		Sup *supplements.Generator
	}
	mock.lockGetPersistentVolumeClaim.RLock()
	calls = mock.calls.GetPersistentVolumeClaim
	mock.lockGetPersistentVolumeClaim.RUnlock()
	return calls
}

// GetStorageClass calls GetStorageClassFunc.
func (mock *DiskServiceMock) GetStorageClass(ctx context.Context, storageClassName *string) (*storagev1.StorageClass, error) {
	if mock.GetStorageClassFunc == nil {
		panic("DiskServiceMock.GetStorageClassFunc: method is nil but DiskService.GetStorageClass was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		StorageClassName *string
	}{
		Ctx:              ctx,
		StorageClassName: storageClassName,
	}
	mock.lockGetStorageClass.Lock()
	mock.calls.GetStorageClass = append(mock.calls.GetStorageClass, callInfo)
	mock.lockGetStorageClass.Unlock()
	return mock.GetStorageClassFunc(ctx, storageClassName)
}

// GetStorageClassCalls gets all the calls that were made to GetStorageClass.
// Check the length with:
//
//	len(mockedDiskService.GetStorageClassCalls())
func (mock *DiskServiceMock) GetStorageClassCalls() []struct {
	Ctx              context.Context
	StorageClassName *string
} {
	var calls []struct {
		Ctx              context.Context
		StorageClassName *string
	}
	mock.lockGetStorageClass.RLock()
	calls = mock.calls.GetStorageClass
	mock.lockGetStorageClass.RUnlock()
	return calls
}

// Ensure, that SourcesMock does implement Sources.
// If this is not the case, regenerate this file with moq.
var _ Sources = &SourcesMock{}

// SourcesMock is a mock implementation of Sources.
//
//	func TestSomethingThatUsesSources(t *testing.T) {
//
//		// make and configure a mocked Sources
//		mockedSources := &SourcesMock{
//			ChangedFunc: func(ctx context.Context, vi *virtv2.VirtualImage) bool {
//				panic("mock out the Changed method")
//			},
//			CleanUpFunc: func(ctx context.Context, vd *virtv2.VirtualImage) (bool, error) {
//				panic("mock out the CleanUp method")
//			},
//			ForFunc: func(dsType virtv2.DataSourceType) (source.Handler, bool) {
//				panic("mock out the For method")
//			},
//		}
//
//		// use mockedSources in code that requires Sources
//		// and then make assertions.
//
//	}
type SourcesMock struct {
	// ChangedFunc mocks the Changed method.
	ChangedFunc func(ctx context.Context, vi *virtv2.VirtualImage) bool

	// CleanUpFunc mocks the CleanUp method.
	CleanUpFunc func(ctx context.Context, vd *virtv2.VirtualImage) (bool, error)

	// ForFunc mocks the For method.
	ForFunc func(dsType virtv2.DataSourceType) (source.Handler, bool)

	// calls tracks calls to the methods.
	calls struct {
		// Changed holds details about calls to the Changed method.
		Changed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Vi is the vi argument value.
			Vi *virtv2.VirtualImage
		}
		// CleanUp holds details about calls to the CleanUp method.
		CleanUp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Vd is the vd argument value.
			Vd *virtv2.VirtualImage
		}
		// For holds details about calls to the For method.
		For []struct {
			// DsType is the dsType argument value.
			DsType virtv2.DataSourceType
		}
	}
	lockChanged sync.RWMutex
	lockCleanUp sync.RWMutex
	lockFor     sync.RWMutex
}

// Changed calls ChangedFunc.
func (mock *SourcesMock) Changed(ctx context.Context, vi *virtv2.VirtualImage) bool {
	if mock.ChangedFunc == nil {
		panic("SourcesMock.ChangedFunc: method is nil but Sources.Changed was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Vi  *virtv2.VirtualImage
	}{
		Ctx: ctx,
		Vi:  vi,
	}
	mock.lockChanged.Lock()
	mock.calls.Changed = append(mock.calls.Changed, callInfo)
	mock.lockChanged.Unlock()
	return mock.ChangedFunc(ctx, vi)
}

// ChangedCalls gets all the calls that were made to Changed.
// Check the length with:
//
//	len(mockedSources.ChangedCalls())
func (mock *SourcesMock) ChangedCalls() []struct {
	Ctx context.Context
	Vi  *virtv2.VirtualImage
} {
	var calls []struct {
		Ctx context.Context
		Vi  *virtv2.VirtualImage
	}
	mock.lockChanged.RLock()
	calls = mock.calls.Changed
	mock.lockChanged.RUnlock()
	return calls
}

// CleanUp calls CleanUpFunc.
func (mock *SourcesMock) CleanUp(ctx context.Context, vd *virtv2.VirtualImage) (bool, error) {
	if mock.CleanUpFunc == nil {
		panic("SourcesMock.CleanUpFunc: method is nil but Sources.CleanUp was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Vd  *virtv2.VirtualImage
	}{
		Ctx: ctx,
		Vd:  vd,
	}
	mock.lockCleanUp.Lock()
	mock.calls.CleanUp = append(mock.calls.CleanUp, callInfo)
	mock.lockCleanUp.Unlock()
	return mock.CleanUpFunc(ctx, vd)
}

// CleanUpCalls gets all the calls that were made to CleanUp.
// Check the length with:
//
//	len(mockedSources.CleanUpCalls())
func (mock *SourcesMock) CleanUpCalls() []struct {
	Ctx context.Context
	Vd  *virtv2.VirtualImage
} {
	var calls []struct {
		Ctx context.Context
		Vd  *virtv2.VirtualImage
	}
	mock.lockCleanUp.RLock()
	calls = mock.calls.CleanUp
	mock.lockCleanUp.RUnlock()
	return calls
}

// For calls ForFunc.
func (mock *SourcesMock) For(dsType virtv2.DataSourceType) (source.Handler, bool) {
	if mock.ForFunc == nil {
		panic("SourcesMock.ForFunc: method is nil but Sources.For was just called")
	}
	callInfo := struct {
		DsType virtv2.DataSourceType
	}{
		DsType: dsType,
	}
	mock.lockFor.Lock()
	mock.calls.For = append(mock.calls.For, callInfo)
	mock.lockFor.Unlock()
	return mock.ForFunc(dsType)
}

// ForCalls gets all the calls that were made to For.
// Check the length with:
//
//	len(mockedSources.ForCalls())
func (mock *SourcesMock) ForCalls() []struct {
	DsType virtv2.DataSourceType
} {
	var calls []struct {
		DsType virtv2.DataSourceType
	}
	mock.lockFor.RLock()
	calls = mock.calls.For
	mock.lockFor.RUnlock()
	return calls
}

// Ensure, that StorageClassServiceMock does implement StorageClassService.
// If this is not the case, regenerate this file with moq.
var _ StorageClassService = &StorageClassServiceMock{}

// StorageClassServiceMock is a mock implementation of StorageClassService.
//
//	func TestSomethingThatUsesStorageClassService(t *testing.T) {
//
//		// make and configure a mocked StorageClassService
//		mockedStorageClassService := &StorageClassServiceMock{
//			GetDefaultStorageClassFunc: func(ctx context.Context) (*storagev1.StorageClass, error) {
//				panic("mock out the GetDefaultStorageClass method")
//			},
//			GetModuleStorageClassFunc: func(ctx context.Context) (*storagev1.StorageClass, error) {
//				panic("mock out the GetModuleStorageClass method")
//			},
//			GetPersistentVolumeClaimFunc: func(ctx context.Context, sup *supplements.Generator) (*corev1.PersistentVolumeClaim, error) {
//				panic("mock out the GetPersistentVolumeClaim method")
//			},
//			GetStorageClassFunc: func(ctx context.Context, sc string) (*storagev1.StorageClass, error) {
//				panic("mock out the GetStorageClass method")
//			},
//			GetStorageProfileFunc: func(ctx context.Context, name string) (*cdiv1.StorageProfile, error) {
//				panic("mock out the GetStorageProfile method")
//			},
//			IsStorageClassAllowedFunc: func(sc string) bool {
//				panic("mock out the IsStorageClassAllowed method")
//			},
//			IsStorageClassDeprecatedFunc: func(sc *storagev1.StorageClass) bool {
//				panic("mock out the IsStorageClassDeprecated method")
//			},
//			ValidateClaimPropertySetsFunc: func(sp *cdiv1.StorageProfile) error {
//				panic("mock out the ValidateClaimPropertySets method")
//			},
//		}
//
//		// use mockedStorageClassService in code that requires StorageClassService
//		// and then make assertions.
//
//	}
type StorageClassServiceMock struct {
	// GetDefaultStorageClassFunc mocks the GetDefaultStorageClass method.
	GetDefaultStorageClassFunc func(ctx context.Context) (*storagev1.StorageClass, error)

	// GetModuleStorageClassFunc mocks the GetModuleStorageClass method.
	GetModuleStorageClassFunc func(ctx context.Context) (*storagev1.StorageClass, error)

	// GetPersistentVolumeClaimFunc mocks the GetPersistentVolumeClaim method.
	GetPersistentVolumeClaimFunc func(ctx context.Context, sup *supplements.Generator) (*corev1.PersistentVolumeClaim, error)

	// GetStorageClassFunc mocks the GetStorageClass method.
	GetStorageClassFunc func(ctx context.Context, sc string) (*storagev1.StorageClass, error)

	// GetStorageProfileFunc mocks the GetStorageProfile method.
	GetStorageProfileFunc func(ctx context.Context, name string) (*cdiv1.StorageProfile, error)

	// IsStorageClassAllowedFunc mocks the IsStorageClassAllowed method.
	IsStorageClassAllowedFunc func(sc string) bool

	// IsStorageClassDeprecatedFunc mocks the IsStorageClassDeprecated method.
	IsStorageClassDeprecatedFunc func(sc *storagev1.StorageClass) bool

	// ValidateClaimPropertySetsFunc mocks the ValidateClaimPropertySets method.
	ValidateClaimPropertySetsFunc func(sp *cdiv1.StorageProfile) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDefaultStorageClass holds details about calls to the GetDefaultStorageClass method.
		GetDefaultStorageClass []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetModuleStorageClass holds details about calls to the GetModuleStorageClass method.
		GetModuleStorageClass []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetPersistentVolumeClaim holds details about calls to the GetPersistentVolumeClaim method.
		GetPersistentVolumeClaim []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sup is the sup argument value.
			Sup *supplements.Generator
		}
		// GetStorageClass holds details about calls to the GetStorageClass method.
		GetStorageClass []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sc is the sc argument value.
			Sc string
		}
		// GetStorageProfile holds details about calls to the GetStorageProfile method.
		GetStorageProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// IsStorageClassAllowed holds details about calls to the IsStorageClassAllowed method.
		IsStorageClassAllowed []struct {
			// Sc is the sc argument value.
			Sc string
		}
		// IsStorageClassDeprecated holds details about calls to the IsStorageClassDeprecated method.
		IsStorageClassDeprecated []struct {
			// Sc is the sc argument value.
			Sc *storagev1.StorageClass
		}
		// ValidateClaimPropertySets holds details about calls to the ValidateClaimPropertySets method.
		ValidateClaimPropertySets []struct {
			// Sp is the sp argument value.
			Sp *cdiv1.StorageProfile
		}
	}
	lockGetDefaultStorageClass    sync.RWMutex
	lockGetModuleStorageClass     sync.RWMutex
	lockGetPersistentVolumeClaim  sync.RWMutex
	lockGetStorageClass           sync.RWMutex
	lockGetStorageProfile         sync.RWMutex
	lockIsStorageClassAllowed     sync.RWMutex
	lockIsStorageClassDeprecated  sync.RWMutex
	lockValidateClaimPropertySets sync.RWMutex
}

// GetDefaultStorageClass calls GetDefaultStorageClassFunc.
func (mock *StorageClassServiceMock) GetDefaultStorageClass(ctx context.Context) (*storagev1.StorageClass, error) {
	if mock.GetDefaultStorageClassFunc == nil {
		panic("StorageClassServiceMock.GetDefaultStorageClassFunc: method is nil but StorageClassService.GetDefaultStorageClass was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetDefaultStorageClass.Lock()
	mock.calls.GetDefaultStorageClass = append(mock.calls.GetDefaultStorageClass, callInfo)
	mock.lockGetDefaultStorageClass.Unlock()
	return mock.GetDefaultStorageClassFunc(ctx)
}

// GetDefaultStorageClassCalls gets all the calls that were made to GetDefaultStorageClass.
// Check the length with:
//
//	len(mockedStorageClassService.GetDefaultStorageClassCalls())
func (mock *StorageClassServiceMock) GetDefaultStorageClassCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetDefaultStorageClass.RLock()
	calls = mock.calls.GetDefaultStorageClass
	mock.lockGetDefaultStorageClass.RUnlock()
	return calls
}

// GetModuleStorageClass calls GetModuleStorageClassFunc.
func (mock *StorageClassServiceMock) GetModuleStorageClass(ctx context.Context) (*storagev1.StorageClass, error) {
	if mock.GetModuleStorageClassFunc == nil {
		panic("StorageClassServiceMock.GetModuleStorageClassFunc: method is nil but StorageClassService.GetModuleStorageClass was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetModuleStorageClass.Lock()
	mock.calls.GetModuleStorageClass = append(mock.calls.GetModuleStorageClass, callInfo)
	mock.lockGetModuleStorageClass.Unlock()
	return mock.GetModuleStorageClassFunc(ctx)
}

// GetModuleStorageClassCalls gets all the calls that were made to GetModuleStorageClass.
// Check the length with:
//
//	len(mockedStorageClassService.GetModuleStorageClassCalls())
func (mock *StorageClassServiceMock) GetModuleStorageClassCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetModuleStorageClass.RLock()
	calls = mock.calls.GetModuleStorageClass
	mock.lockGetModuleStorageClass.RUnlock()
	return calls
}

// GetPersistentVolumeClaim calls GetPersistentVolumeClaimFunc.
func (mock *StorageClassServiceMock) GetPersistentVolumeClaim(ctx context.Context, sup *supplements.Generator) (*corev1.PersistentVolumeClaim, error) {
	if mock.GetPersistentVolumeClaimFunc == nil {
		panic("StorageClassServiceMock.GetPersistentVolumeClaimFunc: method is nil but StorageClassService.GetPersistentVolumeClaim was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sup *supplements.Generator
	}{
		Ctx: ctx,
		Sup: sup,
	}
	mock.lockGetPersistentVolumeClaim.Lock()
	mock.calls.GetPersistentVolumeClaim = append(mock.calls.GetPersistentVolumeClaim, callInfo)
	mock.lockGetPersistentVolumeClaim.Unlock()
	return mock.GetPersistentVolumeClaimFunc(ctx, sup)
}

// GetPersistentVolumeClaimCalls gets all the calls that were made to GetPersistentVolumeClaim.
// Check the length with:
//
//	len(mockedStorageClassService.GetPersistentVolumeClaimCalls())
func (mock *StorageClassServiceMock) GetPersistentVolumeClaimCalls() []struct {
	Ctx context.Context
	Sup *supplements.Generator
} {
	var calls []struct {
		Ctx context.Context
		Sup *supplements.Generator
	}
	mock.lockGetPersistentVolumeClaim.RLock()
	calls = mock.calls.GetPersistentVolumeClaim
	mock.lockGetPersistentVolumeClaim.RUnlock()
	return calls
}

// GetStorageClass calls GetStorageClassFunc.
func (mock *StorageClassServiceMock) GetStorageClass(ctx context.Context, sc string) (*storagev1.StorageClass, error) {
	if mock.GetStorageClassFunc == nil {
		panic("StorageClassServiceMock.GetStorageClassFunc: method is nil but StorageClassService.GetStorageClass was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sc  string
	}{
		Ctx: ctx,
		Sc:  sc,
	}
	mock.lockGetStorageClass.Lock()
	mock.calls.GetStorageClass = append(mock.calls.GetStorageClass, callInfo)
	mock.lockGetStorageClass.Unlock()
	return mock.GetStorageClassFunc(ctx, sc)
}

// GetStorageClassCalls gets all the calls that were made to GetStorageClass.
// Check the length with:
//
//	len(mockedStorageClassService.GetStorageClassCalls())
func (mock *StorageClassServiceMock) GetStorageClassCalls() []struct {
	Ctx context.Context
	Sc  string
} {
	var calls []struct {
		Ctx context.Context
		Sc  string
	}
	mock.lockGetStorageClass.RLock()
	calls = mock.calls.GetStorageClass
	mock.lockGetStorageClass.RUnlock()
	return calls
}

// GetStorageProfile calls GetStorageProfileFunc.
func (mock *StorageClassServiceMock) GetStorageProfile(ctx context.Context, name string) (*cdiv1.StorageProfile, error) {
	if mock.GetStorageProfileFunc == nil {
		panic("StorageClassServiceMock.GetStorageProfileFunc: method is nil but StorageClassService.GetStorageProfile was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetStorageProfile.Lock()
	mock.calls.GetStorageProfile = append(mock.calls.GetStorageProfile, callInfo)
	mock.lockGetStorageProfile.Unlock()
	return mock.GetStorageProfileFunc(ctx, name)
}

// GetStorageProfileCalls gets all the calls that were made to GetStorageProfile.
// Check the length with:
//
//	len(mockedStorageClassService.GetStorageProfileCalls())
func (mock *StorageClassServiceMock) GetStorageProfileCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetStorageProfile.RLock()
	calls = mock.calls.GetStorageProfile
	mock.lockGetStorageProfile.RUnlock()
	return calls
}

// IsStorageClassAllowed calls IsStorageClassAllowedFunc.
func (mock *StorageClassServiceMock) IsStorageClassAllowed(sc string) bool {
	if mock.IsStorageClassAllowedFunc == nil {
		panic("StorageClassServiceMock.IsStorageClassAllowedFunc: method is nil but StorageClassService.IsStorageClassAllowed was just called")
	}
	callInfo := struct {
		Sc string
	}{
		Sc: sc,
	}
	mock.lockIsStorageClassAllowed.Lock()
	mock.calls.IsStorageClassAllowed = append(mock.calls.IsStorageClassAllowed, callInfo)
	mock.lockIsStorageClassAllowed.Unlock()
	return mock.IsStorageClassAllowedFunc(sc)
}

// IsStorageClassAllowedCalls gets all the calls that were made to IsStorageClassAllowed.
// Check the length with:
//
//	len(mockedStorageClassService.IsStorageClassAllowedCalls())
func (mock *StorageClassServiceMock) IsStorageClassAllowedCalls() []struct {
	Sc string
} {
	var calls []struct {
		Sc string
	}
	mock.lockIsStorageClassAllowed.RLock()
	calls = mock.calls.IsStorageClassAllowed
	mock.lockIsStorageClassAllowed.RUnlock()
	return calls
}

// IsStorageClassDeprecated calls IsStorageClassDeprecatedFunc.
func (mock *StorageClassServiceMock) IsStorageClassDeprecated(sc *storagev1.StorageClass) bool {
	if mock.IsStorageClassDeprecatedFunc == nil {
		panic("StorageClassServiceMock.IsStorageClassDeprecatedFunc: method is nil but StorageClassService.IsStorageClassDeprecated was just called")
	}
	callInfo := struct {
		Sc *storagev1.StorageClass
	}{
		Sc: sc,
	}
	mock.lockIsStorageClassDeprecated.Lock()
	mock.calls.IsStorageClassDeprecated = append(mock.calls.IsStorageClassDeprecated, callInfo)
	mock.lockIsStorageClassDeprecated.Unlock()
	return mock.IsStorageClassDeprecatedFunc(sc)
}

// IsStorageClassDeprecatedCalls gets all the calls that were made to IsStorageClassDeprecated.
// Check the length with:
//
//	len(mockedStorageClassService.IsStorageClassDeprecatedCalls())
func (mock *StorageClassServiceMock) IsStorageClassDeprecatedCalls() []struct {
	Sc *storagev1.StorageClass
} {
	var calls []struct {
		Sc *storagev1.StorageClass
	}
	mock.lockIsStorageClassDeprecated.RLock()
	calls = mock.calls.IsStorageClassDeprecated
	mock.lockIsStorageClassDeprecated.RUnlock()
	return calls
}

// ValidateClaimPropertySets calls ValidateClaimPropertySetsFunc.
func (mock *StorageClassServiceMock) ValidateClaimPropertySets(sp *cdiv1.StorageProfile) error {
	if mock.ValidateClaimPropertySetsFunc == nil {
		panic("StorageClassServiceMock.ValidateClaimPropertySetsFunc: method is nil but StorageClassService.ValidateClaimPropertySets was just called")
	}
	callInfo := struct {
		Sp *cdiv1.StorageProfile
	}{
		Sp: sp,
	}
	mock.lockValidateClaimPropertySets.Lock()
	mock.calls.ValidateClaimPropertySets = append(mock.calls.ValidateClaimPropertySets, callInfo)
	mock.lockValidateClaimPropertySets.Unlock()
	return mock.ValidateClaimPropertySetsFunc(sp)
}

// ValidateClaimPropertySetsCalls gets all the calls that were made to ValidateClaimPropertySets.
// Check the length with:
//
//	len(mockedStorageClassService.ValidateClaimPropertySetsCalls())
func (mock *StorageClassServiceMock) ValidateClaimPropertySetsCalls() []struct {
	Sp *cdiv1.StorageProfile
} {
	var calls []struct {
		Sp *cdiv1.StorageProfile
	}
	mock.lockValidateClaimPropertySets.RLock()
	calls = mock.calls.ValidateClaimPropertySets
	mock.lockValidateClaimPropertySets.RUnlock()
	return calls
}
