diff --git a/cmd/cdi-controller/controller.go b/cmd/cdi-controller/controller.go
index 5a43020c9..06c3f7117 100644
--- a/cmd/cdi-controller/controller.go
+++ b/cmd/cdi-controller/controller.go
@@ -111,9 +111,9 @@ func init() {
 	}
 	importerImage = getRequiredEnvVar("IMPORTER_IMAGE")
 	clonerImage = getRequiredEnvVar("CLONER_IMAGE")
-	uploadServerImage = getRequiredEnvVar("UPLOADSERVER_IMAGE")
+	// uploadServerImage = getRequiredEnvVar("UPLOADSERVER_IMAGE")
 	ovirtPopulatorImage = getRequiredEnvVar("OVIRT_POPULATOR_IMAGE")
-	uploadProxyServiceName = getRequiredEnvVar("UPLOADPROXY_SERVICE")
+	// uploadProxyServiceName = getRequiredEnvVar("UPLOADPROXY_SERVICE")
 	installerLabels = map[string]string{}
 
 	pullPolicy = common.DefaultPullPolicy
@@ -204,7 +204,7 @@ func start() {
 		LeaderElectionResourceLock: "leases",
 		Cache:                      getCacheOptions(apiClient, namespace),
 		Scheme:                     scheme,
-		Metrics:                    metricsserver.Options{
+		Metrics: metricsserver.Options{
 			BindAddress: metricsBindAddress,
 		},
 	}
diff --git a/pkg/operator/resources/cluster/factory.go b/pkg/operator/resources/cluster/factory.go
index 0155b9ca7..ea92568c0 100644
--- a/pkg/operator/resources/cluster/factory.go
+++ b/pkg/operator/resources/cluster/factory.go
@@ -41,12 +41,12 @@ type factoryFunc func(*FactoryArgs) []client.Object
 type factoryFuncMap map[string]factoryFunc
 
 var staticFactoryFunctions = factoryFuncMap{
-	"apiserver-rbac":   createStaticAPIServerResources,
-	"controller-rbac":  createControllerResources,
-	"crd-resources":    createCRDResources,
-	"uploadproxy-rbac": createUploadProxyResources,
-	"cronjob-rbac":     createCronJobResources,
-	"aggregate-roles":  createAggregateClusterRoles,
+	"apiserver-rbac":  createStaticAPIServerResources,
+	"controller-rbac": createControllerResources,
+	"crd-resources":   createCRDResources,
+	// "uploadproxy-rbac": createUploadProxyResources,
+	"cronjob-rbac":    createCronJobResources,
+	"aggregate-roles": createAggregateClusterRoles,
 }
 
 var dynamicFactoryFunctions = factoryFuncMap{
@@ -117,7 +117,7 @@ func createResourceGroup(funcMap factoryFuncMap, group string, args *FactoryArgs
 func GetClusterRolePolicyRules() []rbacv1.PolicyRule {
 	result := getAPIServerClusterPolicyRules()
 	result = append(result, getControllerClusterPolicyRules()...)
-	result = append(result, getUploadProxyClusterPolicyRules()...)
+	// result = append(result, getUploadProxyClusterPolicyRules()...)
 	result = append(result, getCronJobClusterPolicyRules()...)
 	return result
 }
diff --git a/pkg/operator/resources/namespaced/factory.go b/pkg/operator/resources/namespaced/factory.go
index 7faec9016..1e0c79f6d 100644
--- a/pkg/operator/resources/namespaced/factory.go
+++ b/pkg/operator/resources/namespaced/factory.go
@@ -38,8 +38,8 @@ type FactoryArgs struct {
 	ClonerImage            string `required:"true" split_words:"true"`
 	OvirtPopulatorImage    string `required:"true" split_words:"true"`
 	APIServerImage         string `required:"true" envconfig:"apiserver_image"`
-	UploadProxyImage       string `required:"true" split_words:"true"`
-	UploadServerImage      string `required:"true" split_words:"true"`
+	UploadProxyImage       string `required:"false" split_words:"true"`
+	UploadServerImage      string `required:"false" split_words:"true"`
 	Verbosity              string `required:"true"`
 	PullPolicy             string `required:"true" split_words:"true"`
 	ImagePullSecrets       []corev1.LocalObjectReference
@@ -59,10 +59,10 @@ type namespaceHaver interface {
 }
 
 var factoryFunctions = map[string]factoryFunc{
-	"apiserver":   createAPIServerResources,
-	"controller":  createControllerResources,
-	"uploadproxy": createUploadProxyResources,
-	"cronjob":     createCronJobResources,
+	"apiserver":  createAPIServerResources,
+	"controller": createControllerResources,
+	// "uploadproxy": createUploadProxyResources,
+	"cronjob": createCronJobResources,
 }
 
 // CreateAllResources creates all namespaced resources
@@ -107,7 +107,7 @@ func assignNamspaceIfMissing(resource client.Object, namespace string) {
 func GetRolePolicyRules() []rbacv1.PolicyRule {
 	result := getAPIServerNamespacedRules()
 	result = append(result, getControllerNamespacedRules()...)
-	result = append(result, getUploadProxyNamespacedRules()...)
+	// result = append(result, getUploadProxyNamespacedRules()...)
 	result = append(result, GetPrometheusNamespacedRules()...)
 	return result
 }
