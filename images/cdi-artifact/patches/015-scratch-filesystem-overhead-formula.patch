diff --git a/pkg/controller/util.go b/pkg/controller/util.go
index 81e050464..4d25ae36b 100644
--- a/pkg/controller/util.go
+++ b/pkg/controller/util.go
@@ -38,6 +38,7 @@ import (
 	"sigs.k8s.io/controller-runtime/pkg/client"
 
 	cdiv1 "kubevirt.io/containerized-data-importer-api/pkg/apis/core/v1beta1"
+
 	"kubevirt.io/containerized-data-importer/pkg/common"
 	cc "kubevirt.io/containerized-data-importer/pkg/controller/common"
 	"kubevirt.io/containerized-data-importer/pkg/util"
@@ -173,10 +174,14 @@ func createScratchPersistentVolumeClaim(client client.Client, pvc *corev1.Persis
 	scratchPvcSpec := newScratchPersistentVolumeClaimSpec(pvc, pod, name, storageClassName)
 
 	sizeRequest := pvc.Spec.Resources.Requests[corev1.ResourceStorage]
-	scratchFsOverhead, err := GetFilesystemOverhead(context.TODO(), client, scratchPvcSpec)
+
+	scratchFsOverhead, err := getScratchFilesystemOverhead(sizeRequest)
 	if err != nil {
-		return nil, errors.Wrap(err, "failed to get filesystem overhead for scratch PVC")
+		return nil, errors.Wrap(err, "failed to get scratch filesystem overhead")
 	}
+
+	klog.V(1).Info("Use scratch filesystem overhead", "scratchFsOverhead", scratchFsOverhead, "sizeRequest", sizeRequest)
+
 	scratchFsOverheadFloat, _ := strconv.ParseFloat(string(scratchFsOverhead), 64)
 	pvcFsOverhead, err := GetFilesystemOverhead(context.TODO(), client, pvc)
 	if err != nil {
@@ -207,6 +212,44 @@ func createScratchPersistentVolumeClaim(client client.Client, pvc *corev1.Persis
 	return scratchPvc, nil
 }
 
+var (
+	rate24Mi   = resource.MustParse("24Mi")
+	rate512Mi  = resource.MustParse("512Mi")
+	rate4096Mi = resource.MustParse("4096Mi")
+)
+
+// getScratchFilesystemOverhead returns filesystem overhead for Scratch PVC.
+//
+// CDI always requests scratch space with a Filesystem volume mode, regardless of the volume mode of the related
+// DataVolume. An additional overhead space should be reserved for the Filesystem volume.
+//
+// By default, this overhead is taken from the CDI Config and is not dynamically updated based on the target PVC size.
+// As a result, the target PVC size with the overhead from the CDI Config may be insufficient to successfully complete
+// PVC creation.
+//
+// To address this, since there is no strict formula for ext4 filesystem overhead, empirical estimates of the filesystem
+// overhead were provided based on the target PVC size:
+//
+// return 0 for target PVC size == 0
+// add 40% for target PVC size < 24Mi
+// add 25% for target PVC size < 512Mi
+// add 15% for target PVC size < 4096Mi
+// add 10% for target PVC size >= 4096Mi
+func getScratchFilesystemOverhead(pvcSize resource.Quantity) (cdiv1.Percent, error) {
+	switch {
+	case pvcSize.IsZero():
+		return "", errors.New("got zero pvc size")
+	case pvcSize.Cmp(rate24Mi) == -1:
+		return "0.4", nil
+	case pvcSize.Cmp(rate512Mi) == -1:
+		return "0.25", nil
+	case pvcSize.Cmp(rate4096Mi) == -1:
+		return "0.15", nil
+	default:
+		return "0.1", nil
+	}
+}
+
 // GetFilesystemOverhead determines the filesystem overhead defined in CDIConfig for this PVC's volumeMode and storageClass.
 func GetFilesystemOverhead(ctx context.Context, client client.Client, pvc *corev1.PersistentVolumeClaim) (cdiv1.Percent, error) {
 	if cc.GetVolumeMode(pvc) != corev1.PersistentVolumeFilesystem {
diff --git a/pkg/controller/util_test.go b/pkg/controller/util_test.go
index 31a2f148d..d1a73ced3 100644
--- a/pkg/controller/util_test.go
+++ b/pkg/controller/util_test.go
@@ -19,10 +19,11 @@ import (
 	logf "sigs.k8s.io/controller-runtime/pkg/log"
 
 	cdiv1 "kubevirt.io/containerized-data-importer-api/pkg/apis/core/v1beta1"
+	sdkapi "kubevirt.io/controller-lifecycle-operator-sdk/api"
+
 	"kubevirt.io/containerized-data-importer/pkg/common"
 	. "kubevirt.io/containerized-data-importer/pkg/controller/common"
 	"kubevirt.io/containerized-data-importer/pkg/util/cert"
-	sdkapi "kubevirt.io/controller-lifecycle-operator-sdk/api"
 )
 
 var (
@@ -429,20 +430,19 @@ var _ = Describe("check PVC", func() {
 })
 
 var _ = Describe("createScratchPersistentVolumeClaim", func() {
-	DescribeTable("Should create a scratch PVC of the correct size, taking fs overhead into account", func(scratchOverhead, scOverhead cdiv1.Percent, expectedValue int64) {
+	DescribeTable("Should create a scratch PVC of the correct size, taking fs overhead into account", func(pvcSize string, scOverhead cdiv1.Percent, expectedValue int64) {
 		cdiConfig := createCDIConfigWithStorageClass(common.ConfigName, scratchStorageClassName)
 		cdiConfig.Status.FilesystemOverhead = &cdiv1.FilesystemOverhead{
 			Global: "0.05",
 			StorageClass: map[string]cdiv1.Percent{
-				scratchStorageClassName: scratchOverhead,
-				storageClassName:        scOverhead,
+				storageClassName: scOverhead,
 			},
 		}
 		cl := CreateClient(cdiConfig, CreateStorageClass(scratchStorageClassName, nil), CreateStorageClass(storageClassName, nil))
 		rec := record.NewFakeRecorder(10)
 		By("Create a 1Gi pvc")
 		testPvc := CreatePvcInStorageClass("testPvc", "default", ptr.To[string](storageClassName), nil, nil, v1.ClaimBound)
-		testPvc.Spec.Resources.Requests[v1.ResourceStorage] = resource.MustParse("1Gi")
+		testPvc.Spec.Resources.Requests[v1.ResourceStorage] = resource.MustParse(pvcSize)
 		name := "test-scratchspace-pvc"
 		pod := &v1.Pod{}
 		res, err := createScratchPersistentVolumeClaim(cl, testPvc, pod, name, scratchStorageClassName, nil, rec)
@@ -451,11 +451,11 @@ var _ = Describe("createScratchPersistentVolumeClaim", func() {
 		Expect(res.Spec.Resources).ToNot(BeNil())
 		Expect(res.Spec.Resources.Requests.Storage()).ToNot(BeNil())
 		scratchPVCSize := *res.Spec.Resources.Requests.Storage()
-		Expect(scratchPVCSize.Value()).To(Equal(expectedValue * 1024 * 1024))
+		Expect(scratchPVCSize.Value()).To(Equal(expectedValue))
 	},
-		Entry("same scratch and storage class overhead", cdiv1.Percent("0.03"), cdiv1.Percent("0.03"), int64(1024)),
-		Entry("scratch  > storage class overhead", cdiv1.Percent("0.1"), cdiv1.Percent("0.03"), int64(1104)),
-		Entry("scratch  < storage class overhead", cdiv1.Percent("0.03"), cdiv1.Percent("0.1"), int64(950)),
+		Entry("same scratch and storage class overhead", "5Gi", cdiv1.Percent("0.1"), int64(5368709120)),
+		Entry("scratch  > storage class overhead", "10Mi", cdiv1.Percent("0.1"), int64(15728640)),
+		Entry("scratch  < storage class overhead", "5Gi", cdiv1.Percent("0.3"), int64(4176478208)),
 	)
 
 	It("Should calculate the correct size for a scratch PVC from a block volume", func() {
@@ -477,10 +477,73 @@ var _ = Describe("createScratchPersistentVolumeClaim", func() {
 		Expect(res.Spec.Resources).ToNot(BeNil())
 		Expect(res.Spec.Resources.Requests.Storage()).ToNot(BeNil())
 		scratchPVCSize := *res.Spec.Resources.Requests.Storage()
-		Expect(scratchPVCSize.Value()).To(Equal(int64(1078 * 1024 * 1024)))
+		Expect(scratchPVCSize.Value()).To(Equal(int64(1263534080)))
 	})
 })
 
+var _ = Describe("getScratchFilesystemOverhead", func() {
+	var err error
+	var percent cdiv1.Percent
+
+	type testCase struct {
+		name      string
+		pvcSize   resource.Quantity
+		expected  cdiv1.Percent
+		expectErr bool
+	}
+
+	cases := []testCase{
+		{
+			name:      "zero pvc size",
+			pvcSize:   resource.MustParse("0Mi"),
+			expectErr: true,
+		},
+		{
+			name:     "< 24Mi",
+			pvcSize:  resource.MustParse("10Mi"),
+			expected: "0.4",
+		},
+		{
+			name:     "< 512Mi",
+			pvcSize:  resource.MustParse("100Mi"),
+			expected: "0.25",
+		},
+		{
+			name:     "< 4096Mi",
+			pvcSize:  resource.MustParse("1Gi"),
+			expected: "0.15",
+		},
+		{
+			name:     ">= 4096Mi",
+			pvcSize:  resource.MustParse("5Gi"),
+			expected: "0.1",
+		},
+	}
+
+	for _, tc := range cases {
+		tc := tc
+		When(fmt.Sprintf("testing case %q with pvc size %v", tc.name, tc.pvcSize), func() {
+			BeforeEach(func() {
+				percent, err = getScratchFilesystemOverhead(tc.pvcSize)
+			})
+
+			if tc.expectErr {
+				It("should return an error", func() {
+					Expect(err).To(HaveOccurred())
+				})
+			} else {
+				It("should not return an error", func() {
+					Expect(err).NotTo(HaveOccurred())
+				})
+
+				It("should return the expected result "+string(tc.expected), func() {
+					Expect(percent).To(Equal(tc.expected))
+				})
+			}
+		})
+	}
+})
+
 func createDataVolumeWithStorageClass(name, ns, storageClassName string) *cdiv1.DataVolume {
 	return &cdiv1.DataVolume{
 		ObjectMeta: metav1.ObjectMeta{
