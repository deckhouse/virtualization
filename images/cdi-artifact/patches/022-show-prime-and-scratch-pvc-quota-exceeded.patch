diff --git a/pkg/controller/datavolume/controller-base.go b/pkg/controller/datavolume/controller-base.go
index acd09cb94..b856d5e38 100644
--- a/pkg/controller/datavolume/controller-base.go
+++ b/pkg/controller/datavolume/controller-base.go
@@ -55,6 +55,7 @@ import (
 	cloneMetrics "kubevirt.io/containerized-data-importer/pkg/monitoring/metrics/cdi-cloner"
 	metrics "kubevirt.io/containerized-data-importer/pkg/monitoring/metrics/cdi-controller"
 	importMetrics "kubevirt.io/containerized-data-importer/pkg/monitoring/metrics/cdi-importer"
+	patchedDV "kubevirt.io/containerized-data-importer/pkg/patcheddatavolume"
 	"kubevirt.io/containerized-data-importer/pkg/token"
 	"kubevirt.io/containerized-data-importer/pkg/util"
 )
@@ -1035,6 +1036,24 @@ func (r *ReconcilerBase) updateConditions(dataVolume *cdiv1.DataVolume, pvc *cor
 	dataVolume.Status.Conditions = updateBoundCondition(dataVolume.Status.Conditions, pvc, message, reason)
 	dataVolume.Status.Conditions = UpdateReadyCondition(dataVolume.Status.Conditions, readyStatus, message, reason)
 	dataVolume.Status.Conditions = updateRunningCondition(dataVolume.Status.Conditions, anno)
+	patchedDV.CreateDVQuotaIsNotExceededConditionIfNotExists(&dataVolume.Status.Conditions)
+
+	readyCondition := FindConditionByType(cdiv1.DataVolumeReady, dataVolume.Status.Conditions)
+	boundCondition := FindConditionByType(cdiv1.DataVolumeBound, dataVolume.Status.Conditions)
+	runningCondition := FindConditionByType(cdiv1.DataVolumeRunning, dataVolume.Status.Conditions)
+
+	switch {
+	case readyCondition != nil && readyCondition.Reason == cc.ErrExceededQuota:
+		dataVolume.Status.Conditions = patchedDV.UpdateDVQuotaNotExceededCondition(dataVolume.Status.Conditions, corev1.ConditionFalse, fmt.Sprintf("Exceeded quota: %q", readyCondition.Message), patchedDV.QuotaExceededReason)
+	case boundCondition != nil && boundCondition.Reason == cc.ErrExceededQuota:
+		dataVolume.Status.Conditions = patchedDV.UpdateDVQuotaNotExceededCondition(dataVolume.Status.Conditions, corev1.ConditionFalse, fmt.Sprintf("Exceeded quota: %q", readyCondition.Message), patchedDV.QuotaExceededReason)
+	case runningCondition != nil:
+		if runningCondition.Reason == cc.ErrExceededQuota {
+			dataVolume.Status.Conditions = patchedDV.UpdateDVQuotaNotExceededCondition(dataVolume.Status.Conditions, corev1.ConditionFalse, fmt.Sprintf("Exceeded quota: %q", readyCondition.Message), patchedDV.QuotaExceededReason)
+		} else if runningCondition.Status == corev1.ConditionTrue {
+			dataVolume.Status.Conditions = patchedDV.UpdateDVQuotaNotExceededCondition(dataVolume.Status.Conditions, corev1.ConditionTrue, "", patchedDV.QuotaNotExceededReason)
+		}
+	}
 }
 
 func (r *ReconcilerBase) emitConditionEvent(dataVolume *cdiv1.DataVolume, originalCond []cdiv1.DataVolumeCondition) {
diff --git a/pkg/controller/import-controller.go b/pkg/controller/import-controller.go
index 49f1ff898..4ce5c085e 100644
--- a/pkg/controller/import-controller.go
+++ b/pkg/controller/import-controller.go
@@ -34,6 +34,7 @@ import (
 	"kubevirt.io/containerized-data-importer/pkg/common"
 	cc "kubevirt.io/containerized-data-importer/pkg/controller/common"
 	featuregates "kubevirt.io/containerized-data-importer/pkg/feature-gates"
+	patchedDV "kubevirt.io/containerized-data-importer/pkg/patcheddatavolume"
 	"kubevirt.io/containerized-data-importer/pkg/util"
 	"kubevirt.io/containerized-data-importer/pkg/util/naming"
 	sdkapi "kubevirt.io/controller-lifecycle-operator-sdk/api"
@@ -753,6 +754,9 @@ func (r *ImportReconciler) createScratchPvcForPod(pvc *corev1.PersistentVolumeCl
 		// Scratch PVC doesn't exist yet, create it. Determine which storage class to use.
 		_, err = createScratchPersistentVolumeClaim(r.client, pvc, pod, scratchPVCName, storageClassName, r.installerLabels, r.recorder)
 		if err != nil {
+			if strings.Contains(err.Error(), "exceeded quota") {
+				patchedDV.UpdateDVQuotaNotExceededConditionByPVC(r.client, pvc, corev1.ConditionFalse, fmt.Sprintf("Exceeded quota: %q", err.Error()), patchedDV.QuotaExceededReason)
+			}
 			return err
 		}
 		anno[cc.AnnBoundCondition] = "false"
diff --git a/pkg/controller/populators/populator-base.go b/pkg/controller/populators/populator-base.go
index 6c6fd8f8a..9df58c3fd 100644
--- a/pkg/controller/populators/populator-base.go
+++ b/pkg/controller/populators/populator-base.go
@@ -18,7 +18,9 @@ package populators
 
 import (
 	"context"
+	"fmt"
 	"reflect"
+	"strings"
 
 	"github.com/go-logr/logr"
 
@@ -40,6 +42,7 @@ import (
 	"kubevirt.io/containerized-data-importer/pkg/common"
 	cc "kubevirt.io/containerized-data-importer/pkg/controller/common"
 	featuregates "kubevirt.io/containerized-data-importer/pkg/feature-gates"
+	patchedDV "kubevirt.io/containerized-data-importer/pkg/patcheddatavolume"
 	"kubevirt.io/containerized-data-importer/pkg/util"
 )
 
@@ -182,6 +185,11 @@ func (r *ReconcilerBase) createPVCPrime(pvc *corev1.PersistentVolumeClaim, sourc
 		annotations[cc.AnnPodRetainAfterCompletion] = pvc.Annotations[cc.AnnPodRetainAfterCompletion]
 	}
 
+	dvUid, ok := pvc.Annotations[cc.AnnCreatedForDataVolume]
+	if ok {
+		annotations[cc.AnnCreatedForDataVolume] = dvUid
+	}
+
 	// Assemble PVC' spec
 	pvcPrime := &corev1.PersistentVolumeClaim{
 		ObjectMeta: metav1.ObjectMeta{
@@ -213,6 +221,9 @@ func (r *ReconcilerBase) createPVCPrime(pvc *corev1.PersistentVolumeClaim, sourc
 	}
 
 	if err := r.client.Create(context.TODO(), pvcPrime); err != nil {
+		if strings.Contains(err.Error(), "exceeded quota") {
+			patchedDV.UpdateDVQuotaNotExceededConditionByPVC(r.client, pvc, corev1.ConditionFalse, fmt.Sprintf("Exceeded quota: %q", err.Error()), patchedDV.QuotaExceededReason)
+		}
 		return nil, err
 	}
 	r.recorder.Eventf(pvc, corev1.EventTypeNormal, createdPVCPrimeSuccessfully, messageCreatedPVCPrimeSuccessfully)
diff --git a/pkg/controller/upload-controller.go b/pkg/controller/upload-controller.go
index 4c153257a..aaf4f8198 100644
--- a/pkg/controller/upload-controller.go
+++ b/pkg/controller/upload-controller.go
@@ -51,6 +51,7 @@ import (
 	cc "kubevirt.io/containerized-data-importer/pkg/controller/common"
 	featuregates "kubevirt.io/containerized-data-importer/pkg/feature-gates"
 	"kubevirt.io/containerized-data-importer/pkg/operator"
+	patchedDV "kubevirt.io/containerized-data-importer/pkg/patcheddatavolume"
 	"kubevirt.io/containerized-data-importer/pkg/util"
 	"kubevirt.io/containerized-data-importer/pkg/util/cert/fetcher"
 	"kubevirt.io/containerized-data-importer/pkg/util/cert/generator"
@@ -473,6 +474,9 @@ func (r *UploadReconciler) getOrCreateScratchPvc(pvc *corev1.PersistentVolumeCla
 		// Scratch PVC doesn't exist yet, create it.
 		scratchPvc, err = createScratchPersistentVolumeClaim(r.client, pvc, pod, name, storageClassName, map[string]string{}, r.recorder)
 		if err != nil {
+			if strings.Contains(err.Error(), "exceeded quota") {
+				patchedDV.UpdateDVQuotaNotExceededConditionByPVC(r.client, pvc, corev1.ConditionFalse, fmt.Sprintf("Exceeded quota: %q", err.Error()), patchedDV.QuotaExceededReason)
+			}
 			return nil, err
 		}
 	} else {
diff --git a/pkg/patcheddatavolume/patched_datavolume.go b/pkg/patcheddatavolume/patched_datavolume.go
new file mode 100644
index 000000000..3f0b5e605
--- /dev/null
+++ b/pkg/patcheddatavolume/patched_datavolume.go
@@ -0,0 +1,103 @@
+package patcheddatavolume
+
+import (
+	"context"
+
+	corev1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	cdiv1 "kubevirt.io/containerized-data-importer-api/pkg/apis/core/v1beta1"
+	"kubevirt.io/containerized-data-importer/pkg/controller/common"
+	"sigs.k8s.io/controller-runtime/pkg/client"
+)
+
+const (
+	QoutaNotExceededConditionType cdiv1.DataVolumeConditionType = "QuotaNotExceeded"
+
+	QuotaNotExceededReason string = "QuotaNotExceeded"
+	QuotaExceededReason    string = "QuotaExceeded"
+)
+
+func FindConditionByType(conditionType cdiv1.DataVolumeConditionType, conditions []cdiv1.DataVolumeCondition) *cdiv1.DataVolumeCondition {
+	for i, condition := range conditions {
+		if condition.Type == conditionType {
+			return &conditions[i]
+		}
+	}
+	return nil
+}
+
+func updateCondition(conditions []cdiv1.DataVolumeCondition, conditionType cdiv1.DataVolumeConditionType, status corev1.ConditionStatus, message, reason string) []cdiv1.DataVolumeCondition {
+	condition := FindConditionByType(conditionType, conditions)
+	if condition == nil {
+		conditions = append(conditions, cdiv1.DataVolumeCondition{
+			Type: conditionType,
+		})
+		condition = FindConditionByType(conditionType, conditions)
+	}
+	if condition.Status != status {
+		condition.LastTransitionTime = metav1.Now()
+		condition.Message = message
+		condition.Reason = reason
+		condition.LastHeartbeatTime = condition.LastTransitionTime
+	} else if condition.Message != message || condition.Reason != reason {
+		condition.Message = message
+		condition.Reason = reason
+		condition.LastHeartbeatTime = metav1.Now()
+	}
+	condition.Status = status
+	return conditions
+}
+
+func getDVByPVC(clientObject client.Client, pvc *corev1.PersistentVolumeClaim, ann string) *cdiv1.DataVolume {
+	uid, ok := pvc.Annotations[ann]
+	if !ok {
+		return nil
+	}
+
+	var dvList cdiv1.DataVolumeList
+
+	err := clientObject.List(context.TODO(), &dvList, client.InNamespace(pvc.Namespace))
+	if err != nil {
+		return nil
+	}
+
+	if len(dvList.Items) > 0 {
+		for _, dv := range dvList.Items {
+			if string(dv.UID) == uid {
+				return &dv
+			}
+		}
+	}
+
+	return nil
+}
+
+func UpdateDVQuotaNotExceededCondition(conditions []cdiv1.DataVolumeCondition, status corev1.ConditionStatus, message, reason string) []cdiv1.DataVolumeCondition {
+	return updateCondition(conditions, QoutaNotExceededConditionType, status, message, reason)
+}
+
+func UpdateDVQuotaNotExceededConditionByPVC(clientObject client.Client, pvc *corev1.PersistentVolumeClaim, status corev1.ConditionStatus, message, reason string) {
+	dv := getDVByPVC(clientObject, pvc, common.AnnCreatedForDataVolume)
+	if dv == nil {
+		return
+	}
+
+	dv.Status.Conditions = updateCondition(dv.Status.Conditions, QoutaNotExceededConditionType, status, message, reason)
+	_ = clientObject.Status().Update(context.TODO(), dv)
+}
+
+func CreateDVQuotaIsNotExceededConditionIfNotExists(conditions *[]cdiv1.DataVolumeCondition) {
+	if conditions == nil {
+		return
+	}
+
+	condition := FindConditionByType(QoutaNotExceededConditionType, *conditions)
+	if condition == nil {
+		*conditions = append(*conditions, cdiv1.DataVolumeCondition{
+			Type:    QoutaNotExceededConditionType,
+			Status:  corev1.ConditionTrue,
+			Reason:  QuotaNotExceededReason,
+			Message: "",
+		})
+	}
+}
