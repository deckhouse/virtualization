diff --git a/pkg/common/format.go b/pkg/common/format.go
new file mode 100644
index 000000000..06497e582
--- /dev/null
+++ b/pkg/common/format.go
@@ -0,0 +1,22 @@
+package common
+
+import "os"
+
+func GetFormat(path string) (string, error) {
+	const (
+		formatQcow2 = "qcow2"
+		formatRaw   = "raw"
+	)
+	info, err := os.Stat(path)
+	if err != nil {
+		if os.IsNotExist(err) {
+			return formatQcow2, nil
+		}
+		return "", err
+	}
+	mode := info.Mode()
+	if mode&os.ModeDevice != 0 {
+		return formatRaw, nil
+	}
+	return formatQcow2, nil
+}
diff --git a/pkg/image/qemu.go b/pkg/image/qemu.go
index 651fb5fc8..adcfe8824 100644
--- a/pkg/image/qemu.go
+++ b/pkg/image/qemu.go
@@ -61,6 +61,7 @@ type ImgInfo struct {
 // QEMUOperations defines the interface for executing qemu subprocesses
 type QEMUOperations interface {
 	ConvertToRawStream(*url.URL, string, bool) error
+	ConvertToFormatStream(url *url.URL, format, dest string, preallocate bool) error
 	Resize(string, resource.Quantity, bool) error
 	Info(url *url.URL) (*ImgInfo, error)
 	Validate(*url.URL, int64) error
@@ -114,6 +115,36 @@ func NewQEMUOperations() QEMUOperations {
 	return &qemuOperations{}
 }
 
+func convertTo(format, src, dest string, preallocate bool) error {
+	switch format {
+	case "qcow2", "raw":
+		// Do nothing.
+	default:
+		return errors.Errorf("unknown format: %s", format)
+	}
+	args := []string{"convert", "-t", "writeback", "-p", "-O", format, src, dest}
+	var err error
+
+	if preallocate {
+		err = addPreallocation(args, convertPreallocationMethods, func(args []string) ([]byte, error) {
+			return qemuExecFunction(nil, reportProgress, "qemu-img", args...)
+		})
+	} else {
+		klog.V(1).Infof("Running qemu-img with args: %v", args)
+		_, err = qemuExecFunction(nil, reportProgress, "qemu-img", args...)
+	}
+	if err != nil {
+		os.Remove(dest)
+		errorMsg := fmt.Sprintf("could not convert image to %s", format)
+		if nbdkitLog, err := os.ReadFile(common.NbdkitLogPath); err == nil {
+			errorMsg += " " + string(nbdkitLog)
+		}
+		return errors.Wrap(err, errorMsg)
+	}
+
+	return nil
+}
+
 func convertToRaw(src, dest string, preallocate bool) error {
 	args := []string{"convert", "-t", "writeback", "-p", "-O", "raw", src, dest}
 	var err error
@@ -145,6 +176,13 @@ func (o *qemuOperations) ConvertToRawStream(url *url.URL, dest string, prealloca
 	return convertToRaw(url.String(), dest, preallocate)
 }
 
+func (o *qemuOperations) ConvertToFormatStream(url *url.URL, format, dest string, preallocate bool) error {
+	if len(url.Scheme) > 0 && url.Scheme != "nbd+unix" {
+		return fmt.Errorf("not valid schema %s", url.Scheme)
+	}
+	return convertTo(format, url.String(), dest, preallocate)
+}
+
 // convertQuantityToQemuSize translates a quantity string into a Qemu compatible string.
 func convertQuantityToQemuSize(size resource.Quantity) string {
 	int64Size, asInt := size.AsInt64()
@@ -274,13 +312,17 @@ func CreateBlankImage(dest string, size resource.Quantity, preallocate bool) err
 
 // CreateBlankImage creates a raw image with a given size
 func (o *qemuOperations) CreateBlankImage(dest string, size resource.Quantity, preallocate bool) error {
+	format, err := common.GetFormat(dest)
+	if err != nil {
+		return err
+	}
 	klog.V(3).Infof("image size is %s", size.String())
-	args := []string{"create", "-f", "raw", dest, convertQuantityToQemuSize(size)}
+	args := []string{"create", "-f", format, dest, convertQuantityToQemuSize(size)}
 	if preallocate {
 		klog.V(1).Infof("Added preallocation")
 		args = append(args, []string{"-o", "preallocation=falloc"}...)
 	}
-	_, err := qemuExecFunction(nil, nil, "qemu-img", args...)
+	_, err = qemuExecFunction(nil, nil, "qemu-img", args...)
 	if err != nil {
 		os.Remove(dest)
 		return errors.Wrap(err, fmt.Sprintf("could not create raw image with size %s in %s", size.String(), dest))
diff --git a/pkg/importer/data-processor.go b/pkg/importer/data-processor.go
index ca7b2e853..ec24b3b64 100644
--- a/pkg/importer/data-processor.go
+++ b/pkg/importer/data-processor.go
@@ -276,8 +276,13 @@ func (dp *DataProcessor) convert(url *url.URL) (ProcessingPhase, error) {
 	if err != nil {
 		return ProcessingPhaseError, err
 	}
-	klog.V(3).Infoln("Converting to Raw")
-	err = qemuOperations.ConvertToRawStream(url, dp.dataFile, dp.preallocation)
+	format, err := common.GetFormat(dp.dataFile)
+	if err != nil {
+		return ProcessingPhaseError, errors.Wrap(err, "Unable to get format")
+	}
+
+	klog.V(3).Infoln("Converting to", "format", format)
+	err = qemuOperations.ConvertToFormatStream(url, format, dp.dataFile, dp.preallocation)
 	if err != nil {
 		return ProcessingPhaseError, errors.Wrap(err, "Conversion to Raw failed")
 	}
