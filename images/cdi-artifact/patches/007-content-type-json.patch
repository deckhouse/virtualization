diff --git a/cmd/cdi-apiserver/apiserver.go b/cmd/cdi-apiserver/apiserver.go
index 156b6fc..048e538 100644
--- a/cmd/cdi-apiserver/apiserver.go
+++ b/cmd/cdi-apiserver/apiserver.go
@@ -25,9 +25,9 @@ import (
 	"os"
 
 	"github.com/kelseyhightower/envconfig"
-
 	snapclient "github.com/kubernetes-csi/external-snapshotter/client/v6/clientset/versioned"
 	"github.com/pkg/errors"
+	apiruntime "k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/client-go/tools/clientcmd"
 	"k8s.io/klog/v2"
@@ -107,6 +107,7 @@ func main() {
 	if err != nil {
 		klog.Fatalf("Unable to get kube config: %v\n", errors.WithStack(err))
 	}
+	cfg.ContentType = apiruntime.ContentTypeJSON
 
 	client, err := kubernetes.NewForConfig(cfg)
 	if err != nil {
diff --git a/cmd/cdi-controller/controller.go b/cmd/cdi-controller/controller.go
index dbf6295..4c665eb 100644
--- a/cmd/cdi-controller/controller.go
+++ b/cmd/cdi-controller/controller.go
@@ -154,7 +154,7 @@ func start() {
 	if err != nil {
 		klog.Fatalf("Unable to get kube config: %v\n", errors.WithStack(err))
 	}
-
+	cfg.ContentType = apiruntime.ContentTypeJSON
 	client, err := kubernetes.NewForConfig(cfg)
 	if err != nil {
 		klog.Fatalf("Unable to get kube client: %v\n", errors.WithStack(err))
@@ -178,8 +178,9 @@ func start() {
 		NewCache:                   getNewManagerCache(namespace),
 		Scheme:                     scheme,
 	}
-
-	mgr, err := manager.New(config.GetConfigOrDie(), opts)
+	cfg = config.GetConfigOrDie()
+	cfg.ContentType = apiruntime.ContentTypeJSON
+	mgr, err := manager.New(cfg, opts)
 	if err != nil {
 		klog.Errorf("Unable to setup controller manager: %v", err)
 		os.Exit(1)
diff --git a/cmd/cdi-operator/operator.go b/cmd/cdi-operator/operator.go
index 0a9b30d..211f8cf 100644
--- a/cmd/cdi-operator/operator.go
+++ b/cmd/cdi-operator/operator.go
@@ -29,6 +29,7 @@ import (
 	promv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
 	"go.uber.org/zap/zapcore"
 	extv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
+	apiruntime "k8s.io/apimachinery/pkg/runtime"
 	apiregistrationv1 "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"
 	"sigs.k8s.io/controller-runtime/pkg/client/config"
 	logf "sigs.k8s.io/controller-runtime/pkg/log"
@@ -82,6 +83,7 @@ func main() {
 		log.Error(err, "")
 		os.Exit(1)
 	}
+	cfg.ContentType = apiruntime.ContentTypeJSON
 
 	managerOpts := manager.Options{
 		Namespace:                  namespace,
diff --git a/cmd/cdi-uploadproxy/uploadproxy.go b/cmd/cdi-uploadproxy/uploadproxy.go
index fc55ae1..2d4fe58 100644
--- a/cmd/cdi-uploadproxy/uploadproxy.go
+++ b/cmd/cdi-uploadproxy/uploadproxy.go
@@ -7,17 +7,17 @@ import (
 
 	"github.com/kelseyhightower/envconfig"
 	"github.com/pkg/errors"
+	apiruntime "k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/client-go/tools/clientcmd"
 	"k8s.io/klog/v2"
-	"sigs.k8s.io/controller-runtime/pkg/manager/signals"
-
 	cdiclient "kubevirt.io/containerized-data-importer/pkg/client/clientset/versioned"
 	"kubevirt.io/containerized-data-importer/pkg/uploadproxy"
 	"kubevirt.io/containerized-data-importer/pkg/util"
 	certfetcher "kubevirt.io/containerized-data-importer/pkg/util/cert/fetcher"
 	certwatcher "kubevirt.io/containerized-data-importer/pkg/util/cert/watcher"
 	cryptowatch "kubevirt.io/containerized-data-importer/pkg/util/tls-crypto-watch"
+	"sigs.k8s.io/controller-runtime/pkg/manager/signals"
 )
 
 const (
@@ -79,6 +79,7 @@ func main() {
 	if err != nil {
 		klog.Fatalf("Unable to get kube config: %v\n", errors.WithStack(err))
 	}
+	cfg.ContentType = apiruntime.ContentTypeJSON
 	client, err := kubernetes.NewForConfig(cfg)
 	if err != nil {
 		klog.Fatalf("Unable to get kube client: %v\n", errors.WithStack(err))
