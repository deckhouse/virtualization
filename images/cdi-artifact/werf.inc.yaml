---
{{- $version := "v1.60.3-v12n.0" }}
{{- $gitRepoUrl := "deckhouse/3p-containerized-data-importer" }}

---
image: {{ $.ImageName }}
final: false
fromImage: builder/golang-bookworm-1.23
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO }}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - |
    apt-get install --yes libnbd-dev
  {{- include "alt packages clean" . | nindent 2 }}

  install:
  - |
    mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config

    echo "Git clone CDI repository..."
    git config --global --add advice.detachedHead false
    git clone --depth 1 $(cat /run/secrets/SOURCE_REPO)/{{ $gitRepoUrl }} --branch {{ $version }} /containerized-data-importer

  - |
    echo Download Go modules.
    cd /containerized-data-importer
    go mod download

    echo Update modules to mitigate CVEs...

    # CVE-2024-45337,CVE-2025-22869
    go get golang.org/x/crypto@v0.38.0
    # CVE-2025-22870, CVE-2025-22872
    go get golang.org/x/net@v0.40.0

    # CVE-2025-27144
    go get github.com/go-jose/go-jose/v3@v3.0.4
    go mod tidy
    go md endor

  setup:
  - mkdir /cdi-binaries
  - cd /containerized-data-importer

  - export GOOS=linux
  - export GOARCH=amd64
  - export CGO_ENABLED=0
  - export X_FLAGS="-X kubevirt.io/containerized-data-importer/pkg/version.gitVersion=v{{ $version }}-patched"

  - echo ============== Build cdi-apiserver ===========
  - go build -ldflags="-s -w $X_FLAGS" -o /cdi-binaries/cdi-apiserver ./cmd/cdi-apiserver

  - echo ============== Build cdi-cloner ===========
  - go build -ldflags="-s -w" -o /cdi-binaries/cdi-cloner ./cmd/cdi-cloner

  - echo ============== Build cdi-controller ===========
  - go build -ldflags="-s -w" -o /cdi-binaries/cdi-controller ./cmd/cdi-controller

  - echo ============== Build cdi-uploadproxy ===========
  - go build -ldflags="-s -w" -o /cdi-binaries/cdi-uploadproxy ./cmd/cdi-uploadproxy

  - echo ============== Build cdi-importer ===========
  - CGO_ENABLED=1 go build -ldflags="-s -w" -o /cdi-binaries/cdi-importer ./cmd/cdi-importer

  - echo ============== Build cdi-image-size-detection  ===========
  - go build -ldflags="-s -w" -o /cdi-binaries/cdi-image-size-detection ./tools/cdi-image-size-detection

  - echo ============== Build cdi-source-update-poller  ===========
  - CGO_ENABLED=1 go build -ldflags="-s -w" -o /cdi-binaries/cdi-source-update-poller ./tools/cdi-source-update-poller

  - echo ============== Build cdi-operator  ===========
  - go build -ldflags="-s -w" -o /cdi-binaries/cdi-operator ./cmd/cdi-operator

  - chown -R 64535:64535 /cdi-binaries/*
  - ls -la /cdi-binaries

---
image: {{ $.ImageName }}-cbuilder
final: false
fromImage: builder/golang-bookworm-1.23
git:
  - add: /images/{{ $.ImageName }}/static_binaries
    to: /
    stageDependencies:
      install:
        - '*.c'
shell:
  install:
  {{- include "debian packages proxy" . | nindent 2 }}
  - |
    apt-get install --yes musl-dev musl-tools
  {{- include "debian packages clean" . | nindent 2 }}
  - |
    echo "Building simple app that prints hello cdi"
    mkdir -p /bins
    musl-gcc -static -Os -o /bins/hello hello.c
    musl-gcc -static -Os -o /bins/printFile print_file_context.c
    strip /bins/hello
    strip /bins/printFile
