---
{{- $gitRepoName := "3p-containerized-data-importer" }}
{{- $gitRepoUrl := (printf "%s/%s" "deckhouse" $gitRepoName) }}
{{- $version := get $.Core $gitRepoName }}

{{- $name := print $.ImageName "-dependencies" -}}
{{- define "$name" -}}
binaries:
- /cdi-binaries/cdi-importer
- /cdi-binaries/cdi-source-update-poller
packages:
- libnbd
- libxml2
- xz
- libtasn1
- libunistring
- libffi libgmp gnutls
- nettle libidn2
- p11-kit zlib
- glibc
{{- end -}}

{{ $builderDependencies := include "$name" . | fromYaml }}

image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
final: false
fromImage: builder/src
git:
  - add: {{ .ModuleDir }}/images/{{ .ImageName }}
    to: /src
    stageDependencies:
      install:
        - '**/*'
    excludePaths:
      - patches/README.md
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO }}
shell:
  install:
  - |
    echo "Git clone {{ $gitRepoName }} repository..."
    git clone --depth=1 --branch {{ $version }} $(cat /run/secrets/SOURCE_REPO)/{{ $gitRepoUrl }} /src/containerized-data-importer

    rm -rf /src/containerized-data-importer/.git

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}
final: false
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/alt" "builder/alt-go-svace" }}
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO }}
- id: GOPROXY
  value: {{ .GOPROXY }}
import:
- image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
  add: /src/containerized-data-importer
  to: /containerized-data-importer
  before: install
{{- include "importPackageImages" (list . $builderDependencies.packages "install") -}}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - |
    apt-get -qq install -y \
      git binutils make gcc golang
  {{- include "alt packages clean" . | nindent 2 }}
  install:
  - |
    # Install packages
    PKGS="{{ $builderDependencies.packages | join " " }}"
    for pkg in $PKGS; do
      cp -a /$pkg/. /
      rm -rf /$pkg
    done

  - |
    export GOPROXY=$(cat /run/secrets/GOPROXY)

    echo Download Go modules.
    cd /containerized-data-importer
    go mod download

    go mod vendor

    # Apply patch for json-patch from 3p-cdi repo
    git apply --ignore-space-change --ignore-whitespace patches/replace-op-for-evanphx-json-patch-v5-lib.patch

  setup:
  - mkdir /cdi-binaries
  - cd /containerized-data-importer

  - export GOOS=linux
  - export GOARCH=amd64
  - export CGO_ENABLED=0
  - export X_FLAGS="-X kubevirt.io/containerized-data-importer/pkg/version.gitVersion=v{{ $version }}-patched"

  - echo ============== Build cdi-apiserver ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-apiserver" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w $X_FLAGS" -o /cdi-binaries/cdi-apiserver ./cmd/cdi-apiserver`) | nindent 6 }}

  - echo ============== Build cdi-cloner ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-cloner" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-cloner ./cmd/cdi-cloner`) | nindent 6 }}

  - echo ============== Build cdi-controller ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-controller" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-controller ./cmd/cdi-controller`) | nindent 6 }}

  - echo ============== Build cdi-uploadproxy ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-uploadproxy" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-uploadproxy ./cmd/cdi-uploadproxy`) | nindent 6 }}

  - echo ============== Build cdi-image-size-detection  ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-image-size-detection" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-image-size-detection ./tools/cdi-image-size-detection`) | nindent 6 }}

  - echo ============== Build cdi-operator  ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-operator" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-operator ./cmd/cdi-operator`) | nindent 6 }}

  - export CGO_ENABLED=1

  - echo ============== Build cdi-importer ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-importer" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-importer ./cmd/cdi-importer`) | nindent 6 }}

  - echo ============== Build cdi-source-update-poller  ===========
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "cdi-source-update-poller" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /cdi-binaries/cdi-source-update-poller ./tools/cdi-source-update-poller`) | nindent 6 }}

  - chown -R 64535:64535 /cdi-binaries/*
  - ls -la /cdi-binaries

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-cbuilder
final: false
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/golang-bookworm-1.24" "builder/alt-go-svace" }}
git:
  - add: {{ .ModuleDir }}/images/{{ .ImageName }}
    to: /
    includePaths:
    - static_binaries
    stageDependencies:
      install:
        - '*.c'
shell:
  install:
{{- if eq $.SVACE_ENABLED "false" }}
  {{- include "debian packages proxy" . | nindent 2 }}
  - apt-get install --yes musl-dev musl-tools
  {{- include "debian packages clean" . | nindent 2 }}
{{- else }}
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get -qq install -y musl-devel musl-devel-static
  {{- include "alt packages clean" . | nindent 2 }}
{{- end }}
  - |
    cd /static_binaries
    echo "Building simple app that prints hello cdi"
    mkdir -p /bins
    {{- $_ := set $ "ProjectName" (list $.ImageName "hello" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `musl-gcc -static -Os -o /bins/hello hello.c`) | nindent 6 }}
    {{- $_ := set $ "ProjectName" (list $.ImageName "printFile" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `musl-gcc -static -Os -o /bins/printFile print_file_context.c`) | nindent 6 }}
    strip /bins/hello
    strip /bins/printFile
