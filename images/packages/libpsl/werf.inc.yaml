---
image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}
final: false
fromImage: builder/scratch
import:
- image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-builder
  add: /out
  to: /{{ $.ImageName }}
  before: setup

---
{{- $version := get .PackageVersion .ImageName }}
{{- $gitRepoUrl := "rockdaboot/libpsl.git" }}
image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-src-artifact
final: false
fromImage: builder/src
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO_GIT }}
shell:
  install:
  - git clone --depth=1 $(cat /run/secrets/SOURCE_REPO)/{{ $gitRepoUrl }} --branch {{ $version }} /src
---

{{- $name := print $.ImageName "-dependencies" -}}
{{- define "$name" -}}
altPackages:
- gcc git make libtool gettext-tools meson ninja-build
- rpm-build-python3
- libicu-devel
- glib2-devel libgio-devel
- gtk-doc xsltproc
- publicsuffix-list
- publicsuffix-list-dafsa
- tree
packages:
- libidn2 libunistring
{{- end -}}

{{ $builderDependencies := include "$name" . | fromYaml }}


image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-builder
final: false
fromImage: builder/alt
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO_GIT }}
import:
- image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-src-artifact
  add: /src
  to: /src
  before: install
{{- include "importPackageImages" (list . $builderDependencies.packages "install") -}}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - |
    apt-get install -y \
      {{ $builderDependencies.altPackages | join " " }}

  {{- include "alt packages clean" . | nindent 2 }}

  install:
  - |
    # Install packages
    PKGS="{{ $builderDependencies.packages | join " " }}"
    for pkg in $PKGS; do
      cp -a /$pkg/. /
      rm -rf /$pkg
    done

    OUTDIR=/out
    cd /src
    mkdir _build
    /usr/bin/meson setup _build  \
      --prefix=/usr \
      --libdir=/usr/lib64 \
      -Dbuiltin=false \
      -Dpsl_distfile=/usr/share/publicsuffix/public_suffix_list.dafsa \
      -Dpsl_file=/usr/share/publicsuffix/effective_tld_names.dat \
      -Dpsl_testfile=/usr/share/publicsuffix/test_psl.txt \
      -Druntime=libidn2 \
      -Ddocs=false \
      -Dtests=false \
      --wrap-mode=nofallback \
      --wrap-mode=nodownload

    ninja-build -j$(nproc) -C _build
    DESTDIR=$OUTDIR ninja-build install -C _build
    rm -rf $OUTDIR/usr/share
    find $OUTDIR -type f -executable | while read -r execfile; do
    if strip "$execfile"; then
      echo "Stripped: $execfile"
    fi
    done
    tree -hp $OUTDIR