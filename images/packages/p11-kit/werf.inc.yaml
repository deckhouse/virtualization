---
image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}
final: false
fromImage: builder/scratch
import:
- image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-builder
  add: /out
  to: /{{ .ImageName }}
  before: setup

---
{{- $version := get .PackageVersion .ImageName }}
{{- $gitRepoUrl := "p11-glue/p11-kit.git" }}

image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-src-artifact
final: false
fromImage: builder/src
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO_GIT }}
shell:
  install:
  - |
    git clone --depth=1 $(cat /run/secrets/SOURCE_REPO)/{{ $gitRepoUrl }} --branch {{ $version }} /src

    # Download subprojects/pkcs11-json
    cd /src
    if [[ "$(cat /run/secrets/SOURCE_REPO)" =~ "github.com" ]] ; then
      echo "Checkout submodules"
      git submodule update --init --recursive --depth=1
    else
      echo "Checkout submodules with URL rewrite"
      git \
        -c url."$(cat /run/secrets/SOURCE_REPO)/".insteadOf=https://github.com/  \
        submodule update --init --recursive --depth=1
    fi

---

{{- $name := print $.ImageName "-dependencies" -}}
{{- define "$name" -}}
altPackages:
- git gcc gcc-c++ make meson ninja-build pkg-config
- glib2-devel libffi-devel libtasn1-devel gettext-devel
- openssl-devel ca-certificates
- tree
# packages:
{{- end -}}

{{ $builderDependencies := include "$name" . | fromYaml }}

image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-builder
final: false
fromImage: builder/alt
import:
- image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - |
    apt-get install -y \
      {{ $builderDependencies.altPackages | join " " }}

  {{- include "alt packages clean" . | nindent 2 }}

  install:
  - |
    OUTDIR=/out

    cd /src

    meson setup builddir --prefix=/usr --buildtype=release
    ninja -C builddir
    DESTDIR=${OUTDIR} meson install -C builddir

    rm -rf $OUTDIR/usr/share

    find $OUTDIR -type f -executable | while read -r execfile; do
      if strip "$execfile"; then
        echo "Stripped: $execfile"
      fi
    done
