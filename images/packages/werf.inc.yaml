{{/*
# Parse variables for images from their path.
# for example: `packages/swtpm/werf.inc.yaml` turns into
# PackagePath: packages
# ImageName: swtpm
*/}}

{{-   $Root := . }}

{{-   $packageImagePathGlob := (printf "%s/images/packages/*/{Dockerfile,werf.inc.yaml}" (trimPrefix "/" .ModuleDir )) }}
{{-   $packageImagePathRegex := (trimPrefix "/" (printf "%s/images/(packages)/([0-9a-z-_]+)/(werf.inc.yaml)$" (trimPrefix "/" .ModuleDir ))) }}

{{    $ImagePackages := $Root.Files.Glob $packageImagePathGlob }}

{{-    range $path, $content := $ImagePackages }}
{{-      $ctx := dict }}
{{-      $_ := set $ctx "ImageInstructionType" "Stapel" }}

{{-      $ImageData := regexReplaceAll $packageImagePathRegex $path "${1}#${2}#${3}" | split "#" }}

{{-      $_ := set $ctx "PackagePath" $ImageData._0 }}
{{-      $_ := set $ctx "ImageName" $ImageData._1 }}
{{-      $_ := set $ctx "ModuleNamePrefix" $Root.ModuleNamePrefix }}
{{-      $_ := set $ctx "ModuleDir" $Root.ModuleDir }}
{{-      $_ := set $ctx "ImageBuildData" $content }}
{{-      $_ := set $ctx "SOURCE_REPO" $Root.SOURCE_REPO }}
{{-      $_ := set $ctx "SOURCE_REPO_GIT" $Root.SOURCE_REPO_GIT }}
{{-      $_ := set $ctx "MODULE_EDITION" $Root.MODULE_EDITION }}
{{-      $_ := set $ctx "PackageVersion" $Root.Package }}
{{-      $_ := set $ctx "GOPROXY" $Root.GOPROXY }}
{{-      $_ := set $ctx "ProjectName" $ctx.ImageName }}
{{-      $_ := set $ctx "Commit" $Root.Commit }}
{{-      $_ := set $ctx "DistroPackagesProxy" $Root.DistroPackagesProxy }}
{{-      $_ := set $ctx "SVACE_ENABLED" $Root.SVACE_ENABLED }}
{{-      $_ := set $ctx "SVACE_ANALYZE_SSH_USER" $Root.SVACE_ANALYZE_SSH_USER }}
{{-      $_ := set $ctx "SVACE_ANALYZE_HOST" $Root.SVACE_ANALYZE_HOST }}
{{-      $_ := set $ctx "SVACE_IMAGE_SUFFIX" $Root.SVACE_IMAGE_SUFFIX }}
{{-      $_ := set $ctx "Firmware" $Root.Firmware }}

{{       include "module_image_template" $ctx }}

{{-      range $ImageYamlMainfest := regexSplit "\n?---[ \t]*\n" (include "module_image_template" $ctx) -1 }}
{{-        $ImageManifest := $ImageYamlMainfest | fromYaml }}
{{-        if $ImageManifest | dig "final" true }}
{{-          if $ImageManifest.image }}
{{-            $_ := set $ "ImagesIDList" (append $.ImagesIDList $ImageManifest.image) }}
{{-          end }}
{{-        end }}
{{-      end }}

{{-    end }}
