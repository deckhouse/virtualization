---
image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}
final: false
fromImage: builder/scratch
import:
- image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-builder
  add: /out
  to: /{{ $.ImageName }}
  before: setup

---
{{- $version := get .PackageVersion .ImageName }}
{{- $gitRepoUrl := "nbdkit/libnbd.git" }}

image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-src-artifact
final: false
fromImage: builder/src
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO_GIT }}
shell:
  install:
  - git clone --depth=1 $(cat /run/secrets/SOURCE_REPO)/{{ $gitRepoUrl }} --branch {{ $version }} /src
    
---

{{- $name := print $.ImageName "-dependencies" -}}
{{- define "$name" -}}
altPackages:
- gcc gcc-c++ make git autoconf libtool gettext-tools
- automake pkgconf glibc-devel
- bash-completion hardlink libfuse3-devel
- libublksrv-devel liburing-devel libxml2-devel perl-podlators
- ocaml ocaml-findlib ocaml-ocamldoc
packages:
- gnutls libidn2
{{- end -}}

{{ $builderDependencies := include "$name" . | fromYaml }}

image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-builder
final: false
fromImage: builder/alt
import:
- image: {{ .ModuleNamePrefix }}{{ .PackagePath }}/{{ .ImageName }}-src-artifact
  add: /src
  to: /src
  before: install
{{- include "importPackageImages" (list . $builderDependencies.packages "install") -}}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - |
    apt-get install -y \
      {{ $builderDependencies.altPackages | join " " }}

  {{- include "alt packages clean" . | nindent 2 }}

  install:
  - |
    echo "Install packages"
    PKGS="{{ $builderDependencies.packages | join " " }}"
    for pkg in $PKGS; do
      cp -af /$pkg/. /
      rm -rf /$pkg
    done
  - |
    OUTDIR=/out

    cd /src

    autoreconf -i
    ./configure \
      --prefix=/usr \
      --libdir=/usr/lib64 \
      --disable-ocaml \
      --disable-static

    make -j$(nproc)

    make DESTDIR=$OUTDIR install

    # We don't need man
    rm -rf $OUTDIR/usr/share

    find $OUTDIR -type f -executable | while read -r execfile; do
    if strip "$execfile"; then
      echo "Stripped: $execfile"
    fi
    done

