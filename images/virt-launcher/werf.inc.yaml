---
image: {{ $.ImageName }}
fromImage: {{ $.ImageName }}-prepared
import:
  - image: {{ $.ImageName }}-binaries
    add: /relocate
    to: /
    after: setup
    includePaths:
    - etc/ld.so.preload
---
image: {{ $.ImageName }}-prepared
final: false
fromImage: distroless
import:
  - image: {{ $.ImageName }}-binaries
    add: /relocate
    to: /
    after: install
    excludePaths:
    - etc/ld.so.preload
docker:
  USER: 0

---

{{- $gitRepoName := "libvirt" }}
{{- $version := get $.Version $gitRepoName }}

image: {{ $.ImageName }}-binaries
final: false
fromImage: base-alt-p11-binaries
git:
  # Add liboverride as a global LD_PRELOAD.
  - add: /images/{{ $.ImageName }}/liboverride
    to: /relocate/etc
    stageDependencies:
      setup:
      - 'ld.so.preload.in'
    includePaths:
    - ld.so.preload.in
  - add: /images/{{ $.ImageName }}
    to: /relocate
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - scripts
  # Add qemu and virtqemud configs
  - add: /images/{{ $.ImageName }}/configs
    to: /relocate/etc/libvirt
    stageDependencies:
      setup:
      - qemu.conf
      - virtqemud.conf
    includePaths:
    - qemu.conf
    - virtqemud.conf
  - add: /images/{{ $.ImageName }}/configs
    to: /relocate/etc
    stageDependencies:
      setup:
      - nsswitch.conf
    includePaths:
    - nsswitch.conf
import:
- image: {{ $.ImageName }}-liboverride-builder
  add: /liboverride
  to: /relocate/liboverride
  after: setup
  includePaths:
  - liboverride.so

# Libvirt and QEMU libraries and binaries
- image: libvirt
  add: /BINS
  to: /libvirt-bins
  before: install
- image: qemu
  add: /BINS
  to: /qemu-bins
  before: install

# EDK2 (uefi firmware)
- image: edk2
  add: /FIRMWARE/
  to: /relocate/usr/share/edk2/ovmf
  before: install
  includePaths:
  - '*.fd'
  - '*.bin'
  - '*.efi'
  - '*.iso'
- image: edk2
  add: /FIRMWARE/
  to: /relocate/usr/share/qemu/firmware
  before: install
  includePaths:
  - '*.json'

# Import from virt artifact
- image: virt-artifact
  add: /kubevirt-config-files/
  to: /
  after: install
  includePaths:
  - .version

- image: virt-artifact
  add: /kubevirt-binaries/
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - container-disk
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor-orig
  - virt-probe
  - virt-tail
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/node-labeller/
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - '*.sh'
shell:
  install:
  - |
    apt-get update && apt-get install -y {{ .virtLauncherDependencies.libs | join " " }} {{ .virtLauncherDependencies.packages | join " " }}

    apt-get clean

    mkdir -p /VBINS/var/{log/libvirt/qemu,run,lib/libvirt/qemu}

    echo "=====Copy libvirt binaries to temp folder======"
    cp -a /libvirt-bins/. /VBINS/
    
    echo "=====Copy qemu binaries to temp folder======"
    cp -a /qemu-bins/. /VBINS/

    LIST="$(find /VBINS/usr/bin/ -type f)"
    LIST+=" $(find /VBINS/usr/sbin/ -type f)"
    LIST+=" /usr/lib64/libbsd.so.0 /usr/lib64/libnbd.so.0 /usr/lib64/libfuse3.so.3"
    LIST+=" /usr/lib64/libjson-c.so.5 /usr/lib64/libssh.so.4"

    ./relocate_binaries.sh -i "$LIST" -o /VBINS

    cp -a /VBINS/. /relocate
    
    # Cleanup
    rm -rf /{VBINS,qemu-bins,libvirt-bins}

  setup:
  - |
    ./relocate_binaries.sh -i "{{ .virtLauncherDependencies.binaries | join " " }}" -o /relocate

    mkdir -p /relocate/{etc,root}

    # glibc-gconv-modules
    cp -a /usr/lib64/gconv /relocate/usr/lib64
    cp /etc/xattr.conf /relocate/etc

    echo "root:x:0:0:root:/root:/bin/bash" >> /relocate/etc/passwd
    echo "root:x:0:" >> /relocate/etc/group
    echo "root:x:::::::" >> /relocate/etc/shadow
    
    echo "qemu:x:107:107::/home/qemu:/bin/bash" >> /relocate/etc/passwd
    echo "qemu:x:107:" >> /relocate/etc/group
    mkdir -p /relocate/home/qemu
    chown -R 107:107 /relocate/home/qemu
  
  - |
    echo "Create symlinks for OVMF"
    mkdir -p /relocate/usr/share/OVMF

    cd /relocate
    ln -sf usr/share/edk2/ovmf/OVMF_CODE.fd   usr/share/edk2/ovmf/OVMF_CODE.cc.fd
    ln -sf ../edk2/ovmf/OVMF_CODE.cc.fd       usr/share/OVMF/OVMF_CODE.cc.fd
    
    ln -s ../edk2/ovmf/OVMF_CODE.secboot.fd   usr/share/OVMF
    ln -s ../edk2/ovmf/OVMF_VARS.fd           usr/share/OVMF
    ln -s ../edk2/ovmf/OVMF_VARS.secboot.fd   usr/share/OVMF
    ln -s ../edk2/ovmf/UefiShell.iso          usr/share/OVMF
    
    cd /

  - |
    convert_version() {
      local version="$1"
      IFS='.' read -r major minor patch <<< "$version"
      printf "%d%03d\n" "$major" "$minor"
    }

    libvirt_version=$(convert_version {{ $version }})

    echo "libvirt_version: $libvirt_version"

    SYMLINC_LIST=$(cat <<EOF
    libvirt.so.0.${libvirt_version}.0        libvirt.so.0
    libvirt.so.0                             libvirt.so
    libvirt-qemu.so.0.${libvirt_version}.0   libvirt-qemu.so.0
    libvirt-qemu.so.0                        libvirt-qemu.so
    libvirt-lxc.so.0.${libvirt_version}.0    libvirt-lxc.so.0
    libvirt-lxc.so.0                         libvirt-lxc.so
    libvirt-admin.so.0.${libvirt_version}.0  libvirt-admin.so.0
    libvirt-admin.so.0                       libvirt-admin.so
    EOF
    )

    cd /relocate

    while IFS= read -r LINE; do
      echo "Create symlinc for $LINE"
      TARGET=$(echo $LINE | awk -F' ' '{print $1}')
      SYMLINK=$(echo $LINE | awk -F' ' '{print $2}')
      ln -s ../local/lib64/$TARGET usr/lib64/$SYMLINK
    done <<< "$SYMLINC_LIST"
    
    cd /
# Configure liboverride globally. It should be done in the last stage (setup) to not break stapel commands.
  - mv /relocate/etc/ld.so.preload.in /relocate/etc/ld.so.preload
  - |
    cp /relocate/scripts/virt-launcher-monitor-wrapper.sh /relocate/usr/bin/virt-launcher-monitor
    chmod +x /relocate/usr/bin/virt-launcher-monitor
  - |
    echo "Create symlinks for container-disk"
    mkdir -p /relocate/init/usr/bin
    cd /relocate
    ln -s usr/bin/container-disk ./init/usr/bin/container-disk
    cd /

---
image: {{ $.ImageName }}-liboverride-builder
final: false
fromImage: base-alt-p11
git:
  - add: /images/{{ $.ImageName }}/liboverride
    to: /liboverride
    includePaths:
      - '*.c'
    stageDependencies:
      install:
      - '*.c'
shell:
  beforeInstall:
  # Install build packages. Pin only GCC to detect gcc updates later.
  - |
    apt-get update && apt-get install --yes \
    autoconf \
    automake \
    libtool \
    pkg-config \
    make \
    git \
    perl-IPC-Cmd \
    wget \
    gcc==13-alt1 \
    gcc-c++==13-alt1
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin
  install:
  # Build liboverride.
  - cd /liboverride
  - gcc -shared -fPIC -DPIC -Wall -o liboverride.so override.c -ldl
  - strip liboverride.so
