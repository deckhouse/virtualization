{{/*

---
# 
image: {{ $.ImageName }}-v1
final: false
fromImage: distroless
git:
  # Add liboverride as a global LD_PRELOAD.
  - add: /images/{{ $.ImageName }}/liboverride
    to: /etc
    stageDependencies:
      setup:
      - 'ld.so.preload.in'
    includePaths:
    - ld.so.preload.in
import:
  # Copy qemu and libvirt binaries
  - image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
    add: /relocate
    to: /
    after: install

  - image: {{ $.ImageName }}-liboverride-builder
    add: /liboverride/
    to: /liboverride
    after: install
    includePaths:
    - liboverride.so

  # After install stage.
  # Add kubeivrt files from virt-artifact.
  - image: virt-artifact
    add: /kubevirt-config-files/
    to: /
    after: install
    includePaths:
    - .version
  - image: virt-artifact
    add: /kubevirt/cmd/{{ $.ImageName }}/
    to: /etc/libvirt
    after: install
    includePaths:
    - qemu.conf
    - virtqemud.conf
  - image: virt-artifact
    add: /kubevirt/cmd/{{ $.ImageName }}/
    to: /etc
    after: install
    includePaths:
    - nsswitch.conf
  - image: virt-artifact
    add: /kubevirt-binaries/
    to: /usr/bin
    before: setup
    includePaths:
    - container-disk
    - virt-freezer
    - virt-launcher
    - virt-launcher-monitor-orig
    - virt-probe
    - virt-tail
  - image: virt-artifact
    add: /kubevirt/cmd/{{ $.ImageName }}/node-labeller/
    to: /usr/bin
    before: setup
    includePaths:
    - '*.sh'
docker:
  USER: 0
*/}}

---
# Done
# merge-qemu-libvirt-binaries contains /VBINS and /relocate
image: {{ $.ImageName }}
fromImage: distroless
import:
  - image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
    add: /relocate
    to: /
    after: install
    excludePaths:

  # - image: {{ $.ImageName }}-liboverride-builder
  #   add: /liboverride
  #   to: /liboverride
  #   after: setup
  #   includePaths:
  #   - liboverride.so
# fromImage: {{ $.ImageName }}-prepared
# git:
#   # Add liboverride as a global LD_PRELOAD.
#   - add: /images/{{ $.ImageName }}/liboverride
#     to: /etc
#     stageDependencies:
#       setup:
#       - 'ld.so.preload.in'
#     includePaths:
#     - ld.so.preload.in
  # excludePaths:
  # - scripts
  #   # includePaths:
  #   # - lib64
  # - image: {{ $.ImageName }}-liboverride-builder
  #   add: /liboverride/
  #   to: /liboverride
  #   after: install
  #   includePaths:
  #   - liboverride.so
shell:
  setup:
    # Configure liboverride globally. It should be done in the last stage (setup) to not break stapel commands.
    - mv /etc/ld.so.preload.in /etc/ld.so.preload
# docker:
#   USER: 0

---
{{- $gitRepoName := "libvirt" }}
{{- $version := get $.Version $gitRepoName }}

image: {{ $.ImageName }}-prepared
final: false
fromImage: base-alt-p11
import:
# Before install stage.
# Add bins from libvirt and qemu artifacts.
- image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
  add: /VBINS
  to: /
  before: install
  includePaths:
  - etc
- image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
  add: /VBINS
  to: /
  before: install
  includePaths:
  - usr

- image: edk2
  add: /FIRMWARE/
  to: /usr/share/edk2/ovmf
  # to: /usr/share/OVMF
  before: install
  includePaths:
  - '*.fd'
  - '*.bin'
  - '*.efi'
  - '*.iso'

- image: edk2
  add: /FIRMWARE/
  to: /usr/share/qemu/firmware
  before: install
  includePaths:
  - '*.json'

# After install stage.
# Add kubeivrt files from virt-artifact.
- image: virt-artifact
  add: /kubevirt-config-files/
  to: /
  after: install
  includePaths:
  - .version
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /etc/libvirt
  after: install
  includePaths:
  - qemu.conf
  - virtqemud.conf
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /etc
  after: install
  includePaths:
  - nsswitch.conf
- image: virt-artifact
  add: /kubevirt-binaries/
  to: /usr/bin
  before: setup
  includePaths:
  - container-disk
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor-orig
  - virt-probe
  - virt-tail
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/node-labeller/
  to: /usr/bin
  before: setup
  includePaths:
  - '*.sh'
git:
  - add: /images/{{ $.ImageName }}
    to: /
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - scripts
shell:
  beforeInstall:
  # Install main packages.
  - |
    apt-get update && apt-get install --yes \
    acl \
    pcre \
    procps \
    ethtool \
    nftables \
    passt \
    swtpm swtpm-tools \
    xorriso \
    dmidecode \
    numactl \
    hwclock \
    libffi8 \
    glibc-gconv-modules

  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin
  
  - |
    # Delete unnecessary locales
    KEEP_LOCALES=("ru" "en_US" "en_GB")
    EXCLUDE_PATTERN=$(printf "! -name %s " "${KEEP_LOCALES[@]}")
    echo "Delete unnecessary locales"
    find /usr/share/locale -mindepth 1 -maxdepth 1 -type d ${EXCLUDE_PATTERN} -exec rm -rf {} +

    # delete docs
    echo "Delete docs"
    rm -rf /usr/share/doc/*

  install:
  # Create qemu group and user.
  - groupadd --gid 107 qemu && useradd qemu --uid 107 --gid 107 --shell /bin/bash --create-home

  # Link to dir OVMF
  - |
    mkdir -p /usr/share/OVMF

    echo "Create symlinks for OVMF"
    ln -sf /usr/share/edk2/ovmf/OVMF_CODE.fd         /usr/share/edk2/ovmf/OVMF_CODE.cc.fd
    ln -sf /usr/share/edk2/ovmf/OVMF_CODE.cc.fd      /usr/share/OVMF/OVMF_CODE.cc.fd
    
    ln -s /usr/share/edk2/ovmf/OVMF_CODE.secboot.fd /usr/share/OVMF
    ln -s /usr/share/edk2/ovmf/OVMF_VARS.fd         /usr/share/OVMF
    ln -s /usr/share/edk2/ovmf/OVMF_VARS.secboot.fd /usr/share/OVMF
    ln -s /usr/share/edk2/ovmf/UefiShell.iso        /usr/share/OVMF

  # Create symlinc for libvirt
  - |
    convert_version() {
      local version="$1"
      IFS='.' read -r major minor patch <<< "$version"
      printf "%d%03d\n" "$major" "$minor"
    }

    libvirt_version=$(convert_version {{ $version }})

    echo "libvirt_version: $libvirt_version"

    SYMLINC_LIST=$(cat <<EOF
    /usr/local/lib64/libvirt.so.0.${libvirt_version}.0 /lib64/libvirt.so.0
    /usr/local/lib64/libvirt.so.0 /lib64/libvirt.so
    /usr/local/lib64/libvirt-qemu.so.0.${libvirt_version}.0 /lib64/libvirt-qemu.so.0
    /usr/local/lib64/libvirt-qemu.so.0 /lib64/libvirt-qemu.so
    /usr/local/lib64/libvirt-lxc.so.0.${libvirt_version}.0 /lib64/libvirt-lxc.so.0
    /usr/local/lib64/libvirt-lxc.so.0 /lib64/libvirt-lxc.so
    /usr/local/lib64/libvirt-admin.so.0.${libvirt_version}.0 /lib64/libvirt-admin.so.0
    /usr/local/lib64/libvirt-admin.so.0 /lib64/libvirt-admin.so
    EOF
    )

    while IFS= read -r LINE; do
      echo "Create symlinc for $LINE"
      TARGET=$(echo $LINE | awk -F' ' '{print $1}')
      SYMLINK=$(echo $LINE | awk -F' ' '{print $2}')
      ln -s $TARGET $SYMLINK
    done <<< "$SYMLINC_LIST"
    cd /

  setup:
  # Replace virt-launcher-monitor with the wrapper.
  - cp /scripts/virt-launcher-monitor-wrapper.sh /usr/bin/virt-launcher-monitor
  - chmod +x /usr/bin/virt-launcher-monitor

  - |
    [[ ! -e /usr/bin/cp ]] && ln -s /bin/cp /usr/bin/cp
  - mkdir -p /init/usr/bin && ln -s /usr/bin/container-disk /init/usr/bin/container-disk
  
# Source https://github.com/kubevirt/kubevirt/blob/v1.3.1/cmd/virt-launcher/BUILD.bazel
#docker:
#  ENTRYPOINT: ["/usr/bin/virt-launcher"]
docker:
  ENV:
    LANG: ""
    LC_ALL: POSIX

---
# NEW relocate ----
# /usr/bin/qemu-img /usr/bin/qemu-io /usr/bin/qemu-nbd

{{- $gitRepoName := "libvirt" }}
{{- $version := get $.Version $gitRepoName }}

{{- $binaries := "/usr/bin/sh /usr/bin/bash /usr/bin/rm /usr/bin/mv /usr/bin/grep /usr/bin/mount /usr/bin/umount /usr/bin/chacl /usr/bin/getfacl /usr/bin/setfacl /usr/bin/ps /usr/sbin/slabtop /usr/sbin/sysctl /usr/bin/free /usr/bin/pgrep /usr/bin/pidwait /usr/bin/pkill /usr/bin/pmap /usr/bin/pwdx /usr/bin/skill /usr/bin/snice /usr/bin/tload /usr/bin/top /usr/bin/uptime /usr/bin/vmstat /usr/bin/w /usr/bin/watch /usr/sbin/nft /usr/lib64/libpcre*" }}

{{- $binariesXorriso := "/usr/bin/xorriso /usr/bin/xorrecord /usr/bin/osirrox /usr/bin/xorriso-dd-target /usr/bin/xorrisofs" }}

{{- $binariesEthtool := "/usr/sbin/ethlist /usr/sbin/ethtool" }}

{{- $binariesPasst := "/usr/bin/passt /usr/bin/passt.avx2 /usr/bin/pasta /usr/bin/pasta.avx2 usr/bin/qrap" }}

{{- $binariesSwtpm := "/usr/bin/swtpm /usr/bin/swtpm_bios /usr/bin/swtpm_cert /usr/bin/swtpm_ioctl /usr/bin/swtpm_localca /usr/bin/swtpm_setup" }}

{{- $binariesDmidecode := "/usr/sbin/biosdecode /usr/sbin/dmidecode /usr/sbin/ownership /usr/sbin/vpddecode" }}

{{- $binariesNumactl := "/usr/bin/memhog /usr/bin/migratepages /usr/bin/migspeed /usr/bin/numactl /usr/bin/numademo /usr/bin/numastat" }}

{{- $binariesHwclock := "/usr/bin/clock_unsynced /etc/adjtime /usr/sbin/clock /usr/sbin/hwclock" }}

{{- $binariesLibffi8 := "/usr/lib64/libffi.so*" }}

image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
final: false
fromImage: base-alt-p11-binaries
git:
  # Add liboverride as a global LD_PRELOAD.
  - add: /images/{{ $.ImageName }}/liboverride
    to: /relocate/etc
    stageDependencies:
      setup:
      - 'ld.so.preload.in'
    includePaths:
    - ld.so.preload.in
  - add: /images/{{ $.ImageName }}
    to: /relocate
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - scripts
import:
- image: {{ $.ImageName }}-liboverride-builder
  add: /liboverride
  to: /relocate/liboverride
  after: setup
  includePaths:
  - liboverride.so
# libvirt and qemu
- image: libvirt
  add: /BINS
  to: /libvirt-bins
  before: install
- image: qemu
  add: /BINS
  to: /qemu-bins
  before: install

# EDK2 (uefi firmware)
- image: edk2
  add: /FIRMWARE/
  to: /relocate/usr/share/edk2/ovmf
  before: install
  includePaths:
  - '*.fd'
  - '*.bin'
  - '*.efi'
  - '*.iso'
- image: edk2
  add: /FIRMWARE/
  to: /relocate/usr/share/qemu/firmware
  before: install
  includePaths:
  - '*.json'

# Import from virt artifact
- image: virt-artifact
  add: /kubevirt-config-files/
  to: /
  after: install
  includePaths:
  - .version
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /relocate/etc/libvirt
  after: install
  includePaths:
  - qemu.conf
  - virtqemud.conf
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /relocate/etc
  after: install
  includePaths:
  - nsswitch.conf
- image: virt-artifact
  add: /kubevirt-binaries/
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - container-disk
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor-orig
  - virt-probe
  - virt-tail
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/node-labeller/
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - '*.sh'
shell:
  install:
  - |
    apt-get update && apt-get install -y \
    libffi8 \
    libssh-devel libssh2-devel \
    libcap-ng-devel \
    libxfs-devel zlib-devel libcurl-devel libpci-devel libgvnc-devel libfdt-devel \
    libpixman-devel libkeyutils-devel libuuid-devel libpam0-devel libtasn1-devel libslirp-devel \
    libdrm-devel libxdp-devel libSDL2-devel libSDL2_image-devel libncursesw-devel libalsa-devel \
    libpulseaudio-devel pipewire-libs pipewire-jack-libs-devel libsoundio-devel \
    libcapstone-devel libsasl2-devel libjpeg-devel libpng-devel libxkbcommon-devel xkeyboard-config-devel libgtk+3-devel \
    libvte libvte-devel libvte3-devel libvirglrenderer-devel libusb-devel liburing-devel libbpf-devel \
    libspice-server-devel ceph-devel libnfs-devel libzstd-devel libseccomp-devel \
    libgcrypt-devel libgnutls-devel libnettle-devel libudev-devel libmultipath-devel \
    libblkio-devel libpmem-devel libdaxctl-devel libfuse3-devel rdma-core-devel libnuma-devel \
    bzlib-devel liblzo2-devel libsnappy-devel libcacard-devel libusbredir-devel libepoxy-devel libgbm-devel \
    libvitastor-devel libiscsi-devel libaio-devel libselinux-devel libqpl-devel libglusterfs11-api-devel \
    libvdeplug-devel libpciaccess-devel libyajl-devel sanlock-devel libpcap-devel libnl-devel libparted-devel libdevmapper-devel \
    libglusterfs-devel libaudit-devel libfuse-devel libnbd-devel libblkid-devel libp11-kit-devel libreadline-devel \
    libattr-devel libbsd-devel libsystemd-devel libjson-c-devel systemtap-sdt-devel libacl-devel glib2-devel \
    libgio-devel libxml2-devel libtirpc-devel libclocale libLLVMSPIRVLib-devel \
    acl \
    pcre \
    procps \
    ethtool \
    nftables \
    passt \
    swtpm swtpm-tools \
    xorriso \
    dmidecode \
    numactl \
    hwclock \
    libffi8 \
    glibc-gconv-modules

    apt-get clean

    mkdir -p /VBINS

    echo "=====Copy libvirt binaries to temp folder======"
    cp -a /libvirt-bins/. /VBINS/
    
    echo "=====Copy qemu binaries to temp folder======"
    cp -a /qemu-bins/. /VBINS/
    
    rm -rf /VBINS/var/run
  setup:
  - |
    LIST="$(find /VBINS/usr/bin/ -type f)"
    LIST+=" $(find /VBINS/usr/sbin/ -type f)"
    LIST+=" /usr/lib64/libbsd.so.0 /usr/lib64/libnbd.so.0 /usr/lib64/libfuse3.so.3"
    LIST+=" /usr/lib64/libjson-c.so.5 /usr/lib64/libssh.so.4"

    ./relocate_binaries.sh -i "$LIST" -o /VBINS

    cp -a /VBINS/. /relocate
    
    ./relocate_binaries.sh -i "{{ $binaries }}"          -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesXorriso }}"   -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesEthtool }}"   -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesPasst }}"     -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesSwtpm }}"     -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesDmidecode }}" -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesNumactl }}"   -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesHwclock }}"   -o /relocate
    ./relocate_binaries.sh -i "{{ $binariesLibffi8 }}"   -o /relocate
  
  - |
    # glibc-gconv-modules
    cp -a /usr/lib64/gconv /relocate/usr/lib64
  
  - |
    mkdir -p /relocate/etc /relocate/root
    echo "root:x:0:0:root:/root:/bin/bash" >> /relocate/etc/passwd
    echo "root:x:0:" >> /relocate/etc/group
    echo "root:x:::::::" >> /relocate/etc/shadow
    
    echo "qemu:x:107:107::/home/qemu:/bin/bash" >> /relocate/etc/passwd
    echo "qemu:x:107:" >> /relocate/etc/group
    mkdir -p /relocate/home/qemu
    chown -R 107:107 /relocate/home/qemu
  
  - |
    echo "Create symlinks for OVMF"
    mkdir -p /relocate/usr/share/OVMF

    cd /relocate/usr/share/edk2/ovmf
    ln -sf OVMF_CODE.fd         OVMF_CODE.cc.fd
    ln -sf OVMF_CODE.cc.fd      ../../OVMF/OVMF_CODE.cc.fd
    
    ln -s OVMF_CODE.secboot.fd ../../OVMF
    ln -s OVMF_VARS.fd         ../../OVMF
    ln -s OVMF_VARS.secboot.fd ../../OVMF
    ln -s UefiShell.iso        ../../OVMF
    
    cd /

    # cp -a /VBINS/* /relocate
# =========
  - |
    convert_version() {
      local version="$1"
      IFS='.' read -r major minor patch <<< "$version"
      printf "%d%03d\n" "$major" "$minor"
    }

    libvirt_version=$(convert_version {{ $version }})

    echo "libvirt_version: $libvirt_version"

    SYMLINC_LIST=$(cat <<EOF
    libvirt.so.0.${libvirt_version}.0       lib64/libvirt.so.0
    libvirt.so.0                            lib64/libvirt.so
    libvirt-qemu.so.0.${libvirt_version}.0  lib64/libvirt-qemu.so.0
    libvirt-qemu.so.0                       lib64/libvirt-qemu.so
    libvirt-lxc.so.0.${libvirt_version}.0   lib64/libvirt-lxc.so.0
    libvirt-lxc.so.0                        lib64/libvirt-lxc.so
    libvirt-admin.so.0.${libvirt_version}.0 lib64/libvirt-admin.so.0
    libvirt-admin.so.0                      lib64/libvirt-admin.so
    EOF
    )

    cd /relocate/usr/local/lib64/

    while IFS= read -r LINE; do
      echo "Create symlinc for $LINE"
      TARGET=$(echo $LINE | awk -F' ' '{print $1}')
      SYMLINK=$(echo $LINE | awk -F' ' '{print $2}')
      ln -s $TARGET ../../../$SYMLINK
    done <<< "$SYMLINC_LIST"
    
    cd /
  - |
    cp /relocate/scripts/virt-launcher-monitor-wrapper.sh /relocate/usr/bin/virt-launcher-monitor
    chmod +x /relocate/usr/bin/virt-launcher-monitor
  - |
    mkdir -p /relocate/init/usr/bin
    cd /relocate/usr/bin
    ln -s container-disk ../../init/usr/bin/container-disk
    cd /
    

---
image: {{ $.ImageName }}-liboverride-builder
final: false
fromImage: base-alt-p11
git:
  - add: /images/{{ $.ImageName }}/liboverride
    to: /liboverride
    includePaths:
      - '*.c'
    stageDependencies:
      install:
      - '*.c'
shell:
  beforeInstall:
  # Install build packages. Pin only GCC to detect gcc updates later.
  - |
    apt-get update && apt-get install --yes \
    autoconf \
    automake \
    libtool \
    pkg-config \
    make \
    git \
    perl-IPC-Cmd \
    wget \
    gcc==13-alt1 \
    gcc-c++==13-alt1
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin
  install:
  # Build liboverride.
  - cd /liboverride
  - gcc -shared -fPIC -DPIC -Wall -o liboverride.so override.c -ldl
  - strip liboverride.so
