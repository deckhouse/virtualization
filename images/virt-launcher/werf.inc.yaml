---
image: {{ $.ImageName }}
fromImage: base-alt-p11
import:
# Before install stage.
#   Add edk2-ovmf package
- image: {{ $.ImageName }}-edk2-builder
  add: /home/builder/RPM/RPMS/noarch
  to: /
  before: install
  includePaths:
  - edk2-ovmf-20240811-alt2.noarch.rpm

# Add bins from libvirt and qemu artifacts.

- image: libvirt-artifact
  add: /BINS
  to: /
  before: install
# Qemu to folders
- image: qemu-artifact
  add: /BINS/bin
  to: /usr/bin
  before: install
- image: qemu-artifact
  add: /BINS/share
  to: /usr/share
  before: install
- image: qemu-artifact
  add: /BINS/libexec
  to: /usr/lib/libexec
  before: install
- image: qemu-artifact
  add: /BINS/include
  to: /usr/local/include
  before: install
- image: qemu-artifact
  add: /BINS/var
  to: /var
  before: install

{{/*
# - image: tmp-merged
#   add: /BINS
#   to: /BINS
#   before: install

# - image: libvirt-artifact
#   add: /BINS
#   to: /
#   before: install
# - image: qemu-artifact
#   add: /BINS
#   to: /
#   before: install
*/}}

# After install stage.
#  Add libxcrypto library.
- image: {{ $.ImageName }}-libxcrypt-builder
  add: /usr/local/lib/
  to: /lib64
  after: install
  includePaths:
  - libcrypt.so.2.0.0

{{/*
# #   Add OpenSSL libraries.
# - image: {{ $.ImageName }}-openssl-builder
#   add: /usr/local/lib64/
#   to: /lib64
#   after: install
#   includePaths:
#   - libcrypto.so.3
#   - libssl.so.3
*/}}

#   Add liboverride library.
- image: {{ $.ImageName }}-liboverride-builder
  add: /liboverride/
  to: /liboverride
  after: install
  includePaths:
  - liboverride.so

# Add kubeivrt files from virt-artifact.
- image: virt-artifact
  add: /kubevirt-config-files/
  to: /
  after: install
  includePaths:
  - .version
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /etc/libvirt
  after: install
  includePaths:
  - qemu.conf
  - virtqemud.conf
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /etc
  after: install
  includePaths:
  - nsswitch.conf
- image: virt-artifact
  add: /kubevirt-binaries/
  to: /usr/bin
  before: setup
  includePaths:
  - container-disk
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor
  - virt-probe
  - virt-tail
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/node-labeller/
  to: /usr/bin
  before: setup
git:
  - add: /images/{{ $.ImageName }}
    to: /
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - scripts
  # Override libvirt daemon configuration.
  - add: /images/{{ $.ImageName }}
    to: /etc/libvirt
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - libvirt.conf
  # Add liboverride as a global LD_PRELOAD.
  - add: /images/{{ $.ImageName }}/liboverride
    to: /etc
    stageDependencies:
      setup:
      - 'ld.so.preload.in'
    includePaths:
    - ld.so.preload.in
shell:
  beforeInstall:
  # Install main packages.

  - |
    apt-get update && apt-get install --yes \
    acl \
    pcre \
    procps \
    ethtool \
    nftables \
    xorriso \
    passt \
    ipxe-roms-qemu \
    seabios \
    seavgabios \
    libffi8 \
    swtpm-tools \
    libcrypt libcrypto3 \
    libjson-c5 libtirpc libbsd libiscsi libglusterfs11 libnuma \
    libcap-ng libcurl libaudit libfuse libnbd libblkid libgcrypt20 \
    libgnutls libp11-kit libreadline8 libtasn1 libattr libbsd libsystemd \
    libuuid libssh libssh2 \
    libcapstone libpixman libpng16 libjpeg libepoxy libusb \
    libsnappy liblzo2 libSDL2 libpmem libdaxctl libfdt libqpl1 \
    libslirp libvdeplug3 libxdp libbpf libdw libgbm libgtk+3 \
    libcairo libgdk-pixbuf libvte3 libX11 libSDL2_image \
    libspice-server libvirglrenderer libcacard libusbredir libalsa \
    libpulseaudio pipewire-jack-libs pipewire-libs libaio liburing \
    libblkio libglusterfs11-api libnfs librbd1 librados2

  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin


    # libvirt-client==10.7.0-alt1 \
    # libvirt-daemon-driver-qemu==10.7.0-alt1 \
    # qemu-kvm-core==9.1.2-alt2
  # - apt-get clean
  # - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin
  install:
  # Upgrade edk2-ovmf package to custom build and remove its package.
  - |
    rpm -Uv /edk2-ovmf-20240811-alt2.noarch.rpm
    rm /edk2-ovmf-20240811-alt2.noarch.rpm
  # Restructure firware files in /usr/share/OVMF to mimic structure
  # in edk2-ovmf package from the original kubevirt.
  - |
    cd /usr/share/OVMF
    rm MICROVM.fd
    rm OVMF.inteltdx.secboot.fd
    rm OVMF_CODE.fd
    rm OVMF_CODE.secboot.fd
    mv OVMF_CODE_4M.fd OVMF_CODE.cc.fd
    rm OVMF_CODE_4M.qcow2
    mv OVMF_CODE_4M.secboot.fd OVMF_CODE.secboot.fd
    rm OVMF_CODE_4M.secboot.qcow2
    rm OVMF_VARS.fd
    rm OVMF_VARS.ms.fd
    rm OVMF_VARS.secboot.fd
    mv OVMF_VARS_4M.fd OVMF_VARS.fd
    rm OVMF_VARS_4M.ms.fd
    rm -f OVMF_VARS_4M.ms.qcow2
    rm -f OVMF_VARS_4M.qcow2
    mv OVMF_VARS_4M.secboot.fd OVMF_VARS.secboot.fd
    rm -f OVMF_VARS_4M.secboot.qcow2
    ls -la
  - |
    # cd /
    # cp -a /BINS/. /
    # rm -rf /BINS
  # Create symlinc for libvirt
  - |
    SYMLINC_LIST=$(cat <<'EOF'
    /usr/local/lib64/libvirt.so.0.10010.0 /lib64/libvirt.so.0
    /usr/local/lib64/libvirt.so.0 /lib64/libvirt.so
    /usr/local/lib64/libvirt-qemu.so.0.10010.0 /lib64/libvirt-qemu.so.0
    /usr/local/lib64/libvirt-qemu.so.0 /lib64/libvirt-qemu.so
    /usr/local/lib64/libvirt-lxc.so.0.10010.0 /lib64/libvirt-lxc.so.0
    /usr/local/lib64/libvirt-lxc.so.0 /lib64/libvirt-lxc.so
    /usr/local/lib64/libvirt-admin.so.0.10010.0 /lib64/libvirt-admin.so.0
    /usr/local/lib64/libvirt-admin.so.0 /lib64/libvirt-admin.so
    EOF
    )
    while IFS= read -r LINE; do
      echo "Create symlinc for $LINE"
      TARGET=$(echo $LINE | awk -F' to ' '{print $1}')
      SYMLINK=$(echo $LINE | awk -F' to ' '{print $2}')
      ln -s $TARGET $SYMLINK
    done <<< "$SYMLINC_LIST"
    cd /
  - |
    echo "------libvirt----------"
    echo "List files /usr/local/lib64/"
    ls -lah /usr/local/lib64/
    echo "------qemu-------------"
    ls -lah /usr/bin
  setup:
  # Replace virt-launcher-monitor with the wrapper.
  - mv /usr/bin/virt-launcher-monitor /usr/bin/virt-launcher-monitor-orig
  - cp /scripts/virt-launcher-monitor-wrapper.sh /usr/bin/virt-launcher-monitor
  - chmod +x /usr/bin/virt-launcher-monitor
  # Configure liboverride globally. It should be done in the last stage (setup) to not break stapel commands.
  - cp /etc/ld.so.preload.in /etc/ld.so.preload
  # Create qemu group and user.
  - groupadd --gid 107 qemu && useradd qemu --uid 107 --gid 107 --shell /bin/bash --create-home
  # Create links to required for virt-launcher libs.
  - ln -s /lib64/libcrypt.so.2.0.0 /lib64/libcrypt.so.2
  # - ln -s /lib64/libpcre.so.1.2.13 /lib64/libpcre.so.1
  - |
    [[ ! -e /usr/bin/cp ]] && ln -s /bin/cp /usr/bin/cp
  - mkdir -p /init/usr/bin && ln -s /usr/bin/container-disk /init/usr/bin/container-disk
# Source https://github.com/kubevirt/kubevirt/blob/v1.3.1/cmd/virt-launcher/BUILD.bazel
#docker:
#  ENTRYPOINT: ["/usr/bin/virt-launcher"]
{{/*
# ---
# image: tmp-merged
# final: false
# fromImage: base-alt-p11
# import:
# - image: libvirt-artifact
#   add: /BINS
#   to: /libvirt-bins
#   before: install
# - image: qemu-artifact
#   add: /BINS
#   to: /qemu-bins
#   before: install
# shell:
#   install:
#   - |
#     apt-get update && apt-get install -y \
#     tree

#     echo "/libvirt-bins"
#     tree /libvirt-bins

#     echo "/qemu-bins"
#     tree /qemu-bins

#     echo "==========="
#     cp -a /libvirt-bins/. /BINS
#     cp -a /qemu-bins/. /BINS/

#     ls -lah /BINS
#     tree /BINS
*/}}
---
image: {{ $.ImageName }}-lib-builder
final: false
fromImage: base-alt-p11
shell:
  beforeInstall:
  # Install build packages. Pin only GCC to detect gcc updates later.
  - |
    apt-get update && apt-get install --yes \
    autoconf \
    automake \
    libtool \
    pkg-config \
    make \
    git \
    perl-IPC-Cmd \
    wget \
    gcc==13-alt1 \
    gcc-c++==13-alt1
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin
---
image: {{ $.ImageName }}-libxcrypt-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
shell:
  beforeInstall:
  # Download libxcrypt sources.
  - git clone --branch v4.4.36 {{ $.SOURCE_REPO }}/besser82/libxcrypt.git /tmp/libxcrypt
  install:
  # Build libcrypt.so.2.
  - cd /tmp/libxcrypt
  - ./autogen.sh
  - ./configure --disable-obsolete-api
  - make && make install

{{/*
# ---
# image: {{ $.ImageName }}-openssl-builder
# final: false
# fromImage: {{ $.ImageName }}-lib-builder
# shell:
#   beforeInstall:
#   # Download OpenSSL sources.
#   - git clone --branch openssl-3.3.1 {{ $.SOURCE_REPO }}/openssl/openssl.git /tmp/openssl
#   install:
#   # Build libcrypto.so.3 and libssl.so.3.
#   - cd /tmp/openssl
#   - ./config no-docs
#   - make && make install
#
*/}}
---
image: {{ $.ImageName }}-liboverride-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
git:
  - add: /images/{{ $.ImageName }}/liboverride
    to: /liboverride
    includePaths:
      - '*.c'
    stageDependencies:
      install:
      - '*.c'
shell:
  install:
  # Build liboverride.
  - cd /liboverride
  - gcc -shared -fPIC -DPIC -Wall -o liboverride.so override.c -ldl
  - strip liboverride.so
---
# Note: edk2-ovmf==20231115 requires p11 AltLinux to build.
image: {{ $.ImageName }}-edk2-builder
final: false
from: {{ $.Images.BASE_ALT_P11 }}
git:
- add: /images/{{ $.ImageName }}/edk2
  to: /edk2
  excludePaths:
    - '*.py'
    - '*.md'
  stageDependencies:
    install:
      - '*.bmp'
shell:
  beforeInstall:
  # Install build dependencies. No versions required here,
  # because we rebuild SRPM already built by distro authors.
  - |
    apt-get update && apt-get install --yes \
    bc \
    su \
    git \
    rpm-build \
    rpm-build-python3 \
    gcc-c++ \
    acpica \
    nasm \
    python3-dev \
    python3-modules-sqlite3 \
    python3-module-virt-firmware \
    perl-JSON \
    perl-IPC-Cmd \
    libuuid-devel \
    xorriso \
    dosfstools \
    mtools \
    qemu-img \
    zlib-devel
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin

  install:
  # AltLinux requires building packages by non-root users.
  - useradd builder --shell /bin/bash --create-home --group rpm

  # Download and unpack SRPM.
  - echo "rpm-src [p11] http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/noarch classic" >> /etc/apt/sources.list.d/src.list
  - apt-get update
  - su - builder -c 'apt-get source edk2-ovmf'
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin

  # Add DVP logo into SOURCES.
  - cp /edk2/Logo.bmp /home/builder/RPM/SOURCES/

  # Build RPMs. edk2 package prints a huge log with about 770k lines,
  # we can keep only last 1k lines, it should be enough to get error
  # context and troubleshoot it locally.
  - |
    echo "Build RPMs from:" /home/builder/*.rpm
    echo "Note: time consuming operation, be patient ..."
    su - builder -c 'trap "echo Build log tail: ; tail -n 1024 /tmp/build.log" EXIT ; rpm -ba /home/builder/RPM/SPECS/edk2.spec > /tmp/build.log 2>&1'
