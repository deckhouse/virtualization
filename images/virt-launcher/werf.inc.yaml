---
image: {{ $.ImageName }}
fromImage: base-alt-p10
import:
# Before install stage.
#   Add edk2-ovmf package
- image: {{ $.ImageName }}-edk2-builder
  add: /home/builder/RPM/RPMS/noarch
  to: /
  before: install
  includePaths:
  - edk2-ovmf-20231115-alt1.noarch.rpm

# After install stage.
#   Add libxcrypto library.
- image: {{ $.ImageName }}-libxcrypt-builder
  add: /usr/local/lib/
  to: /lib64
  after: install
  includePaths:
  - libcrypt.so.2.0.0

#   Add OpenSSL libraries.
- image: {{ $.ImageName }}-openssl-builder
  add: /usr/local/lib64/
  to: /lib64
  after: install
  includePaths:
  - libcrypto.so.3
  - libssl.so.3

#   Add pcre libraries.
- image: {{ $.ImageName }}-pcre-builder
  add: /lib64
  to: /lib64
  after: install
  includePaths:
  - libpcre2-8.so.0.11.2
- image: {{ $.ImageName }}-pcre-builder
  add: /usr/local/lib/
  to: /lib64
  after: install
  includePaths:
  - libpcre.so.1.2.13

#   Add liboverride library.
- image: {{ $.ImageName }}-liboverride-builder
  add: /liboverride/
  to: /liboverride
  after: install
  includePaths:
  - liboverride.so

# Add kubeivrt files from virt-artifact.
- image: virt-artifact
  add: /images/kubevirt/{{ $.ImageName }}:latest/
  to: /
  after: install
  includePaths:
  - .version
- image: virt-artifact
  add: /images/kubevirt/{{ $.ImageName }}:latest/etc/libvirt
  to: /etc/libvirt
  after: install
  includePaths:
  - qemu.conf
  - virtqemud.conf
- image: virt-artifact
  add: /images/kubevirt/{{ $.ImageName }}:latest/etc
  to: /etc
  after: install
  includePaths:
  - nsswitch.conf
- image: virt-artifact
  add: /images/kubevirt/{{ $.ImageName }}:latest/usr/bin
  to: /usr/bin
  before: setup
  includePaths:
  - container-disk
  - node-labeller.sh
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor
  - virt-probe
git:
  - add: /images/{{ $.ImageName }}
    to: /
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - scripts
  # Override libvirt daemon configuration.
  - add: /images/{{ $.ImageName }}
    to: /etc/libvirt
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - libvirt.conf
  # Add liboverride as a global LD_PRELOAD.
  - add: /images/{{ $.ImageName }}/liboverride
    to: /etc
    stageDependencies:
      setup:
      - 'ld.so.preload.in'
    includePaths:
    - ld.so.preload.in
shell:
  beforeInstall:
  # Install main packages, update GPG keys and vendor IDs list.
  - |
    apt-get update && apt-get install --yes \
    apt-conf-branch \
    alt-gpgkeys \
    acl==2.3.1-alt1:sisyphus+279621.200.1.1 \
    libvirt-client==9.7.0-alt2.p10.2:p10+343223.200.3.1 \
    libvirt-daemon-driver-qemu==9.7.0-alt2.p10.2:p10+343223.200.3.1 \
    qemu-kvm-core==8.2.6-alt0.p10.1:p10+353259.100.4.1 \
    swtpm-tools==0.8.0-alt1:p10+322023.200.2.1 \
    ethtool==1:6.5-alt4:p10+337060.100.1.1 \
    findutils==4.8.0.0.10.1157-alt1:sisyphus+278099.1200.1.1 \
    nftables==1:1.0.9-alt2:p10+343579.100.2.1 \
    xorriso==1.5.4-alt1:sisyphus+279285.100.1.3 \
    selinux-policy-alt==0.0.52-alt1:sisyphus+260794.100.1.1 \
    libaltselinux==0.1.0-alt1 \
    python3-dev==3.9.18-alt1:p10+340781.400.5.1
    
  # Install newer versions from p11 branch.
  - echo "rpm [p11] http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/x86_64 classic" > /etc/apt/sources.list.d/alt-p11.list
  - echo "rpm [p11] http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/noarch classic" >> /etc/apt/sources.list.d/alt-p11.list
  - |
    apt-get update && apt-get install --yes \
    glibc==6:2.38.0.76.e9f05fa1c6-alt1:sisyphus+347163.100.1.1 \
    passt==20240624-alt1:p11+352273.100.2.1 \
    seabios==1.16.3-alt3:sisyphus+339925.100.2.1 \
    libffi8==1:3.4.6-alt1:sisyphus+341904.100.1.1
  - |
    echo "rpm [alt] http://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus x86_64 classic" > /etc/apt/sources.list.d/alt-sisyphus.list
    echo "rpm [alt] http://ftp.altlinux.org/pub/distributions/ALTLinux/Sisyphus noarch classic" >> /etc/apt/sources.list.d/alt-sisyphus.list
  - | 
    apt-get update && apt-get install --yes \
    python3-module-setuptools==1:70.3.0-alt1:sisyphus+352532.100.2.1
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org*
  install:
  # Upgrade edk2-ovmf package to custom build and remove its package.
  - |
    rpm -Uv /edk2-ovmf-20231115-alt1.noarch.rpm
    rm /edk2-ovmf-20231115-alt1.noarch.rpm
  # Restructure firware files in /usr/share/OVMF to mimic structure
  # in edk2-ovmf package from the original kubevirt.
  - |
    cd /usr/share/OVMF
    rm MICROVM.fd
    rm OVMF.inteltdx.secboot.fd
    rm OVMF_CODE.fd
    rm OVMF_CODE.secboot.fd
    mv OVMF_CODE_4M.fd OVMF_CODE.cc.fd
    rm OVMF_CODE_4M.qcow2
    mv OVMF_CODE_4M.secboot.fd OVMF_CODE.secboot.fd
    rm OVMF_CODE_4M.secboot.qcow2
    rm OVMF_VARS.fd
    rm OVMF_VARS.ms.fd
    rm OVMF_VARS.secboot.fd
    mv OVMF_VARS_4M.fd OVMF_VARS.fd
    rm OVMF_VARS_4M.ms.fd
    rm OVMF_VARS_4M.ms.qcow2
    rm OVMF_VARS_4M.qcow2
    mv OVMF_VARS_4M.secboot.fd OVMF_VARS.secboot.fd
    rm OVMF_VARS_4M.secboot.qcow2
    ls -la
  setup:
  # Replace virt-launcher-monitor with the wrapper.
  - mv /usr/bin/virt-launcher-monitor /usr/bin/virt-launcher-monitor-orig
  - cp /scripts/virt-launcher-monitor-wrapper.sh /usr/bin/virt-launcher-monitor
  - chmod +x /usr/bin/virt-launcher-monitor
  # Configure liboverride globally.
  - cp /etc/ld.so.preload.in /etc/ld.so.preload
  # Create qemu group and user.
  - groupadd --gid 107 qemu && useradd qemu --uid 107 --gid 107 --shell /bin/bash --create-home
  # Create links to required for virt-launcher libs.
  - ln -s /lib64/libcrypt.so.2.0.0 /lib64/libcrypt.so.2
  - ln -s /lib64/libpcre.so.1.2.13 /lib64/libpcre.so.1
  - ln -s /lib64/libpcre2-8.so.0.11.2 /lib64/libpcre2-8.so.0
  - ln -s /bin/cp /usr/bin/cp
  - mkdir -p /init/usr/bin && ln -s /usr/bin/container-disk /init/usr/bin/container-disk
# Source https://github.com/kubevirt/kubevirt/blob/v1.0.0/cmd/virt-launcher/BUILD.bazel
docker:
  ENTRYPOINT: ["/usr/bin/virt-launcher"]
---
image: {{ $.ImageName }}-lib-builder
final: false
fromImage: base-alt-p10
shell:
  beforeInstall:
  # Install build packages.
  - |
    apt-get update && apt-get install --yes \
    autoconf==2:2.69-alt5:sisyphus+263686.100.1.1 \
    automake==1:1.16-alt1:sisyphus+226889.100.2.1 \
    libtool==3:2.4.2-alt7 \
    pkg-config==0.29.2-alt3:sisyphus+278099.3600.1.1 \
    gcc==10-alt1:sisyphus+263054.200.3.1 \
    make==2:4.3.0-alt1:sisyphus+278158.1100.1.1 \
    git==2.42.2-alt1:p10+350723.100.3.1 \
    perl-IPC-Cmd==1.04-alt1:sisyphus+234736.100.1.1 \
    wget==1.21.3-alt1:p10+305270.100.3.1 \
    gcc-c++==10-alt1:sisyphus+263054.200.3.1
---
image: {{ $.ImageName }}-libxcrypt-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
shell:
  beforeInstall:
  # Download libxcrypt sources.
  - git clone --branch v4.4.23 https://github.com/besser82/libxcrypt.git /tmp/libxcrypt
  install:
  # Build libcrypt.so.2.
  - cd /tmp/libxcrypt
  - ./autogen.sh
  - ./configure --disable-obsolete-api
  - make && make install
---
image: {{ $.ImageName }}-openssl-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
shell:
  beforeInstall:
  # Download OpenSSL sources.
  - git clone --branch openssl-3.3.1 https://github.com/openssl/openssl.git /tmp/openssl
  install:
  # Build libcrypto.so.3 and libssl.so.3.
  - cd /tmp/openssl
  - ./Configure
  - make && make install
---
image: {{ $.ImageName }}-pcre-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
shell:
  beforeInstall:
  # Download PCRE sources.
  - wget -O /tmp/pcre.tar.gz https://sourceforge.net/projects/pcre/files/pcre/8.45/pcre-8.45.tar.gz/download
  install:
  # Build libpcre.so.1.
  - tar -xf /tmp/pcre.tar.gz -C /tmp
  - cd /tmp/pcre-8.45
  - ./configure --enable-utf --enable-unicode-properties
  - make && make install
---
image: {{ $.ImageName }}-liboverride-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
git:
  - add: /images/{{ $.ImageName }}/liboverride
    to: /liboverride
    includePaths:
      - '*.c'
    stageDependencies:
      install:
      - '*.c'
shell:
  install:
  # Build liboverride.
  - cd /liboverride
  - gcc -shared -fPIC -DPIC -Wall -o liboverride.so override.c -ldl
  - strip liboverride.so
---
# Note: edk2-ovmf==20231115 requires p11 AltLinux to build.
image: {{ $.ImageName }}-edk2-builder
final: false
from: {{ $.Images.BASE_ALT_P11 }}
git:
- add: /images/{{ $.ImageName }}/edk2
  to: /edk2
  excludePaths:
    - '*.py'
    - '*.md'
  stageDependencies:
    install:
      - '*.bmp'
shell:
  beforeInstall:
  # Add SRPM source.
  - echo "rpm-src [p11] http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/noarch classic" >> /etc/apt/sources.list.d/src.list
  # Install build dependencies.
  - |
    apt-get update && apt-get install --yes \
    bc==1:1.07.1-alt1:sisyphus+346065.200.3.1 \
    su==0.60-alt36:p11+348779.200.1.1 \
    git==2.42.2-alt1:sisyphus+348068.100.1.1 \
    rpm-build==4.0.4.201-alt1:p11+352147.300.3.1 \
    rpm-build-python3==0.1.25-alt1:sisyphus+344685.100.1.1 \
    gcc-c++==13-alt1:sisyphus+323337.300.1.1 \
    acpica==20230628-alt1:sisyphus+346029.200.2.1 \
    nasm==2.16.03-alt1:sisyphus+347261.300.1.1 \
    python3-dev==3.12.2-alt1:sisyphus+341702.200.1.1 \
    python3-modules-sqlite3==3.12.2-alt1:sisyphus+341702.200.1.1 \
    python3-module-virt-firmware==24.4-alt1:sisyphus+347408.100.1.1 \
    perl-JSON==4.10-alt1:sisyphus+308299.100.1.3 \
    perl-IPC-Cmd==1.04-alt1:sisyphus+234736.100.1.1 \
    libuuid-devel==2.39.2-alt1:p11+348780.400.1.1 \
    xorriso==1.5.6-alt1:p11+348905.100.1.3 \
    dosfstools==4.2-alt3:sisyphus+344264.100.1.1 \
    mtools==1:4.0.43-alt1:sisyphus+317197.100.1.1 \
    qemu-img==9.0.2-alt2:p11+353258.200.3.2 \
    zlib-devel==1.3.1-alt1:sisyphus+342532.100.1.1

  install:
  # AltLinux requires building packages by non-root users.
  - useradd builder --shell /bin/bash --create-home --group rpm
  # Download and unpack SRPM.
  - su - builder -c 'apt-get source edk2-ovmf'
  # Add DVP logo into SOURCES.
  - cp /edk2/Logo.bmp /home/builder/RPM/SOURCES/
  # Build RPMs. edk2 package prints a huge log with about 770k lines,
  # we can keep only last 1k lines, it should be enough to get error
  # context and troubleshoot it locally.
  - |
    echo "Build RPMs from:" /home/builder/*.rpm
    echo "Note: time consuming operation, be patient ..."
    su - builder -c 'trap "echo Build log tail: ; tail -n 1024 /tmp/build.log" EXIT ; rpm -ba /home/builder/RPM/SPECS/edk2.spec > /tmp/build.log 2>&1'
