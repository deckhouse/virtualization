---
image: {{ $.ImageName }}
final: true
fromImage: distroless
import:
  - image: {{ $.ImageName }}-binaries
    add: /relocate
    to: /
    after: install
imageSpec:
  config:
    user: 0

---
{{- define "virt-launcher-dependencies" -}}
libs:
  - libffi8
  - libssh-devel
  - libssh2-devel
  - libcap-ng-devel
  - libxfs-devel
  - zlib-devel
  - libcurl-devel
  - libpci-devel
  - libgvnc-devel
  - libfdt-devel
  - libpixman-devel
  - libkeyutils-devel
  - libuuid-devel
  - libpam0-devel
  - libtasn1-devel
  - libslirp-devel
  - libdrm-devel
  - libxdp-devel
  - libSDL2-devel
  - libSDL2_image-devel
  - libncursesw-devel
  - libalsa-devel
  - libpulseaudio-devel
  - pipewire-libs
  - pipewire-jack-libs-devel
  - libsoundio-devel
  - libcapstone-devel
  - libsasl2-devel
  - libjpeg-devel
  - libpng-devel
  - libxkbcommon-devel
  - xkeyboard-config-devel
  - libgtk+3-devel
  - libvte
  - libvte-devel
  - libvte3-devel
  - libvirglrenderer-devel
  - libdbus
  - libusb-devel
  - liburing-devel
  - libbpf-devel
  - libspice-server-devel
  - ceph-devel
  - libnfs-devel
  - libzstd-devel
  - libseccomp-devel
  - libgcrypt-devel
  - libgnutls-devel
  - libnettle-devel
  - libudev-devel
  - libmultipath-devel
  - libblkio-devel
  - libpmem-devel
  - libdaxctl-devel
  - libfuse3-devel
  - rdma-core-devel
  - libnuma-devel
  - bzlib-devel
  - liblzo2-devel
  - libsnappy-devel
  - libcacard-devel
  - libusbredir-devel
  - libepoxy-devel
  - libgbm-devel
  - libvitastor-devel
  - libiscsi-devel
  - libaio-devel
  - libselinux-devel
  - libqpl-devel
  - libglusterfs11-api-devel
  - libvdeplug-devel
  - libpciaccess-devel
  - libyajl-devel
  - sanlock-devel
  - libpcap-devel
  - libnl-devel
  - libparted-devel
  - libdevmapper-devel
  - libglusterfs-devel
  - libaudit-devel
  - libfuse-devel
  - libnbd-devel
  - libblkid-devel
  - libp11-kit-devel
  - libreadline-devel
  - libattr-devel
  - libbsd-devel
  - libsystemd-devel
  - libjson-c-devel
  - systemtap-sdt-devel
  - libacl-devel
  - libtpms-devel libtpms
  - glib2-devel
  - libgio-devel
  - libxml2-devel
  - libgcc1
  - libtirpc-devel
  - libclocale
  - libLLVMSPIRVLib-devel
  - libswtpm-devel
packages:
  - acl
  - attr
  - dmidecode
  - ethtool
  - fdisk
  - glibc-gconv-modules
  - gnutls-utils
  - hwclock
  - iptables
  - libffi8
  - nftables
  - numactl
  - openssl
  - passt
  - pcre
  - procps
  - policycoreutils
  - psmisc
  - msulogin
  - xorriso
binaries:
  # GNU utilities
  - /usr/bin/cp
  - /usr/bin/sleep
  # Gnu utils (requared for swtpm)
  - /usr/bin/certtool
  - /usr/bin/gnutls-cli
  - /usr/bin/ocsptool
  - /usr/bin/p11tool
  - /usr/bin/psktool
  # Openssl
  - /usr/bin/openssl
  # Xorriso (Creates an image of an ISO9660 filesystem)
  - /usr/bin/xorriso-dd-target /usr/bin/xorrisofs
  # Ethtool
  - /usr/sbin/ethlist /usr/sbin/ethtool /usr/sbin/iptables /usr/sbin/ip /usr/sbin/bridge /usr/sbin/nft
  # Procps utils
  - /usr/sbin/sysctl
  # Passt (User-mode networking daemons for virtual machines and namespaces)
  - /usr/bin/passt /usr/bin/passt.avx2 /usr/bin/pasta /usr/bin/pasta.avx2 /usr/bin/qrap
  # Dmidecode
  - /usr/sbin/biosdecode /usr/sbin/dmidecode
  # Numactl
  - /usr/bin/memhog /usr/bin/migratepages /usr/bin/migspeed /usr/bin/numactl /usr/bin/numademo /usr/bin/numastat
  # Hwclock
  - /usr/sbin/hwclock
{{- end -}}

{{ $virtLauncherDependencies := include "virt-launcher-dependencies" . | fromYaml }}

{{- $gitRepoName := "libvirt" }}
{{- $version := get $.Version $gitRepoName }}

image: {{ $.ImageName }}-binaries
final: false
fromImage: base-alt-p11-binaries
git:
  # Add qemu and virtqemud configs
  - add: /images/{{ $.ImageName }}/configs
    to: /relocate/etc/libvirt
    stageDependencies:
      setup:
      - qemu.conf
      - virtqemud.conf
    includePaths:
    - qemu.conf
    - virtqemud.conf
  - add: /images/{{ $.ImageName }}/configs
    to: /relocate/etc
    stageDependencies:
      setup:
      - nsswitch.conf
    includePaths:
    - nsswitch.conf
import:
# Libvirt and QEMU libraries and binaries
- image: libvirt
  add: /BINS
  to: /libvirt-bins
  before: install
- image: qemu
  add: /BINS
  to: /qemu-bins
  before: install

# EDK2 (uefi firmware)
- image: edk2
  add: /FIRMWARE/
  to: /relocate/usr/share/edk2/ovmf
  before: install
  includePaths:
  - '*.fd'
  - '*.bin'
  - '*.efi'
  - '*.iso'
- image: edk2
  add: /FIRMWARE/
  to: /relocate/usr/share/qemu/firmware
  before: install
  includePaths:
  - '*.json'

# Import from virt artifact
- image: virt-artifact
  add: /kubevirt-config-files/
  to: /
  after: install
  includePaths:
  - .version

- image: virt-artifact
  add: /kubevirt-binaries/
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - container-disk
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor
  - virt-probe
  - virt-tail
- image: {{ $.ImageName }}-gobuilder
  add: /binaries
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - node-labeller
  - vlctl
- image: packages/binaries/swtpm
  add: /swtpm
  to: /relocate
  after: setup
- image: {{ $.ImageName }}-cbuilder
  add: /bins
  to: /relocate/usr/bin
  before: setup
  includePaths:
  - temp_pod
shell:
  beforeInstall:
  - |
    apt-get update && apt-get install -y {{ $virtLauncherDependencies.libs | join " " }} {{ $virtLauncherDependencies.packages | join " " }}

    apt-get clean
  install:
  - |
    echo "Create folder hierarchy in VBINS"
    mkdir -p /VBINS/{etc,root}
    mkdir -p /VBINS/var/{log/libvirt/qemu,log/swtpm/libvirt/qemu,lib/libvirt/qemu,run/libvirt/qemu}

    echo "=====Copy libvirt binaries to temp folder======"
    cp -a /libvirt-bins/. /VBINS/

    echo "=====Copy qemu binaries to temp folder======"
    cp -a /qemu-bins/. /VBINS/

    echo "find and copy additional libs"
    FILES=$(find /VBINS/usr/bin/ -type f)
    FILES+=" $(find /VBINS/usr/sbin/ -type f)"
    
    LIBS="/usr/lib64/libbsd.so* /usr/lib64/libnbd.so* /usr/lib64/libfuse3.so*"
    LIBS+=" /usr/lib64/libjson-c.so* /usr/lib64/libssh.so* /usr/lib64/libssh2.so*"
    LIBS+=" /usr/lib64/libtpms.so*"
    LIBS+=" /usr/lib64/libxml2.so* /usr/lib64/libgcc_s*"

    echo "Relocate additional libs for files in /VBINS"
    ./relocate_binaries.sh -i "$FILES" -o /VBINS
    
    echo "Relocate additional libs to /VBINS"
    ./relocate_binaries.sh -i "$LIBS" -o /VBINS

    cp -a /VBINS/. /relocate

    echo "Show libs after relocation in /relocate/usr/lib64"
    ls -la /relocate/usr/lib64
    # Cleanup
    rm -rf /{VBINS,qemu-bins,libvirt-bins}

  setup:
  - |
    ./relocate_binaries.sh -i "{{ $virtLauncherDependencies.binaries | join " " }}" -o /relocate

    echo "Copy xattr config"
    cp -a /etc/xattr.conf /relocate/etc

    # glibc-gconv-modules
    # This package contains helper modules necessary to convert data between various charsets
    cp -a /usr/lib64/gconv /relocate/usr/lib64/gconv

    echo "root:x:0:0:root:/root:/bin/bash" >> /relocate/etc/passwd
    echo "root:x:0:" >> /relocate/etc/group
    echo "root:x:::::::" >> /relocate/etc/shadow

    echo "qemu:x:107:107::/home/qemu:/bin/bash" >> /relocate/etc/passwd
    echo "qemu:x:107:" >> /relocate/etc/group
    mkdir -p /relocate/home/qemu
    chown -R 107:107 /relocate/home/qemu

  - |
    echo "Create symlinks for OVMF"
    mkdir -p /relocate/usr/share/OVMF

    cd /relocate/usr/share/edk2/ovmf
    ln -sf OVMF_CODE.fd   OVMF_CODE.cc.fd

    cd /relocate
    ln -sf ../edk2/ovmf/OVMF_CODE.cc.fd       usr/share/OVMF/OVMF_CODE.cc.fd

    ln -s ../edk2/ovmf/OVMF_CODE.secboot.fd   usr/share/OVMF
    ln -s ../edk2/ovmf/OVMF_VARS.fd           usr/share/OVMF
    ln -s ../edk2/ovmf/OVMF_VARS.secboot.fd   usr/share/OVMF
    ln -s ../edk2/ovmf/UefiShell.iso          usr/share/OVMF

    cd /

  - |
    convert_version() {
      local version="$1"
      IFS='.' read -r major minor patch <<< "$version"
      printf "%d%03d\n" "$major" "$minor"
    }

    libvirt_version=$(convert_version {{ $version }})

    echo "libvirt_version: $libvirt_version"

    SYMLINC_LIST=$(cat <<EOF
    libvirt.so.0.${libvirt_version}.0        libvirt.so.0
    libvirt.so.0                             libvirt.so
    libvirt-qemu.so.0.${libvirt_version}.0   libvirt-qemu.so.0
    libvirt-qemu.so.0                        libvirt-qemu.so
    libvirt-lxc.so.0.${libvirt_version}.0    libvirt-lxc.so.0
    libvirt-lxc.so.0                         libvirt-lxc.so
    libvirt-admin.so.0.${libvirt_version}.0  libvirt-admin.so.0
    libvirt-admin.so.0                       libvirt-admin.so
    EOF
    )

    cd /relocate

    while IFS= read -r LINE; do
      echo "Create symlinc for $LINE"
      TARGET=$(echo $LINE | awk -F' ' '{print $1}')
      SYMLINK=$(echo $LINE | awk -F' ' '{print $2}')
      ln -s ../local/lib64/$TARGET usr/lib64/$SYMLINK
    done <<< "$SYMLINC_LIST"

    echo "List files in /relocate/usr/local/lib64"
    ls -la usr/local/lib64
  
  - |
    cd /relocate

    echo "Create symlinks for container-disk"
    mkdir -p /relocate/init/usr/bin
    ln -s usr/bin/container-disk ./init/usr/bin/container-disk

    echo "Create symlink for run -> var/run "
    ln -s var/run run

  # /etc/libvirt-init will be copied back into /etc/libvirt at runtime. This is necessary because we configure libvirt to mount /etc/libvirt and set readOnlyRootFilesystem for other directories.
  # DO NOT REMOVE. node-labeler.sh uses /etc/libvirt.
  - |
    cp -a etc/libvirt etc/libvirt-init

---
image: {{ $.ImageName }}-gobuilder
final: false
from: {{ .Images.BASE_GOLANG_23_BOOKWORM }}
git:
  - add: /images/{{ $.ImageName }}/node-labeller
    to: /node-labeller
    includePaths:
      - '**/*'
    stageDependencies:
      install:
      - '**/*'
  - add: /images/{{ $.ImageName }}/vlctl
    to: /src-vlctl
    includePaths:
      - '**/*'
    stageDependencies:
      install:
      - '**/*'
shell:
  install:
    - |
      echo "install deps libvirt-dev"
      apt-get update && apt-get install -y libvirt-dev
      apt-get clean
    - mkdir -p /binaries
    - |
      echo "Build node-labeller binaries"
      cd /node-labeller
      echo '== go build -ldflags="-s -w" -o /binaries/node-labeller ./cmd/node-labeller =='
      go build -ldflags="-s -w" -o /binaries/node-labeller ./cmd/node-labeller
      echo "Done"
    - |
      cd /src-vlctl
      export GO111MODULE=on
      export GOOS=linux
      export CGO_ENABLED=0
      export GOARCH=amd64
      echo '== go build -ldflags="-s -w" -o /binaries/vlctl ./cmd/vlctl/main.go =='
      go build -ldflags="-s -w" -o /binaries/vlctl ./cmd/vlctl/main.go
      echo "Done"
---
image: {{ $.ImageName }}-cbuilder
final: false
from: {{ .Images.BASE_DEBIAN_BOOKWORM_SLIM }}
git:
  - add: /images/{{ $.ImageName }}/static_binaries
    to: /
    stageDependencies:
      install:
        - '*.c'
shell:
  beforeInstall:
  - |
    apt-get update && apt-get install --yes gcc musl-dev musl-tools
    apt-get clean
  install:
  - |    
    echo "Building simple app that prints I'am temp pod"
    mkdir -p /bins
    musl-gcc -static -Os -o /bins/temp_pod temp_pod.c
    strip /bins/temp_pod