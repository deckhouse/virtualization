---
image: {{ $.ImageName }}
fromImage: {{ $.ImageName }}-prepared
git:
  # Add liboverride as a global LD_PRELOAD.
  - add: /images/{{ $.ImageName }}/liboverride
    to: /etc
    stageDependencies:
      setup:
      - 'ld.so.preload.in'
    includePaths:
    - ld.so.preload.in
import:
  - image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
    add: /VBINS
    to: /usr
    after: install
    includePaths:
    - lib64
  - image: {{ $.ImageName }}-liboverride-builder
    add: /liboverride/
    to: /liboverride
    after: install
    includePaths:
    - liboverride.so
shell:
  setup:
    # Configure liboverride globally. It should be done in the last stage (setup) to not break stapel commands.
    - mv /etc/ld.so.preload.in /etc/ld.so.preload
    - |
      # Delete unnecessary locales
      KEEP_LOCALES=("ru" "en_US" "en_GB")
      EXCLUDE_PATTERN=$(printf "! -name %s " "${KEEP_LOCALES[@]}")
      echo "Delete unnecessary locales"
      find /usr/share/locale -mindepth 1 -maxdepth 1 -type d ${EXCLUDE_PATTERN} -exec rm -rf {} +

      # delete docs
      echo "Delete docs"
      rm -rf /usr/share/doc/*
# docker:
#   ENV:
#     LANG: ""
#     LC_ALL: POSIX
---
{{- $versionLibvirt := "10.10.0" }}

image: {{ $.ImageName }}-prepared
final: false
fromImage: base-alt-p11
import:
# Before install stage.
# Add bins from libvirt and qemu artifacts.
- image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
  add: /VBINS
  to: /
  before: install
  includePaths:
  - etc
- image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
  add: /VBINS
  to: /
  before: install
  includePaths:
  - usr

- image: edk2-artifact
  add: /FIRMWARE/
  to: /usr/share/edk2/ovmf
  # to: /usr/share/OVMF
  before: install
  includePaths:
  - '*.fd'
  - '*.bin'
  - '*.efi'
  - '*.iso'

- image: edk2-artifact
  add: /FIRMWARE/
  to: /usr/share/qemu/firmware
  before: install
  includePaths:
  - '*.json'

# After install stage.
# Add kubeivrt files from virt-artifact.
- image: virt-artifact
  add: /kubevirt-config-files/
  to: /
  after: install
  includePaths:
  - .version
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /etc/libvirt
  after: install
  includePaths:
  - qemu.conf
  - virtqemud.conf
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/
  to: /etc
  after: install
  includePaths:
  - nsswitch.conf
- image: virt-artifact
  add: /kubevirt-binaries/
  to: /usr/bin
  before: setup
  includePaths:
  - container-disk
  - virt-freezer
  - virt-launcher
  - virt-launcher-monitor-orig
  - virt-probe
  - virt-tail
- image: virt-artifact
  add: /kubevirt/cmd/{{ $.ImageName }}/node-labeller/
  to: /usr/bin
  before: setup
  includePaths:
  - '*.sh'
git:
  - add: /images/{{ $.ImageName }}
    to: /
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - scripts
shell:
  beforeInstall:
  # Install main packages.
  - |
    apt-get update && apt-get install --yes \
    acl \
    pcre \
    procps \
    ethtool \
    nftables \
    passt \
    swtpm swtpm-tools \
    xorriso \
    dmidecode \
    numactl \
    hwclock \
    libffi8 \
    glibc-gconv-modules

  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin

  install:
  # Create qemu group and user.
  - groupadd --gid 107 qemu && useradd qemu --uid 107 --gid 107 --shell /bin/bash --create-home

  # Link to dir OVMF
  - |
    mkdir -p /usr/share/OVMF
    # mkdir -p /usr/share/edk2
    # ln -s /usr/share/OVMF /usr/share/edk2/ovmf
    # ln -s /usr/share/OVMF/OVMF_CODE.fd /usr/share/OVMF/OVMF_CODE.cc.fd

    echo "Create symlinks for OVMF"
    ln -sf /usr/share/edk2/ovmf/OVMF_CODE.fd         /usr/share/edk2/ovmf/OVMF_CODE.cc.fd
    ln -sf /usr/share/edk2/ovmf/OVMF_CODE.cc.fd /usr/share/OVMF/OVMF_CODE.cc.fd
    
    ln -s /usr/share/edk2/ovmf/OVMF_CODE.secboot.fd /usr/share/OVMF
    ln -s /usr/share/edk2/ovmf/OVMF_VARS.fd         /usr/share/OVMF
    ln -s /usr/share/edk2/ovmf/OVMF_VARS.secboot.fd /usr/share/OVMF
    ln -s /usr/share/edk2/ovmf/UefiShell.iso        /usr/share/OVMF
    
    # ln -s /usr/share/edk2/ovmf/OVMF_CODE.cc.fd /usr/share/edk2/ovmf/OVMF_CODE.fd

  # Create symlinc for libvirt
  - |
    convert_version() {
      local version="$1"
      IFS='.' read -r major minor patch <<< "$version"
      printf "%d%03d\n" "$major" "$minor"
    }

    libvirt_version=$(convert_version {{ $versionLibvirt }})

    echo "libvirt_version: $libvirt_version"

    SYMLINC_LIST=$(cat <<EOF
    /usr/local/lib64/libvirt.so.0.${libvirt_version}.0 /lib64/libvirt.so.0
    /usr/local/lib64/libvirt.so.0 /lib64/libvirt.so
    /usr/local/lib64/libvirt-qemu.so.0.${libvirt_version}.0 /lib64/libvirt-qemu.so.0
    /usr/local/lib64/libvirt-qemu.so.0 /lib64/libvirt-qemu.so
    /usr/local/lib64/libvirt-lxc.so.0.${libvirt_version}.0 /lib64/libvirt-lxc.so.0
    /usr/local/lib64/libvirt-lxc.so.0 /lib64/libvirt-lxc.so
    /usr/local/lib64/libvirt-admin.so.0.${libvirt_version}.0 /lib64/libvirt-admin.so.0
    /usr/local/lib64/libvirt-admin.so.0 /lib64/libvirt-admin.so
    EOF
    )

    while IFS= read -r LINE; do
      echo "Create symlinc for $LINE"
      TARGET=$(echo $LINE | awk -F' to ' '{print $1}')
      SYMLINK=$(echo $LINE | awk -F' to ' '{print $2}')
      ln -s $TARGET $SYMLINK
    done <<< "$SYMLINC_LIST"
    cd /

  setup:
  # Replace virt-launcher-monitor with the wrapper.
  - cp /scripts/virt-launcher-monitor-wrapper.sh /usr/bin/virt-launcher-monitor
  - chmod +x /usr/bin/virt-launcher-monitor

  - |
    # [[ ! -e /usr/bin/cp ]] && ln -s /bin/cp /usr/bin/cp
  - mkdir -p /init/usr/bin && ln -s /usr/bin/container-disk /init/usr/bin/container-disk
  
# Source https://github.com/kubevirt/kubevirt/blob/v1.3.1/cmd/virt-launcher/BUILD.bazel
#docker:
#  ENTRYPOINT: ["/usr/bin/virt-launcher"]

---
image: {{ $.ImageName }}-merge-qemu-libvirt-binaries
final: false
fromImage: base-alt-p11
import:
- image: libvirt-artifact
  add: /BINS
  to: /libvirt-bins
  before: install
- image: qemu-artifact
  add: /BINS
  to: /qemu-bins
  before: install
git:
  - add: /images/{{ $.ImageName }}
    to: /
    stageDependencies:
      setup:
      - '**/*'
    includePaths:
    - reloclibs.sh
shell:
  install:
  - |
    apt-get update && apt-get install -y tree \
    glibc-utils \
    libffi8 \
    libssh-devel libssh2-devel \
    libcap-ng-devel \
    libxfs-devel zlib-devel libcurl-devel libpci-devel libgvnc-devel libfdt-devel \
    libpixman-devel libkeyutils-devel libuuid-devel libpam0-devel libtasn1-devel libslirp-devel \
    libdrm-devel libxdp-devel libSDL2-devel libSDL2_image-devel libncursesw-devel libalsa-devel \
    libpulseaudio-devel pipewire-libs pipewire-jack-libs-devel libsoundio-devel \
    libcapstone-devel libsasl2-devel libjpeg-devel libpng-devel libxkbcommon-devel xkeyboard-config-devel libgtk+3-devel \
    libvte libvte-devel libvte3-devel libvirglrenderer-devel libusb-devel liburing-devel libbpf-devel \
    libspice-server-devel ceph-devel libnfs-devel libzstd-devel libseccomp-devel \
    libgcrypt-devel libgnutls-devel libnettle-devel libudev-devel libmultipath-devel \
    libblkio-devel libpmem-devel libdaxctl-devel libfuse3-devel rdma-core-devel libnuma-devel \
    bzlib-devel liblzo2-devel libsnappy-devel libcacard-devel libusbredir-devel libepoxy-devel libgbm-devel \
    libvitastor-devel libiscsi-devel libaio-devel libselinux-devel libqpl-devel libglusterfs11-api-devel \
    libvdeplug-devel libpciaccess-devel libyajl-devel sanlock-devel libpcap-devel libnl-devel libparted-devel libdevmapper-devel \
    libglusterfs-devel libaudit-devel libfuse-devel libnbd-devel libblkid-devel libp11-kit-devel libreadline-devel \
    libattr-devel libbsd-devel libsystemd-devel libjson-c-devel systemtap-sdt-devel libacl-devel glib2-devel \
    libgio-devel libxml2-devel libtirpc-devel libclocale libLLVMSPIRVLib-devel

    apt-get clean

    mkdir -p /VBINS

    echo "=====Copy libvirt binaries to temp folder======"
    cp -a /libvirt-bins/. /VBINS/
    
    echo "=====Copy qemu binaries to temp folder======"
    cp -a /qemu-bins/. /VBINS/
    
    rm -rf /VBINS/var/run
  setup:
  - |
    LIST="$(find /VBINS/usr/bin/ -type f)"
    LIST+=" $(find /VBINS/usr/sbin/ -type f)"
    LIST+=" /usr/lib64/libbsd.so.0 /usr/lib64/libnbd.so.0 /usr/lib64/libfuse3.so.3"
    LIST+=" /usr/lib64/libjson-c.so.5 /usr/lib64/libssh.so.4"
    ./reloclibs.sh -i "$LIST" -o /VBINS

---
image: {{ $.ImageName }}-lib-builder
final: false
fromImage: base-alt-p11
shell:
  beforeInstall:
  # Install build packages. Pin only GCC to detect gcc updates later.
  - |
    apt-get update && apt-get install --yes \
    autoconf \
    automake \
    libtool \
    pkg-config \
    make \
    git \
    perl-IPC-Cmd \
    wget \
    gcc==13-alt1 \
    gcc-c++==13-alt1
  - apt-get clean
  - rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin

---
image: {{ $.ImageName }}-liboverride-builder
final: false
fromImage: {{ $.ImageName }}-lib-builder
git:
  - add: /images/{{ $.ImageName }}/liboverride
    to: /liboverride
    includePaths:
      - '*.c'
    stageDependencies:
      install:
      - '*.c'
shell:
  install:
  # Build liboverride.
  - cd /liboverride
  - gcc -shared -fPIC -DPIC -Wall -o liboverride.so override.c -ldl
  - strip liboverride.so
