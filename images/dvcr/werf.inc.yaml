---
{{- $gitRepoName := "distribution" }}
{{- $gitRepoUrl := (printf "%s/%s.git" "distribution" $gitRepoName) }}
{{- $version := get $.Core $gitRepoName }}

image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
final: false
fromImage: builder/src
secrets:
- id: SOURCE_REPO
  value: {{ $.SOURCE_REPO_GIT }}
shell:
  install:
  - |
    mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
    echo "Git clone CDI repository..."
    mkdir -p /src
    git clone --depth 1 $(cat /run/secrets/SOURCE_REPO)/{{ $gitRepoUrl }} --branch v{{ $version }} /src/distribution


---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}
fromImage: {{ .ModuleNamePrefix }}distroless
git:
  {{- include "image mount points" . }}
import:
- image: {{ .ModuleNamePrefix }}{{ .ImageName }}-builder
  add: /container-registry-binary
  to: /usr/bin
  before: setup
  includePaths:
  - registry
# Registry configuration is stored in configmap: templates/dvcr/configmap.yaml
- image: {{ .ModuleNamePrefix }}dvcr-artifact-bins
  add: /relocate/usr/local/bin/dvcr-cleaner
  to: /usr/local/bin/dvcr-cleaner
  before: setup
imageSpec:
  config:
    user: 64535
---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-builder
final: false
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/golang-bookworm-1.23" "builder/alt-go-svace" }}
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
- image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
  add: /src/distribution
  to: /distribution
  before: install
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  install:
  - |
    export GOPROXY=$(cat /run/secrets/GOPROXY)
    export GOOS=linux
    export GOARCH=amd64
    export CGO_ENABLED=0

    # Docker distribution v2.8.3 is not a go module, backoff to GOPATH build. Remove these lines on migration to distribution v3.0.0.
    export GOPATH=$(go env GOPATH)
    export GOROOT=$(go env GOROOT)
    export GO111MODULE=off

    mkdir -p /container-registry-binary
    mkdir -p $GOPATH/src/github.com/docker

    cd $GOPATH/src/github.com/docker
    mv /distribution .
    cd distribution

    export VERSION={{ $version }}
    {{- $_ := set $ "ProjectName" (list $.ImageName "dvcr" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -o /container-registry-binary/ -ldflags '-s -w -X registry/version.Version=v$VERSION -X registry/version.Revision=v$VERSION' ./cmd/registry`) | nindent 6 }}
