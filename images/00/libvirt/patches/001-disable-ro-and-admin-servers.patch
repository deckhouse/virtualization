diff --git a/src/logging/log_daemon.c b/src/logging/log_daemon.c
index daf7ef4b2f..7877ab03f7 100644
--- a/src/logging/log_daemon.c
+++ b/src/logging/log_daemon.c
@@ -550,6 +550,7 @@ virLogDaemonUsage(const char *argv0, bool privileged)
               "  -f | --config <file>   Configuration file.\n"
               "  -V | --version         Display version information.\n"
               "  -p | --pid-file <file> Change name of PID file.\n"
+              "  -A | --no-admin-srv    Disable admin server startup.\n"
               "\n"
               "libvirt log management daemon:\n"), argv0);
 
@@ -610,6 +611,8 @@ int main(int argc, char **argv) {
     virLogDaemonConfig *config = NULL;
     int rv;
 
+    bool no_admin_srv = false;
+
     struct option opts[] = {
         { "verbose", no_argument, &verbose, 'v' },
         { "daemon", no_argument, &godaemon, 'd' },
@@ -618,6 +621,7 @@ int main(int argc, char **argv) {
         { "pid-file", required_argument, NULL, 'p' },
         { "version", no_argument, NULL, 'V' },
         { "help", no_argument, NULL, 'h' },
+        { "no-admin-srv", no_argument, NULL,'A' },
         { 0, 0, 0, 0 },
     };
 
@@ -634,7 +638,7 @@ int main(int argc, char **argv) {
         int c;
         char *tmp;
 
-        c = getopt_long(argc, argv, "df:p:t:vVh", opts, &optidx);
+        c = getopt_long(argc, argv, "df:p:t:vVhA", opts, &optidx);
 
         if (c == -1)
             break;
@@ -678,6 +682,10 @@ int main(int argc, char **argv) {
             virLogDaemonUsage(argv[0], privileged);
             exit(EXIT_SUCCESS);
 
+        case 'A':
+            no_admin_srv = true;
+            break;
+            
         case '?':
         default:
             virLogDaemonUsage(argv[0], privileged);
@@ -732,16 +740,18 @@ int main(int argc, char **argv) {
     VIR_DEBUG("Decided on pid file path '%s'", NULLSTR(pid_file));
 
     if (virDaemonUnixSocketPaths("virtlogd",
-                                 privileged,
-                                 NULL,
-                                 &sock_file,
-                                 NULL,
-                                 &admin_sock_file) < 0) {
+                                privileged,
+                                NULL,
+                                &sock_file,
+                                NULL,
+                                no_admin_srv ? NULL : &admin_sock_file) < 0) {
         VIR_ERROR(_("Can't determine socket paths"));
         exit(EXIT_FAILURE);
     }
-    VIR_DEBUG("Decided on socket paths '%s' and '%s'",
-              sock_file, admin_sock_file);
+    VIR_DEBUG("Decided on socket path '%s'", sock_file);
+    if (!no_admin_srv) {
+        VIR_DEBUG("Decided on socket path '%s'", admin_sock_file);
+    }
 
     if (virLogDaemonExecRestartStatePath(privileged,
                                          &state_file) < 0) {
@@ -819,7 +829,6 @@ int main(int argc, char **argv) {
         }
 
         logSrv = virNetDaemonGetServer(logDaemon->dmn, "virtlogd");
-        adminSrv = virNetDaemonGetServer(logDaemon->dmn, "admin");
 
         if (virNetServerAddServiceUNIX(logSrv,
                                        act, "virtlogd.socket",
@@ -829,13 +838,16 @@ int main(int argc, char **argv) {
             ret = VIR_DAEMON_ERR_NETWORK;
             goto cleanup;
         }
-        if (virNetServerAddServiceUNIX(adminSrv,
-                                       act, "virtlogd-admin.socket",
-                                       admin_sock_file, 0700, 0, 0,
-                                       NULL,
-                                       false, 0, 1) < 0) {
-            ret = VIR_DAEMON_ERR_NETWORK;
-            goto cleanup;
+        if (!no_admin_srv) {
+            adminSrv = virNetDaemonGetServer(logDaemon->dmn, "admin");
+            if (virNetServerAddServiceUNIX(adminSrv,
+                                        act, "virtlogd-admin.socket",
+                                        admin_sock_file, 0700, 0, 0,
+                                        NULL,
+                                        false, 0, 1) < 0) {
+                ret = VIR_DAEMON_ERR_NETWORK;
+                goto cleanup;
+            }
         }
 
         if (act &&
@@ -847,7 +859,7 @@ int main(int argc, char **argv) {
         logSrv = virNetDaemonGetServer(logDaemon->dmn, "virtlogd");
         /* If exec-restarting from old virtlogd, we won't have an
          * admin server present */
-        if (virNetDaemonHasServer(logDaemon->dmn, "admin"))
+        if (!no_admin_srv && virNetDaemonHasServer(logDaemon->dmn, "admin"))
             adminSrv = virNetDaemonGetServer(logDaemon->dmn, "admin");
     }
 
@@ -873,7 +885,7 @@ int main(int argc, char **argv) {
         goto cleanup;
     }
 
-    if (adminSrv != NULL) {
+    if (!no_admin_srv && adminSrv != NULL) {
         if (!(adminProgram = virNetServerProgramNew(ADMIN_PROGRAM,
                                                     ADMIN_PROTOCOL_VERSION,
                                                     adminProcs,
diff --git a/src/remote/remote_daemon.c b/src/remote/remote_daemon.c
index 9e82132654..522aad2177 100644
--- a/src/remote/remote_daemon.c
+++ b/src/remote/remote_daemon.c
@@ -722,6 +722,8 @@ daemonUsage(const char *argv0, bool privileged)
         { "-f | --config <file>", N_("Configuration file") },
         { "-V | --version", N_("Display version information") },
         { "-p | --pid-file <file>", N_("Change name of PID file") },
+        { "-A | --no-admin-srv", N_("Disable admin server startup")},
+        { "-R | --no-ro-srv", N_("Disable read-only server startup")},
     };
 
     fprintf(stderr, "\n");
@@ -806,6 +808,9 @@ int main(int argc, char **argv) {
     bool implicit_conf = false;
     char *run_dir = NULL;
     mode_t old_umask;
+    
+    bool no_admin_srv = false;
+    bool no_ro_srv = false;
 
     struct option opts[] = {
         { "verbose", no_argument, &verbose, 'v' },
@@ -818,6 +823,8 @@ int main(int argc, char **argv) {
         { "pid-file", required_argument, NULL, 'p' },
         { "version", no_argument, NULL, 'V' },
         { "help", no_argument, NULL, 'h' },
+        {"no-admin-srv", no_argument, NULL, 'A'},
+        {"no-ro-srv", no_argument, NULL, 'R'},
         { 0, 0, 0, 0 },
     };
 
@@ -834,9 +841,9 @@ int main(int argc, char **argv) {
         int c;
         char *tmp;
 #if defined(WITH_IP) && defined(LIBVIRTD)
-        const char *optstr = "ldf:p:t:vVh";
+        const char *optstr = "ldf:p:t:vVhAR";
 #else /* !(WITH_IP && LIBVIRTD) */
-        const char *optstr = "df:p:t:vVh";
+        const char *optstr = "df:p:t:vVhAR";
 #endif /* !(WITH_IP && LIBVIRTD) */
 
         c = getopt_long(argc, argv, optstr, opts, &optidx);
@@ -889,6 +896,14 @@ int main(int argc, char **argv) {
             daemonUsage(argv[0], privileged);
             exit(EXIT_SUCCESS);
 
+        case 'A':
+            no_admin_srv = true;
+            break;
+
+        case 'R':
+            no_ro_srv = true;
+            break;
+            
         case '?':
         default:
             daemonUsage(argv[0], privileged);
@@ -966,15 +981,18 @@ int main(int argc, char **argv) {
                                  privileged,
                                  config->unix_sock_dir,
                                  &sock_file,
-                                 &sock_file_ro,
-                                 &sock_file_adm) < 0) {
+                                 no_ro_srv ? NULL : &sock_file_ro,
+                                 no_admin_srv ? NULL : &sock_file_adm) < 0) {
         VIR_ERROR(_("Can't determine socket paths"));
         exit(EXIT_FAILURE);
     }
-    VIR_DEBUG("Decided on socket paths '%s', '%s' and '%s'",
-              sock_file,
-              NULLSTR(sock_file_ro),
-              NULLSTR(sock_file_adm));
+    VIR_DEBUG("Decided on socket path '%s'", sock_file);
+    if (!no_ro_srv) {
+        VIR_DEBUG("Decided on socket path '%s'", NULLSTR(sock_file_ro));
+    }
+    if (!no_admin_srv) {
+        VIR_DEBUG("Decided on socket path '%s'", NULLSTR(sock_file_adm));
+    }          
 
     if (godaemon) {
         if (chdir("/") < 0) {
@@ -1172,8 +1190,8 @@ int main(int argc, char **argv) {
                               privileged,
 #endif /* !WITH_IP */
                               sock_file,
-                              sock_file_ro,
-                              sock_file_adm) < 0) {
+                              no_ro_srv ? NULL : sock_file_ro,
+                              no_admin_srv ? NULL : sock_file_adm) < 0) {
         ret = VIR_DAEMON_ERR_NETWORK;
         goto cleanup;
     }
