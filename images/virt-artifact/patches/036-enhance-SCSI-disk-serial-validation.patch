diff --git a/pkg/util/hardware/hw_utils.go b/pkg/util/hardware/hw_utils.go
index a3bb25c3ab..cb38f3667a 100644
--- a/pkg/util/hardware/hw_utils.go
+++ b/pkg/util/hardware/hw_utils.go
@@ -35,6 +35,7 @@ import (
 
 const (
 	PCI_ADDRESS_PATTERN = `^([\da-fA-F]{4}):([\da-fA-F]{2}):([\da-fA-F]{2})\.([0-7]{1})$`
+	MaxSCSISerialLen    = 36
 )
 
 // Parse linux cpuset into an array of ints
@@ -178,3 +179,10 @@ func LookupDeviceVCPUAffinity(pciAddress string, domainSpec *api.DomainSpec) ([]
 	}
 	return alignedVCPUList, nil
 }
+
+func TruncateSCSIDiskSerial(serial string) string {
+	if len(serial) <= MaxSCSISerialLen {
+		return serial
+	}
+	return string([]byte(serial)[:MaxSCSISerialLen])
+}
diff --git a/pkg/virt-api/webhooks/mutating-webhook/mutators/vmi-mutator.go b/pkg/virt-api/webhooks/mutating-webhook/mutators/vmi-mutator.go
index 2747d6b7ea..65a861b3fe 100644
--- a/pkg/virt-api/webhooks/mutating-webhook/mutators/vmi-mutator.go
+++ b/pkg/virt-api/webhooks/mutating-webhook/mutators/vmi-mutator.go
@@ -36,6 +36,7 @@ import (
 	"kubevirt.io/kubevirt/pkg/apimachinery/patch"
 	kvpointer "kubevirt.io/kubevirt/pkg/pointer"
 	"kubevirt.io/kubevirt/pkg/util"
+	hwutil "kubevirt.io/kubevirt/pkg/util/hardware"
 	webhookutils "kubevirt.io/kubevirt/pkg/util/webhooks"
 	"kubevirt.io/kubevirt/pkg/virt-api/webhooks"
 	virtconfig "kubevirt.io/kubevirt/pkg/virt-config"
@@ -98,6 +99,22 @@ func (mutator *VMIsMutator) Mutate(ar *admissionv1.AdmissionReview) *admissionv1
 			addNodeSelector(newVMI, v1.SEVESLabel)
 		}
 
+		// To maintain backward compatibility, a mutation webhook was added.
+		// This ensures that if a VMI is created by another controller within KubeVirt (instead of a user), the serial number is automatically truncated to MaxSCSISerialLen.
+		// This prevents issues where an existing VM with an invalid serial length would fail validation when starting a VMI.
+		// Without this, such a VM could break due to the validation webhook rejecting the creation of VMI, effectively blocking its startup.
+		for _, ref := range newVMI.OwnerReferences {
+			if ref.APIVersion == v1.SchemeGroupVersion.String() {
+				for i := range newVMI.Spec.Domain.Devices.Disks {
+					d := &newVMI.Spec.Domain.Devices.Disks[i]
+					if d.Disk != nil && d.Disk.Bus == v1.DiskBusSCSI {
+						d.Serial = hwutil.TruncateSCSIDiskSerial(d.Serial)
+					}
+				}
+				break
+			}
+		}
+
 		if newVMI.Spec.Domain.CPU.IsolateEmulatorThread {
 			_, emulatorThreadCompleteToEvenParityAnnotationExists := mutator.ClusterConfig.GetConfigFromKubeVirtCR().Annotations[v1.EmulatorThreadCompleteToEvenParity]
 			if emulatorThreadCompleteToEvenParityAnnotationExists &&
diff --git a/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go b/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go
index edcdd358bb..b008cd40ae 100644
--- a/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go
+++ b/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go
@@ -2034,13 +2034,22 @@ func validateSerialNumValue(field *k8sfield.Path, idx int, disk v1.Disk) []metav
 
 func validateSerialNumLength(field *k8sfield.Path, idx int, disk v1.Disk) []metav1.StatusCause {
 	var causes []metav1.StatusCause
-	if disk.Serial != "" && len([]rune(disk.Serial)) > maxStrLen {
+
+	if disk.Disk != nil && disk.Disk.Bus == v1.DiskBusSCSI && len(disk.Serial) > hwutil.MaxSCSISerialLen {
 		causes = append(causes, metav1.StatusCause{
 			Type:    metav1.CauseTypeFieldValueInvalid,
-			Message: fmt.Sprintf("%s must be less than or equal to %d in length, if specified", field.Index(idx).String(), maxStrLen),
+			Message: fmt.Sprintf("SCSI device serial should not be more than %d symbols. Got %d (%s) for disk %s", hwutil.MaxSCSISerialLen, len(disk.Serial), disk.Serial, field.Index(idx).String()),
+			Field:   field.Index(idx).Child("serial").String(),
+		})
+
+	} else if len(disk.Serial) > maxStrLen {
+		causes = append(causes, metav1.StatusCause{
+			Type:    metav1.CauseTypeFieldValueInvalid,
+			Message: fmt.Sprintf("disk serial should not be more than %d symbols. Got %d (%s) for disk %s.", maxStrLen, len(disk.Serial), disk.Serial, field.Index(idx).String()),
 			Field:   field.Index(idx).Child("serial").String(),
 		})
 	}
+
 	return causes
 }
 
diff --git a/pkg/virt-launcher/virtwrap/converter/converter.go b/pkg/virt-launcher/virtwrap/converter/converter.go
index 393415c36c..cc09800afc 100644
--- a/pkg/virt-launcher/virtwrap/converter/converter.go
+++ b/pkg/virt-launcher/virtwrap/converter/converter.go
@@ -37,6 +37,7 @@ import (
 	"syscall"
 
 	"kubevirt.io/kubevirt/pkg/storage/reservation"
+	hwutil "kubevirt.io/kubevirt/pkg/util/hardware"
 	"kubevirt.io/kubevirt/pkg/virt-controller/watch/topology"
 
 	"golang.org/x/sys/unix"
@@ -168,10 +169,15 @@ func Convert_v1_Disk_To_api_Disk(c *ConverterContext, diskDevice *v1.Disk, disk
 	if diskDevice.Disk != nil {
 		var unit int
 		disk.Device = "disk"
+		disk.Serial = diskDevice.Serial
 		disk.Target.Bus = diskDevice.Disk.Bus
 		disk.Target.Device, unit = makeDeviceName(diskDevice.Name, diskDevice.Disk.Bus, prefixMap)
 		if diskDevice.Disk.Bus == "scsi" {
 			assignDiskToSCSIController(disk, unit)
+			// Force truncation of serial number to MaxSCSISerialLen characters, as QEMU no longer does this automatically.
+			// This is required to maintain backward compatibility. Specifying devices with serial numbers longer than MaxSCSISerialLen
+			// characters is not allowed now.
+			disk.Serial = hwutil.TruncateSCSIDiskSerial(diskDevice.Serial)
 		}
 		if diskDevice.Disk.PciAddress != "" {
 			if diskDevice.Disk.Bus != v1.DiskBusVirtio {
@@ -187,7 +193,6 @@ func Convert_v1_Disk_To_api_Disk(c *ConverterContext, diskDevice *v1.Disk, disk
 			disk.Model = InterpretTransitionalModelType(&c.UseVirtioTransitional, c.Architecture)
 		}
 		disk.ReadOnly = toApiReadOnly(diskDevice.Disk.ReadOnly)
-		disk.Serial = diskDevice.Serial
 		if diskDevice.Shareable != nil {
 			if *diskDevice.Shareable {
 				if diskDevice.Cache == "" {
diff --git a/pkg/virt-launcher/virtwrap/live-migration-source.go b/pkg/virt-launcher/virtwrap/live-migration-source.go
index f580d06e52..10ee1a624b 100644
--- a/pkg/virt-launcher/virtwrap/live-migration-source.go
+++ b/pkg/virt-launcher/virtwrap/live-migration-source.go
@@ -30,6 +30,7 @@ import (
 	"libvirt.org/go/libvirtxml"
 
 	hostdisk "kubevirt.io/kubevirt/pkg/host-disk"
+	hwutil "kubevirt.io/kubevirt/pkg/util/hardware"
 	"kubevirt.io/kubevirt/pkg/util/migrations"
 
 	cmdv1 "kubevirt.io/kubevirt/pkg/handler-launcher-com/cmd/v1"
@@ -239,6 +240,13 @@ func migratableDomXML(dom cli.VirDomain, vmi *v1.VirtualMachineInstance, domSpec
 		}
 	}
 
+	for i := range domcfg.Devices.Disks {
+		disk := &domcfg.Devices.Disks[i]
+		if disk.Target.Bus == "scsi" {
+			disk.Serial = hwutil.TruncateSCSIDiskSerial(disk.Serial)
+		}
+	}
+
 	return domcfg.Marshal()
 }
 
