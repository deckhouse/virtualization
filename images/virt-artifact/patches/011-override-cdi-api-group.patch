diff --git a/pkg/storage/export/export/export.go b/pkg/storage/export/export/export.go
index 51eb69df6..aafd7d05c 100644
--- a/pkg/storage/export/export/export.go
+++ b/pkg/storage/export/export/export.go
@@ -140,7 +140,7 @@ var exportGVK = schema.GroupVersionKind{
 }
 
 var datavolumeGVK = schema.GroupVersionKind{
-	Group:   cdiv1.SchemeGroupVersion.Group,
+	Group:   "x.virtualization.deckhouse.cdi.kubevirt.io",
 	Version: cdiv1.SchemeGroupVersion.Version,
 	Kind:    "DataVolume",
 }
diff --git a/pkg/storage/export/virt-exportserver/exportserver.go b/pkg/storage/export/virt-exportserver/exportserver.go
index 388f9c752..17d673e50 100644
--- a/pkg/storage/export/virt-exportserver/exportserver.go
+++ b/pkg/storage/export/virt-exportserver/exportserver.go
@@ -579,7 +579,7 @@ func vmHandler(filePath string, vi []VolumeInfo, getBasePath func() (string, err
 		for _, dv := range datavolumes {
 			dv.TypeMeta = metav1.TypeMeta{
 				Kind:       "DataVolume",
-				APIVersion: "cdi.kubevirt.io/v1beta1",
+				APIVersion: "x.virtualization.deckhouse.cdi.kubevirt.io/v1beta1",
 			}
 			for _, info := range vi {
 				if strings.Contains(info.RawGzURI, dv.Name) {
diff --git a/pkg/virt-operator/resource/generate/rbac/apiserver.go b/pkg/virt-operator/resource/generate/rbac/apiserver.go
index 99e8fe12d..f3eaad262 100644
--- a/pkg/virt-operator/resource/generate/rbac/apiserver.go
+++ b/pkg/virt-operator/resource/generate/rbac/apiserver.go
@@ -208,7 +208,7 @@ func newApiServerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"cdi.kubevirt.io",
+					"x.virtualization.deckhouse.cdi.kubevirt.io",
 				},
 				Resources: []string{
 					"datasources",
diff --git a/pkg/virt-operator/resource/generate/rbac/controller.go b/pkg/virt-operator/resource/generate/rbac/controller.go
index 474ab93b0..6bb8f66fb 100644
--- a/pkg/virt-operator/resource/generate/rbac/controller.go
+++ b/pkg/virt-operator/resource/generate/rbac/controller.go
@@ -380,7 +380,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"cdi.kubevirt.io",
+					"x.virtualization.deckhouse.cdi.kubevirt.io",
 				},
 				Resources: []string{
 					"*",
diff --git a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go
index 3ac7803dd..375e5b765 100644
--- a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go
+++ b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go
@@ -31,10 +31,6 @@ import (
 var Scheme = runtime.NewScheme()
 var Codecs = serializer.NewCodecFactory(Scheme)
 var ParameterCodec = runtime.NewParameterCodec(Scheme)
-var localSchemeBuilder = runtime.SchemeBuilder{
-	cdiv1beta1.AddToScheme,
-	uploadv1beta1.AddToScheme,
-}
 
 // AddToScheme adds all types of this clientset into the given scheme. This allows composition
 // of clientsets, like in:
@@ -50,9 +46,55 @@ var localSchemeBuilder = runtime.SchemeBuilder{
 //
 // After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
 // correctly.
-var AddToScheme = localSchemeBuilder.AddToScheme
+var AddToScheme func(scheme *runtime.Scheme) error
 
 func init() {
+	cdiv1beta1.SchemeGroupVersion.Group = "x.virtualization.deckhouse.cdi.kubevirt.io"
+	cdiv1beta1.CDIGroupVersionKind.Group = "x.virtualization.deckhouse.cdi.kubevirt.io"
+	cdiv1beta1.SchemeBuilder = runtime.NewSchemeBuilder(func(scheme *runtime.Scheme) error {
+		scheme.AddKnownTypes(cdiv1beta1.SchemeGroupVersion,
+			&cdiv1beta1.DataVolume{},
+			&cdiv1beta1.DataVolumeList{},
+			&cdiv1beta1.CDIConfig{},
+			&cdiv1beta1.CDIConfigList{},
+			&cdiv1beta1.CDI{},
+			&cdiv1beta1.CDIList{},
+			&cdiv1beta1.StorageProfile{},
+			&cdiv1beta1.StorageProfileList{},
+			&cdiv1beta1.DataSource{},
+			&cdiv1beta1.DataSourceList{},
+			&cdiv1beta1.DataImportCron{},
+			&cdiv1beta1.DataImportCronList{},
+			&cdiv1beta1.ObjectTransfer{},
+			&cdiv1beta1.ObjectTransferList{},
+			&cdiv1beta1.VolumeImportSource{},
+			&cdiv1beta1.VolumeImportSourceList{},
+			&cdiv1beta1.VolumeUploadSource{},
+			&cdiv1beta1.VolumeUploadSourceList{},
+			&cdiv1beta1.VolumeCloneSource{},
+			&cdiv1beta1.VolumeCloneSourceList{},
+		)
+		v1.AddToGroupVersion(scheme, cdiv1beta1.SchemeGroupVersion)
+		return nil
+	})
+	cdiv1beta1.AddToScheme = cdiv1beta1.SchemeBuilder.AddToScheme
+
+	uploadv1beta1.SchemeGroupVersion.Group = "x.virtualization.deckhouse.upload.cdi.kubevirt.io"
+	uploadv1beta1.SchemeBuilder = runtime.NewSchemeBuilder(func(scheme *runtime.Scheme) error {
+		scheme.AddKnownTypes(uploadv1beta1.SchemeGroupVersion,
+			&uploadv1beta1.UploadTokenRequest{},
+			&uploadv1beta1.UploadTokenRequestList{},
+		)
+		v1.AddToGroupVersion(scheme, uploadv1beta1.SchemeGroupVersion)
+		return nil
+	})
+	uploadv1beta1.AddToScheme = uploadv1beta1.SchemeBuilder.AddToScheme
+
+	AddToScheme = (&runtime.SchemeBuilder{
+		cdiv1beta1.AddToScheme,
+		uploadv1beta1.AddToScheme,
+	}).AddToScheme
+
 	v1.AddToGroupVersion(Scheme, schema.GroupVersion{Version: "v1"})
 	utilruntime.Must(AddToScheme(Scheme))
 }
diff --git a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go
index 2fd57771a..761837393 100644
--- a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go
+++ b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go
@@ -113,6 +113,7 @@ func New(c rest.Interface) *CdiV1beta1Client {
 
 func setConfigDefaults(config *rest.Config) error {
 	gv := v1beta1.SchemeGroupVersion
+	gv.Group = "x.virtualization.deckhouse.cdi.kubevirt.io"
 	config.GroupVersion = &gv
 	config.APIPath = "/apis"
 	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()
diff --git a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/upload/v1beta1/upload_client.go b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/upload/v1beta1/upload_client.go
index 45b11c45f..13d0ad8c7 100644
--- a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/upload/v1beta1/upload_client.go
+++ b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/upload/v1beta1/upload_client.go
@@ -68,6 +68,7 @@ func New(c rest.Interface) *UploadV1beta1Client {
 
 func setConfigDefaults(config *rest.Config) error {
 	gv := v1beta1.SchemeGroupVersion
+	gv.Group = "x.virtualization.deckhouse.upload.cdi.kubevirt.io"
 	config.GroupVersion = &gv
 	config.APIPath = "/apis"
 	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()
