diff --git a/pkg/virt-api/webhooks/validating-webhook/admitters/util.go b/pkg/virt-api/webhooks/validating-webhook/admitters/util.go
new file mode 100644
index 0000000000..6d0699b12d
--- /dev/null
+++ b/pkg/virt-api/webhooks/validating-webhook/admitters/util.go
@@ -0,0 +1,19 @@
+package admitters
+
+import (
+	"k8s.io/apimachinery/pkg/api/equality"
+	v1 "kubevirt.io/api/core/v1"
+)
+
+func equalDiskIgnoreSerial(newDisk, oldDisk v1.Disk) bool {
+	return equality.Semantic.DeepEqual(newDisk.Name, oldDisk.Name) &&
+		equality.Semantic.DeepEqual(newDisk.DiskDevice, oldDisk.DiskDevice) &&
+		equality.Semantic.DeepEqual(newDisk.BootOrder, oldDisk.BootOrder) &&
+		equality.Semantic.DeepEqual(newDisk.DedicatedIOThread, oldDisk.DedicatedIOThread) &&
+		equality.Semantic.DeepEqual(newDisk.Cache, oldDisk.Cache) &&
+		equality.Semantic.DeepEqual(newDisk.IO, oldDisk.IO) &&
+		equality.Semantic.DeepEqual(newDisk.Tag, oldDisk.Tag) &&
+		equality.Semantic.DeepEqual(newDisk.BlockSize, oldDisk.BlockSize) &&
+		equality.Semantic.DeepEqual(newDisk.Shareable, oldDisk.Shareable) &&
+		equality.Semantic.DeepEqual(newDisk.ErrorPolicy, oldDisk.ErrorPolicy)
+}
diff --git a/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-update-admitter.go b/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-update-admitter.go
index b984ff4262..8201d9375b 100644
--- a/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-update-admitter.go
+++ b/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-update-admitter.go
@@ -189,7 +189,8 @@ func verifyHotplugVolumes(newHotplugVolumeMap, oldHotplugVolumeMap map[string]v1
 						},
 					})
 				}
-				if !equality.Semantic.DeepEqual(newDisks[k], oldDisks[k]) {
+
+				if !equalDiskIgnoreSerial(newDisks[k], oldDisks[k]) {
 					return webhookutils.ToAdmissionResponse([]metav1.StatusCause{
 						{
 							Type:    metav1.CauseTypeFieldValueInvalid,
@@ -292,7 +293,8 @@ func verifyPermanentVolumes(newPermanentVolumeMap, oldPermanentVolumeMap map[str
 				},
 			})
 		}
-		if !equality.Semantic.DeepEqual(newDisks[k], oldDisks[k]) {
+
+		if !equalDiskIgnoreSerial(newDisks[k], oldDisks[k]) {
 			return webhookutils.ToAdmissionResponse([]metav1.StatusCause{
 				{
 					Type:    metav1.CauseTypeFieldValueInvalid,
