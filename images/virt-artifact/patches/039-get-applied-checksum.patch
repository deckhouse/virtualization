diff --git a/pkg/handler-launcher-com/cmd/info/info.pb.go b/pkg/handler-launcher-com/cmd/info/info.pb.go
index b61aea7a28..2ac0a4c73a 100644
--- a/pkg/handler-launcher-com/cmd/info/info.pb.go
+++ b/pkg/handler-launcher-com/cmd/info/info.pb.go
@@ -15,15 +15,12 @@ It has these top-level messages:
 */
 package info
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/handler-launcher-com/cmd/v1/cmd.pb.go b/pkg/handler-launcher-com/cmd/v1/cmd.pb.go
index 51db398841..6f41c22374 100644
--- a/pkg/handler-launcher-com/cmd/v1/cmd.pb.go
+++ b/pkg/handler-launcher-com/cmd/v1/cmd.pb.go
@@ -41,18 +41,16 @@ It has these top-level messages:
 	SEVInfoResponse
 	LaunchMeasurementResponse
 	InjectLaunchSecretRequest
+	VMIChecksumResponse
 */
 package v1
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
@@ -932,6 +930,30 @@ func (m *InjectLaunchSecretRequest) GetOptions() []byte {
 	return nil
 }
 
+type VMIChecksumResponse struct {
+	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
+	Checksum string    `protobuf:"bytes,2,opt,name=checksum" json:"checksum,omitempty"`
+}
+
+func (m *VMIChecksumResponse) Reset()                    { *m = VMIChecksumResponse{} }
+func (m *VMIChecksumResponse) String() string            { return proto.CompactTextString(m) }
+func (*VMIChecksumResponse) ProtoMessage()               {}
+func (*VMIChecksumResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }
+
+func (m *VMIChecksumResponse) GetResponse() *Response {
+	if m != nil {
+		return m.Response
+	}
+	return nil
+}
+
+func (m *VMIChecksumResponse) GetChecksum() string {
+	if m != nil {
+		return m.Checksum
+	}
+	return ""
+}
+
 func init() {
 	proto.RegisterType((*QemuVersionResponse)(nil), "kubevirt.cmd.v1.QemuVersionResponse")
 	proto.RegisterType((*VMI)(nil), "kubevirt.cmd.v1.VMI")
@@ -964,6 +986,7 @@ func init() {
 	proto.RegisterType((*SEVInfoResponse)(nil), "kubevirt.cmd.v1.SEVInfoResponse")
 	proto.RegisterType((*LaunchMeasurementResponse)(nil), "kubevirt.cmd.v1.LaunchMeasurementResponse")
 	proto.RegisterType((*InjectLaunchSecretRequest)(nil), "kubevirt.cmd.v1.InjectLaunchSecretRequest")
+	proto.RegisterType((*VMIChecksumResponse)(nil), "kubevirt.cmd.v1.VMIChecksumResponse")
 }
 
 // Reference imports to suppress errors if they are not otherwise used.
@@ -1007,6 +1030,7 @@ type CmdClient interface {
 	GetSEVInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SEVInfoResponse, error)
 	GetLaunchMeasurement(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*LaunchMeasurementResponse, error)
 	InjectLaunchSecret(ctx context.Context, in *InjectLaunchSecretRequest, opts ...grpc.CallOption) (*Response, error)
+	GetAppliedVMIChecksum(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VMIChecksumResponse, error)
 }
 
 type cmdClient struct {
@@ -1287,6 +1311,15 @@ func (c *cmdClient) InjectLaunchSecret(ctx context.Context, in *InjectLaunchSecr
 	return out, nil
 }
 
+func (c *cmdClient) GetAppliedVMIChecksum(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VMIChecksumResponse, error) {
+	out := new(VMIChecksumResponse)
+	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetAppliedVMIChecksum", in, out, c.cc, opts...)
+	if err != nil {
+		return nil, err
+	}
+	return out, nil
+}
+
 // Server API for Cmd service
 
 type CmdServer interface {
@@ -1320,6 +1353,7 @@ type CmdServer interface {
 	GetSEVInfo(context.Context, *EmptyRequest) (*SEVInfoResponse, error)
 	GetLaunchMeasurement(context.Context, *VMIRequest) (*LaunchMeasurementResponse, error)
 	InjectLaunchSecret(context.Context, *InjectLaunchSecretRequest) (*Response, error)
+	GetAppliedVMIChecksum(context.Context, *EmptyRequest) (*VMIChecksumResponse, error)
 }
 
 func RegisterCmdServer(s *grpc.Server, srv CmdServer) {
@@ -1866,6 +1900,24 @@ func _Cmd_InjectLaunchSecret_Handler(srv interface{}, ctx context.Context, dec f
 	return interceptor(ctx, in, info, handler)
 }
 
+func _Cmd_GetAppliedVMIChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
+	in := new(EmptyRequest)
+	if err := dec(in); err != nil {
+		return nil, err
+	}
+	if interceptor == nil {
+		return srv.(CmdServer).GetAppliedVMIChecksum(ctx, in)
+	}
+	info := &grpc.UnaryServerInfo{
+		Server:     srv,
+		FullMethod: "/kubevirt.cmd.v1.Cmd/GetAppliedVMIChecksum",
+	}
+	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
+		return srv.(CmdServer).GetAppliedVMIChecksum(ctx, req.(*EmptyRequest))
+	}
+	return interceptor(ctx, in, info, handler)
+}
+
 var _Cmd_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "kubevirt.cmd.v1.Cmd",
 	HandlerType: (*CmdServer)(nil),
@@ -1990,6 +2042,10 @@ var _Cmd_serviceDesc = grpc.ServiceDesc{
 			MethodName: "InjectLaunchSecret",
 			Handler:    _Cmd_InjectLaunchSecret_Handler,
 		},
+		{
+			MethodName: "GetAppliedVMIChecksum",
+			Handler:    _Cmd_GetAppliedVMIChecksum_Handler,
+		},
 	},
 	Streams:  []grpc.StreamDesc{},
 	Metadata: "pkg/handler-launcher-com/cmd/v1/cmd.proto",
@@ -1998,118 +2054,121 @@ var _Cmd_serviceDesc = grpc.ServiceDesc{
 func init() { proto.RegisterFile("pkg/handler-launcher-com/cmd/v1/cmd.proto", fileDescriptor0) }
 
 var fileDescriptor0 = []byte{
-	// 1802 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x5f, 0x6f, 0x23, 0xb7,
-	0x11, 0x3f, 0x59, 0xb2, 0x2d, 0x8d, 0xff, 0xe4, 0x8e, 0xfe, 0x93, 0xb5, 0xdb, 0xbb, 0x73, 0x89,
-	0xe2, 0xe0, 0x14, 0x89, 0xdd, 0xbb, 0x5c, 0x82, 0xe2, 0x50, 0x04, 0x17, 0xcb, 0xb2, 0xe3, 0xe4,
-	0x7c, 0xa7, 0xac, 0x6c, 0x1f, 0x9a, 0x36, 0x08, 0xe8, 0x5d, 0x5a, 0x66, 0xbd, 0x4b, 0x2a, 0x4b,
-	0xae, 0x7a, 0xca, 0x53, 0x81, 0x14, 0x7d, 0x28, 0xd0, 0xcf, 0xd7, 0xb7, 0x7e, 0x8b, 0x02, 0x7d,
-	0x0c, 0xc8, 0xe5, 0xca, 0x2b, 0xed, 0xae, 0x7d, 0x86, 0xf4, 0x64, 0x92, 0x33, 0xf3, 0x9b, 0x21,
-	0x39, 0x33, 0xfc, 0x69, 0x0d, 0x1f, 0xf5, 0xae, 0xba, 0xbb, 0x97, 0x84, 0xfb, 0x01, 0x8d, 0x3e,
-	0x09, 0x48, 0xcc, 0xbd, 0x4b, 0x1a, 0x7d, 0xe2, 0x89, 0x70, 0xd7, 0x0b, 0xfd, 0xdd, 0xfe, 0x53,
-	0xfd, 0x67, 0xa7, 0x17, 0x09, 0x25, 0xd0, 0x07, 0x57, 0xf1, 0x39, 0xed, 0xb3, 0x48, 0xed, 0xe8,
-	0xb5, 0xfe, 0x53, 0x7c, 0x01, 0x2b, 0xdf, 0xd2, 0x30, 0x3e, 0xa3, 0x91, 0x64, 0x82, 0xbb, 0x54,
-	0xf6, 0x04, 0x97, 0x14, 0x7d, 0x06, 0xf5, 0xc8, 0x8e, 0x9d, 0xca, 0x56, 0x65, 0x7b, 0xe1, 0xd9,
-	0xc6, 0xce, 0x98, 0xe9, 0x4e, 0xaa, 0xec, 0x0e, 0x55, 0x91, 0x03, 0xf3, 0xfd, 0x04, 0xc9, 0x99,
-	0xd9, 0xaa, 0x6c, 0x37, 0xdc, 0x74, 0x8a, 0x1f, 0x43, 0xf5, 0xec, 0xf8, 0xc8, 0x28, 0x84, 0xec,
-	0x6b, 0x29, 0xb8, 0x81, 0x5d, 0x74, 0xd3, 0x29, 0x7e, 0x0a, 0xd5, 0x66, 0xfb, 0x14, 0x2d, 0xc3,
-	0x0c, 0xf3, 0x8d, 0x6c, 0xc9, 0x9d, 0x61, 0x3e, 0xda, 0x84, 0xba, 0x64, 0xe7, 0x01, 0xe3, 0x5d,
-	0xe9, 0xcc, 0x6c, 0x55, 0xb7, 0x97, 0xdc, 0xe1, 0x1c, 0xef, 0xc2, 0x7c, 0x27, 0x19, 0xe7, 0xcc,
-	0x56, 0x61, 0xb6, 0x4f, 0x82, 0x98, 0x9a, 0x30, 0x6a, 0x6e, 0x32, 0xc1, 0x2d, 0x98, 0x6d, 0x93,
-	0x2e, 0x95, 0x5a, 0xec, 0x89, 0x98, 0x2b, 0x63, 0x51, 0x73, 0x93, 0x09, 0x42, 0x50, 0x8b, 0x39,
-	0x53, 0x36, 0x74, 0x33, 0xd6, 0x6b, 0x92, 0xfd, 0x44, 0x9d, 0xaa, 0x81, 0x36, 0x63, 0xfc, 0x1c,
-	0xe6, 0x8e, 0x69, 0x28, 0xa2, 0x01, 0x5a, 0x87, 0x39, 0x12, 0x66, 0x80, 0xec, 0xac, 0x08, 0x09,
-	0xff, 0xa7, 0x02, 0xb5, 0x26, 0x0d, 0x82, 0x5c, 0xac, 0xbb, 0x30, 0x17, 0x1a, 0x38, 0xa3, 0xbe,
-	0xf0, 0xec, 0xc3, 0xdc, 0x49, 0x27, 0xde, 0x5c, 0xab, 0x86, 0x3e, 0x86, 0xd9, 0x9e, 0xde, 0x86,
-	0x53, 0xdd, 0xaa, 0x6e, 0x2f, 0x3c, 0x5b, 0xcf, 0xe9, 0x9b, 0x4d, 0xba, 0x89, 0x12, 0xfa, 0x1c,
-	0x1a, 0x3e, 0x93, 0x8a, 0x70, 0x8f, 0x4a, 0xa7, 0x66, 0x2c, 0x9c, 0x9c, 0x85, 0x3d, 0x47, 0xf7,
-	0x5a, 0x15, 0x6d, 0x43, 0xcd, 0xeb, 0xc5, 0xd2, 0x99, 0x35, 0x26, 0xab, 0x39, 0x93, 0x66, 0xfb,
-	0xd4, 0x35, 0x1a, 0xf8, 0x25, 0xd4, 0x4f, 0x44, 0x4f, 0x04, 0xa2, 0x3b, 0x40, 0xcf, 0x01, 0x78,
-	0x1c, 0x92, 0x1f, 0x3c, 0x1a, 0x04, 0xd2, 0xa9, 0x18, 0xdb, 0xb5, 0xbc, 0x2d, 0x0d, 0x02, 0xb7,
-	0xa1, 0x15, 0xf5, 0x48, 0xe2, 0x7f, 0x55, 0x60, 0xae, 0x73, 0xbc, 0xc7, 0x84, 0x44, 0x18, 0x16,
-	0x43, 0xc2, 0xe3, 0x0b, 0xe2, 0xa9, 0x38, 0xa2, 0x91, 0x39, 0xa7, 0x86, 0x3b, 0xb2, 0xa6, 0xb3,
-	0xa8, 0x17, 0x09, 0x3f, 0xf6, 0xd2, 0x13, 0x4e, 0xa7, 0xd9, 0x04, 0xac, 0x8e, 0x24, 0x20, 0xba,
-	0x0f, 0x55, 0x79, 0x15, 0x3b, 0x35, 0xb3, 0xaa, 0x87, 0xfa, 0xf2, 0x2e, 0x48, 0xc8, 0x82, 0x81,
-	0x33, 0x6b, 0x16, 0xed, 0x0c, 0xff, 0xb3, 0x02, 0xf5, 0x7d, 0x26, 0xaf, 0x8e, 0xf8, 0x85, 0x30,
-	0x4a, 0x22, 0x0a, 0x89, 0xb2, 0x81, 0xd8, 0x19, 0xda, 0x82, 0x85, 0x73, 0xe2, 0x5d, 0x31, 0xde,
-	0x3d, 0x60, 0x01, 0xb5, 0x61, 0x64, 0x97, 0xd0, 0x23, 0x00, 0x1d, 0x2f, 0x09, 0x3a, 0x69, 0xfe,
-	0xd4, 0xdc, 0xcc, 0x8a, 0x46, 0xd0, 0x47, 0x92, 0x2a, 0xd4, 0x8c, 0x42, 0x76, 0x09, 0xff, 0xaf,
-	0x02, 0x4b, 0xcd, 0x20, 0x96, 0x8a, 0x46, 0x4d, 0xc1, 0x2f, 0x58, 0x17, 0xed, 0x00, 0x6a, 0xbd,
-	0xeb, 0x11, 0xee, 0xeb, 0xf8, 0x64, 0x8b, 0x93, 0xf3, 0x80, 0x26, 0xa9, 0x54, 0x77, 0x0b, 0x24,
-	0xe8, 0x8f, 0xb0, 0x71, 0x10, 0x51, 0xaa, 0xf3, 0xc1, 0xa5, 0x3d, 0x11, 0x29, 0xc6, 0xbb, 0xfb,
-	0x4c, 0x26, 0x66, 0x33, 0xc6, 0xac, 0x5c, 0x01, 0xbd, 0x00, 0x67, 0x4f, 0x78, 0x97, 0x72, 0x9f,
-	0xc9, 0x5e, 0x40, 0x06, 0x07, 0x22, 0x6a, 0x1d, 0x1c, 0x1d, 0xc6, 0x54, 0x2a, 0x69, 0xf6, 0x53,
-	0x77, 0x4b, 0xe5, 0xda, 0xb6, 0x43, 0x23, 0x46, 0x82, 0xa6, 0xe0, 0x52, 0x04, 0xf4, 0x95, 0xb8,
-	0x76, 0x5c, 0x4b, 0x6c, 0xcb, 0xe4, 0xf8, 0x53, 0xd8, 0x38, 0xe2, 0x8a, 0x46, 0x17, 0xc4, 0xa3,
-	0x7b, 0x8c, 0xfb, 0x8c, 0x77, 0x8f, 0x59, 0x37, 0x22, 0x4a, 0xdf, 0xe3, 0xba, 0x2e, 0x3e, 0x75,
-	0x29, 0xfc, 0xf4, 0x42, 0x92, 0x19, 0xfe, 0xef, 0x3c, 0xac, 0x9d, 0x25, 0x87, 0x77, 0x4c, 0xbc,
-	0x4b, 0xc6, 0xe9, 0x9b, 0x9e, 0x36, 0x90, 0xe8, 0x1b, 0x58, 0x1d, 0x15, 0x24, 0x99, 0x66, 0xfb,
-	0x5a, 0xbe, 0xda, 0x12, 0xb1, 0x5b, 0x68, 0x84, 0x9e, 0xc3, 0xda, 0x31, 0x0d, 0xf7, 0x48, 0x10,
-	0x08, 0xc1, 0x3b, 0x8a, 0x28, 0xd9, 0xa6, 0x11, 0x13, 0xc9, 0x69, 0x2e, 0xb9, 0xc5, 0x42, 0xf4,
-	0x7b, 0x58, 0x69, 0x47, 0x54, 0xaf, 0x7b, 0x44, 0x51, 0xff, 0x4c, 0x04, 0x71, 0x68, 0xeb, 0xb7,
-	0xe1, 0x16, 0x89, 0x74, 0x03, 0x56, 0xb6, 0xa6, 0xcc, 0x79, 0x15, 0x35, 0xe0, 0xb4, 0xe8, 0xdc,
-	0xa1, 0x2a, 0xea, 0x40, 0xc3, 0x24, 0x80, 0xce, 0x5d, 0x5b, 0xb9, 0x9f, 0xe5, 0xec, 0x0a, 0x8f,
-	0x69, 0x67, 0x68, 0xd7, 0xe2, 0x2a, 0x1a, 0xb8, 0xd7, 0x38, 0x25, 0x59, 0x37, 0x57, 0x9a, 0x75,
-	0xfb, 0xb0, 0xe4, 0x65, 0xd3, 0xd6, 0x99, 0x37, 0x1b, 0x78, 0x94, 0x6f, 0x03, 0x59, 0x2d, 0x77,
-	0xd4, 0x08, 0xfd, 0x5c, 0x81, 0x0d, 0x96, 0xa6, 0xc1, 0xbe, 0x08, 0x09, 0xe3, 0x5f, 0x2a, 0x45,
-	0xbc, 0xcb, 0x90, 0x72, 0xe5, 0xd4, 0xcd, 0xde, 0x5a, 0xef, 0xb9, 0xb7, 0xa3, 0x32, 0x9c, 0x64,
-	0xaf, 0xe5, 0x7e, 0x10, 0x07, 0x34, 0x14, 0x0e, 0x93, 0xd0, 0x69, 0x18, 0xef, 0x5f, 0xdc, 0xd5,
-	0xfb, 0x10, 0x20, 0x71, 0x5b, 0x80, 0xbc, 0xf9, 0x16, 0x96, 0x47, 0x2f, 0x42, 0x37, 0xae, 0x2b,
-	0x3a, 0xb0, 0xd9, 0xae, 0x87, 0x68, 0x37, 0xfb, 0xb8, 0x15, 0x25, 0x46, 0xda, 0xbd, 0xec, 0xbb,
-	0xf7, 0x62, 0xe6, 0x0f, 0x95, 0xcd, 0x57, 0xf0, 0xe8, 0xe6, 0x53, 0x28, 0x70, 0x34, 0xf2, 0x8a,
-	0x36, 0xb2, 0x68, 0x3f, 0xc2, 0x87, 0x25, 0xbb, 0x2a, 0x80, 0x79, 0x39, 0x1a, 0xef, 0xef, 0x72,
-	0xf1, 0x96, 0x56, 0x7b, 0xc6, 0x25, 0xee, 0x03, 0x9c, 0x1d, 0x1f, 0xb9, 0xf4, 0x47, 0xdd, 0x60,
-	0xd0, 0x13, 0xa8, 0xf6, 0x43, 0x66, 0x6b, 0x38, 0xff, 0x38, 0x69, 0x4d, 0xad, 0x80, 0x5e, 0xc2,
-	0xbc, 0x48, 0xae, 0xc1, 0x7a, 0x7f, 0xf2, 0x7e, 0x97, 0xe6, 0xa6, 0x66, 0xf8, 0x04, 0xee, 0x5f,
-	0xc7, 0x73, 0x47, 0xef, 0xce, 0xa8, 0xf7, 0xc5, 0x6b, 0xd4, 0x9f, 0x2b, 0xb0, 0xd0, 0x7a, 0x47,
-	0xbd, 0x14, 0xf1, 0x11, 0x80, 0x6f, 0x6e, 0xe5, 0x35, 0x09, 0xa9, 0x3d, 0xbc, 0xcc, 0x8a, 0x46,
-	0x6a, 0x8a, 0x30, 0x24, 0xdc, 0x4f, 0x9f, 0x3c, 0x3b, 0xd5, 0x5c, 0xe3, 0xcb, 0xa8, 0x9b, 0x36,
-	0x13, 0x33, 0x46, 0x4f, 0x60, 0x59, 0xb1, 0x90, 0x8a, 0x58, 0x75, 0xa8, 0x27, 0xb8, 0x2f, 0x4d,
-	0x0f, 0x99, 0x75, 0xc7, 0x56, 0xf1, 0x32, 0x2c, 0xb6, 0xc2, 0x9e, 0x1a, 0xd8, 0x28, 0xf0, 0x17,
-	0x50, 0x77, 0x33, 0x5c, 0x4e, 0xc6, 0x9e, 0x47, 0xa5, 0xb4, 0x0f, 0x4c, 0x3a, 0xd5, 0x92, 0x90,
-	0x4a, 0x49, 0xba, 0x69, 0x62, 0xa4, 0x53, 0xfc, 0x03, 0x2c, 0x27, 0xb9, 0x35, 0x29, 0x91, 0x5c,
-	0x87, 0xb9, 0x64, 0xf3, 0xd6, 0x83, 0x9d, 0x61, 0x0e, 0x2b, 0x89, 0x03, 0xd3, 0x5d, 0x27, 0xf5,
-	0xb2, 0x05, 0x0b, 0xfe, 0x35, 0x5a, 0xfa, 0x88, 0x67, 0x96, 0xf0, 0x3b, 0x78, 0x60, 0x1e, 0x34,
-	0x53, 0x4d, 0x13, 0x7a, 0xfb, 0x18, 0x1e, 0x74, 0xc7, 0xb1, 0xac, 0xcf, 0xbc, 0x00, 0xff, 0xa3,
-	0x02, 0x6b, 0xc6, 0xf5, 0xa9, 0xa4, 0xd1, 0x2b, 0x26, 0xd5, 0xa4, 0xee, 0x9f, 0xc3, 0x5a, 0xb7,
-	0x08, 0xcf, 0x86, 0x50, 0x2c, 0xc4, 0xff, 0xae, 0x80, 0x63, 0xc2, 0xd0, 0x9c, 0x46, 0x0e, 0xa4,
-	0xa2, 0xe1, 0xc4, 0xc7, 0xfe, 0x02, 0x9c, 0x6e, 0x09, 0xa4, 0x0d, 0xa6, 0x54, 0x8e, 0x07, 0xb0,
-	0x98, 0x94, 0xcd, 0x64, 0x21, 0x6c, 0x42, 0x9d, 0xbe, 0x63, 0xaa, 0x29, 0xfc, 0xc4, 0xe5, 0xac,
-	0x3b, 0x9c, 0xeb, 0xdc, 0x93, 0xca, 0x7f, 0x13, 0x2b, 0x4b, 0x21, 0xed, 0x0c, 0x7f, 0x07, 0xf7,
-	0xcd, 0x49, 0xb4, 0x35, 0x51, 0x7e, 0xcf, 0xb2, 0xcd, 0x17, 0xe2, 0x4c, 0x61, 0x21, 0x7e, 0x6d,
-	0xf3, 0x2c, 0xc1, 0x9e, 0x68, 0x6f, 0x58, 0xc0, 0x92, 0xe6, 0x74, 0x3f, 0xd1, 0xbb, 0x76, 0xab,
-	0xcf, 0x61, 0x3d, 0xe6, 0x17, 0xc6, 0xf4, 0xa4, 0x28, 0xe8, 0x12, 0x29, 0x7e, 0x0b, 0x0f, 0x92,
-	0x5f, 0x28, 0xfb, 0x71, 0xd8, 0xbb, 0xab, 0xd3, 0x4d, 0xa8, 0xfb, 0x71, 0xd8, 0x6b, 0x13, 0x75,
-	0x69, 0x2f, 0x7f, 0x38, 0xc7, 0xe7, 0xf0, 0x41, 0xa7, 0x75, 0x36, 0x8d, 0xda, 0xd3, 0xcd, 0x8c,
-	0xf6, 0x0d, 0x2b, 0xb2, 0x8d, 0xd8, 0x4e, 0xf1, 0xdf, 0x2b, 0xb0, 0xf1, 0xca, 0xfc, 0x66, 0x3e,
-	0xa6, 0x44, 0xc6, 0x11, 0xd5, 0x0f, 0xe2, 0x14, 0x4a, 0x3d, 0x18, 0xc7, 0xb4, 0x8e, 0xf3, 0x02,
-	0xfc, 0xbd, 0xe6, 0xbb, 0x7f, 0xa5, 0x9e, 0x4a, 0xe2, 0xe8, 0x50, 0x2f, 0xa2, 0x6a, 0x6a, 0x4f,
-	0xcd, 0xb3, 0xff, 0xaf, 0x40, 0xb5, 0x19, 0xfa, 0xe8, 0x35, 0xa0, 0xce, 0x80, 0x7b, 0xa3, 0xcf,
-	0x1d, 0xfa, 0x55, 0x21, 0x64, 0xe2, 0x7c, 0xb3, 0x7c, 0xb3, 0xf8, 0x1e, 0x7a, 0x03, 0x2b, 0x6d,
-	0x12, 0x4b, 0x3a, 0x35, 0xc0, 0x6f, 0x61, 0xed, 0x94, 0xf7, 0xa6, 0x0a, 0xd9, 0x81, 0xd5, 0xa4,
-	0x16, 0xc6, 0x10, 0xf3, 0x5c, 0x74, 0xa4, 0x64, 0x6e, 0x06, 0x75, 0x61, 0xfd, 0xd4, 0x56, 0xc2,
-	0xd4, 0x02, 0x3d, 0x01, 0xa7, 0x23, 0x2e, 0x94, 0x4b, 0xcf, 0x85, 0x50, 0x53, 0x43, 0x75, 0x61,
-	0xbd, 0x73, 0x19, 0x2b, 0x5f, 0xfc, 0x8d, 0x4f, 0x0d, 0xf3, 0x35, 0xa0, 0x6f, 0x58, 0x10, 0x4c,
-	0x0d, 0xaf, 0x0d, 0xab, 0xfb, 0x34, 0xa0, 0x6a, 0x7a, 0x67, 0xf9, 0x16, 0xd6, 0x12, 0xc6, 0x36,
-	0x0e, 0xf9, 0x9b, 0xfc, 0x97, 0x95, 0x31, 0x66, 0x77, 0x6b, 0xc6, 0xeb, 0x0a, 0x1a, 0x1a, 0x9d,
-	0x90, 0xa8, 0x4b, 0xd5, 0x04, 0x91, 0xfe, 0x09, 0x1e, 0x36, 0x09, 0xf7, 0xe8, 0xd8, 0x69, 0x5e,
-	0xff, 0xda, 0x9d, 0xec, 0xea, 0x59, 0x97, 0x93, 0x20, 0x09, 0xb2, 0x2d, 0xfc, 0x66, 0x40, 0x09,
-	0x8f, 0x7b, 0x13, 0x60, 0xfe, 0x19, 0x1e, 0x1f, 0x30, 0x4e, 0x02, 0x36, 0x9e, 0xf8, 0xd3, 0x08,
-	0xf8, 0x35, 0xa0, 0xaf, 0x84, 0xea, 0x05, 0x71, 0xf7, 0x2b, 0x21, 0xd5, 0x3e, 0xed, 0x33, 0x8f,
-	0xca, 0x09, 0xf0, 0x8e, 0xa1, 0x71, 0x48, 0x55, 0xc2, 0x16, 0xd1, 0xc3, 0x9c, 0x66, 0x96, 0xf7,
-	0x6e, 0x3e, 0xce, 0xff, 0x84, 0x1a, 0xa1, 0xb1, 0x26, 0xa9, 0x96, 0x87, 0x70, 0x86, 0x1b, 0xde,
-	0x86, 0xf9, 0xdb, 0x12, 0xcc, 0x11, 0xe6, 0x6a, 0x5a, 0xd4, 0xe2, 0x21, 0x55, 0x43, 0x96, 0x79,
-	0x1b, 0x2c, 0xce, 0x89, 0x73, 0x04, 0xd5, 0x80, 0xd6, 0x0f, 0xa9, 0x61, 0x73, 0xb7, 0xc6, 0xf9,
-	0xa4, 0x18, 0x30, 0xc7, 0x04, 0xef, 0xa1, 0xbf, 0x98, 0x23, 0xc8, 0xb0, 0xb2, 0xdb, 0xa0, 0x3f,
-	0x2a, 0x86, 0x2e, 0xe2, 0x75, 0xf7, 0xd0, 0x1e, 0xd4, 0x34, 0xfb, 0xb9, 0x0d, 0xf3, 0xc6, 0x3b,
-	0x6f, 0x41, 0x4d, 0xb3, 0x43, 0xf4, 0xeb, 0x3c, 0xc6, 0xf5, 0x6f, 0xad, 0xcd, 0x87, 0x25, 0xd2,
-	0x4c, 0x33, 0x6e, 0x0c, 0xd9, 0x58, 0x41, 0xd3, 0x18, 0x67, 0x81, 0x65, 0x77, 0x92, 0x25, 0x73,
-	0xa6, 0x7a, 0x9c, 0xb1, 0xaa, 0x19, 0x92, 0x26, 0x84, 0x4b, 0xbe, 0xf9, 0x66, 0x18, 0xd5, 0x6d,
-	0x3d, 0x4f, 0xdf, 0x4d, 0xe6, 0x53, 0xfe, 0xdd, 0xd3, 0xb3, 0xe0, 0xff, 0x00, 0xb6, 0x8f, 0xe4,
-	0x58, 0x43, 0xb3, 0x7d, 0x2a, 0x27, 0x7c, 0xec, 0x72, 0x98, 0xf6, 0x93, 0xfa, 0x24, 0x7c, 0x04,
-	0x0e, 0xa9, 0xb2, 0x84, 0xf1, 0xb6, 0xed, 0x6f, 0xe5, 0x3f, 0xfb, 0x8d, 0x32, 0x4d, 0x7c, 0x0f,
-	0x11, 0x58, 0x3d, 0xa4, 0x2a, 0x47, 0x0e, 0x6f, 0x0e, 0x31, 0xff, 0x75, 0xa3, 0x94, 0x5d, 0xe2,
-	0x7b, 0xe8, 0x7b, 0x40, 0x79, 0xea, 0x87, 0x8a, 0xbe, 0x90, 0x94, 0xf0, 0xc3, 0x1b, 0x8f, 0x64,
-	0xaf, 0xf6, 0xdd, 0x4c, 0xff, 0xe9, 0xf9, 0x9c, 0xf9, 0xdf, 0xcf, 0xa7, 0xbf, 0x04, 0x00, 0x00,
-	0xff, 0xff, 0x7a, 0xa3, 0xf8, 0x64, 0x28, 0x1a, 0x00, 0x00,
+	// 1843 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x5f, 0x73, 0xdb, 0xc6,
+	0x11, 0x17, 0x45, 0x4a, 0x26, 0x57, 0x7f, 0x12, 0x9f, 0xfe, 0x04, 0x52, 0x6b, 0x5b, 0xc5, 0x74,
+	0x3c, 0x4a, 0x27, 0x91, 0x6a, 0xc7, 0xc9, 0x74, 0x3c, 0x9d, 0x8c, 0x2d, 0x8a, 0x52, 0x94, 0x98,
+	0x36, 0x03, 0x4a, 0xf2, 0x34, 0x6d, 0x9a, 0x39, 0x01, 0x27, 0xf2, 0x2a, 0xe0, 0x0e, 0xc1, 0x1d,
+	0x58, 0x33, 0x4f, 0x9d, 0x49, 0xa7, 0x0f, 0x9d, 0xe9, 0xe7, 0x6b, 0x9f, 0xfa, 0x2d, 0xfa, 0xde,
+	0xb9, 0xc3, 0x81, 0x02, 0x09, 0x40, 0xb2, 0x86, 0x7c, 0x22, 0xf6, 0x6e, 0xf7, 0xb7, 0x7b, 0x77,
+	0xbb, 0x7b, 0x3f, 0x80, 0xf0, 0x71, 0x78, 0xd5, 0xdb, 0xef, 0x63, 0xe6, 0xf9, 0x24, 0xfa, 0xd4,
+	0xc7, 0x31, 0x73, 0xfb, 0x24, 0xfa, 0xd4, 0xe5, 0xc1, 0xbe, 0x1b, 0x78, 0xfb, 0x83, 0x27, 0xea,
+	0x67, 0x2f, 0x8c, 0xb8, 0xe4, 0xe8, 0x83, 0xab, 0xf8, 0x82, 0x0c, 0x68, 0x24, 0xf7, 0xd4, 0xd8,
+	0xe0, 0x89, 0x7d, 0x09, 0x6b, 0xdf, 0x92, 0x20, 0x3e, 0x27, 0x91, 0xa0, 0x9c, 0x39, 0x44, 0x84,
+	0x9c, 0x09, 0x82, 0x3e, 0x87, 0x7a, 0x64, 0x9e, 0xad, 0xca, 0x4e, 0x65, 0x77, 0xe9, 0xe9, 0xd6,
+	0xde, 0x84, 0xe9, 0x5e, 0xaa, 0xec, 0x8c, 0x54, 0x91, 0x05, 0xf7, 0x06, 0x09, 0x92, 0x35, 0xbf,
+	0x53, 0xd9, 0x6d, 0x38, 0xa9, 0x68, 0x3f, 0x82, 0xea, 0x79, 0xfb, 0x44, 0x2b, 0x04, 0xf4, 0x6b,
+	0xc1, 0x99, 0x86, 0x5d, 0x76, 0x52, 0xd1, 0x7e, 0x02, 0xd5, 0x66, 0xe7, 0x0c, 0xad, 0xc2, 0x3c,
+	0xf5, 0xf4, 0xdc, 0x8a, 0x33, 0x4f, 0x3d, 0xb4, 0x0d, 0x75, 0x41, 0x2f, 0x7c, 0xca, 0x7a, 0xc2,
+	0x9a, 0xdf, 0xa9, 0xee, 0xae, 0x38, 0x23, 0xd9, 0xde, 0x87, 0x7b, 0xdd, 0xe4, 0x39, 0x67, 0xb6,
+	0x0e, 0x0b, 0x03, 0xec, 0xc7, 0x44, 0x87, 0x51, 0x73, 0x12, 0xc1, 0x6e, 0xc1, 0x42, 0x07, 0xf7,
+	0x88, 0x50, 0xd3, 0x2e, 0x8f, 0x99, 0xd4, 0x16, 0x35, 0x27, 0x11, 0x10, 0x82, 0x5a, 0xcc, 0xa8,
+	0x34, 0xa1, 0xeb, 0x67, 0x35, 0x26, 0xe8, 0x4f, 0xc4, 0xaa, 0x6a, 0x68, 0xfd, 0x6c, 0x3f, 0x83,
+	0xc5, 0x36, 0x09, 0x78, 0x34, 0x44, 0x9b, 0xb0, 0x88, 0x83, 0x0c, 0x90, 0x91, 0x8a, 0x90, 0xec,
+	0x7f, 0x57, 0xa0, 0xd6, 0x24, 0xbe, 0x9f, 0x8b, 0x75, 0x1f, 0x16, 0x03, 0x0d, 0xa7, 0xd5, 0x97,
+	0x9e, 0x7e, 0x94, 0xdb, 0xe9, 0xc4, 0x9b, 0x63, 0xd4, 0xd0, 0x27, 0xb0, 0x10, 0xaa, 0x65, 0x58,
+	0xd5, 0x9d, 0xea, 0xee, 0xd2, 0xd3, 0xcd, 0x9c, 0xbe, 0x5e, 0xa4, 0x93, 0x28, 0xa1, 0x2f, 0xa0,
+	0xe1, 0x51, 0x21, 0x31, 0x73, 0x89, 0xb0, 0x6a, 0xda, 0xc2, 0xca, 0x59, 0x98, 0x7d, 0x74, 0xae,
+	0x55, 0xd1, 0x2e, 0xd4, 0xdc, 0x30, 0x16, 0xd6, 0x82, 0x36, 0x59, 0xcf, 0x99, 0x34, 0x3b, 0x67,
+	0x8e, 0xd6, 0xb0, 0x5f, 0x40, 0xfd, 0x94, 0x87, 0xdc, 0xe7, 0xbd, 0x21, 0x7a, 0x06, 0xc0, 0xe2,
+	0x00, 0xff, 0xe0, 0x12, 0xdf, 0x17, 0x56, 0x45, 0xdb, 0x6e, 0xe4, 0x6d, 0x89, 0xef, 0x3b, 0x0d,
+	0xa5, 0xa8, 0x9e, 0x84, 0xfd, 0xcf, 0x0a, 0x2c, 0x76, 0xdb, 0x07, 0x94, 0x0b, 0x64, 0xc3, 0x72,
+	0x80, 0x59, 0x7c, 0x89, 0x5d, 0x19, 0x47, 0x24, 0xd2, 0xfb, 0xd4, 0x70, 0xc6, 0xc6, 0x54, 0x16,
+	0x85, 0x11, 0xf7, 0x62, 0x37, 0xdd, 0xe1, 0x54, 0xcc, 0x26, 0x60, 0x75, 0x2c, 0x01, 0xd1, 0x87,
+	0x50, 0x15, 0x57, 0xb1, 0x55, 0xd3, 0xa3, 0xea, 0x51, 0x1d, 0xde, 0x25, 0x0e, 0xa8, 0x3f, 0xb4,
+	0x16, 0xf4, 0xa0, 0x91, 0xec, 0x7f, 0x54, 0xa0, 0x7e, 0x48, 0xc5, 0xd5, 0x09, 0xbb, 0xe4, 0x5a,
+	0x89, 0x47, 0x01, 0x96, 0x26, 0x10, 0x23, 0xa1, 0x1d, 0x58, 0xba, 0xc0, 0xee, 0x15, 0x65, 0xbd,
+	0x23, 0xea, 0x13, 0x13, 0x46, 0x76, 0x08, 0x3d, 0x04, 0x50, 0xf1, 0x62, 0xbf, 0x9b, 0xe6, 0x4f,
+	0xcd, 0xc9, 0x8c, 0x28, 0x04, 0xb5, 0x25, 0xa9, 0x42, 0x4d, 0x2b, 0x64, 0x87, 0xec, 0xff, 0x55,
+	0x60, 0xa5, 0xe9, 0xc7, 0x42, 0x92, 0xa8, 0xc9, 0xd9, 0x25, 0xed, 0xa1, 0x3d, 0x40, 0xad, 0x77,
+	0x21, 0x66, 0x9e, 0x8a, 0x4f, 0xb4, 0x18, 0xbe, 0xf0, 0x49, 0x92, 0x4a, 0x75, 0xa7, 0x60, 0x06,
+	0xfd, 0x1e, 0xb6, 0x8e, 0x22, 0x42, 0x54, 0x3e, 0x38, 0x24, 0xe4, 0x91, 0xa4, 0xac, 0x77, 0x48,
+	0x45, 0x62, 0x36, 0xaf, 0xcd, 0xca, 0x15, 0xd0, 0x73, 0xb0, 0x0e, 0xb8, 0xdb, 0x17, 0x87, 0x54,
+	0x84, 0x3e, 0x1e, 0x1e, 0xf1, 0xa8, 0x75, 0x74, 0x72, 0x1c, 0x13, 0x21, 0x85, 0x5e, 0x4f, 0xdd,
+	0x29, 0x9d, 0x57, 0xb6, 0x5d, 0x12, 0x51, 0xec, 0x37, 0x39, 0x13, 0xdc, 0x27, 0xaf, 0xf8, 0xb5,
+	0xe3, 0x5a, 0x62, 0x5b, 0x36, 0x6f, 0x7f, 0x06, 0x5b, 0x27, 0x4c, 0x92, 0xe8, 0x12, 0xbb, 0xe4,
+	0x80, 0x32, 0x8f, 0xb2, 0x5e, 0x9b, 0xf6, 0x22, 0x2c, 0xd5, 0x39, 0x6e, 0xaa, 0xe2, 0x93, 0x7d,
+	0xee, 0xa5, 0x07, 0x92, 0x48, 0xf6, 0x7f, 0xef, 0xc1, 0xc6, 0x79, 0xb2, 0x79, 0x6d, 0xec, 0xf6,
+	0x29, 0x23, 0x6f, 0x42, 0x65, 0x20, 0xd0, 0x37, 0xb0, 0x3e, 0x3e, 0x91, 0x64, 0x9a, 0xe9, 0x6b,
+	0xf9, 0x6a, 0x4b, 0xa6, 0x9d, 0x42, 0x23, 0xf4, 0x0c, 0x36, 0xda, 0x24, 0x38, 0xc0, 0xbe, 0xcf,
+	0x39, 0xeb, 0x4a, 0x2c, 0x45, 0x87, 0x44, 0x94, 0x27, 0xbb, 0xb9, 0xe2, 0x14, 0x4f, 0xa2, 0xdf,
+	0xc2, 0x5a, 0x27, 0x22, 0x6a, 0xdc, 0xc5, 0x92, 0x78, 0xe7, 0xdc, 0x8f, 0x03, 0x53, 0xbf, 0x0d,
+	0xa7, 0x68, 0x4a, 0x35, 0x60, 0x69, 0x6a, 0x4a, 0xef, 0x57, 0x51, 0x03, 0x4e, 0x8b, 0xce, 0x19,
+	0xa9, 0xa2, 0x2e, 0x34, 0x74, 0x02, 0xa8, 0xdc, 0x35, 0x95, 0xfb, 0x79, 0xce, 0xae, 0x70, 0x9b,
+	0xf6, 0x46, 0x76, 0x2d, 0x26, 0xa3, 0xa1, 0x73, 0x8d, 0x53, 0x92, 0x75, 0x8b, 0xa5, 0x59, 0x77,
+	0x08, 0x2b, 0x6e, 0x36, 0x6d, 0xad, 0x7b, 0x7a, 0x01, 0x0f, 0xf3, 0x6d, 0x20, 0xab, 0xe5, 0x8c,
+	0x1b, 0xa1, 0x9f, 0x2b, 0xb0, 0x45, 0xd3, 0x34, 0x38, 0xe4, 0x01, 0xa6, 0xec, 0xa5, 0x94, 0xd8,
+	0xed, 0x07, 0x84, 0x49, 0xab, 0xae, 0xd7, 0xd6, 0x7a, 0xcf, 0xb5, 0x9d, 0x94, 0xe1, 0x24, 0x6b,
+	0x2d, 0xf7, 0x83, 0x18, 0xa0, 0xd1, 0xe4, 0x28, 0x09, 0xad, 0x86, 0xf6, 0xfe, 0xe5, 0x5d, 0xbd,
+	0x8f, 0x00, 0x12, 0xb7, 0x05, 0xc8, 0xdb, 0x6f, 0x61, 0x75, 0xfc, 0x20, 0x54, 0xe3, 0xba, 0x22,
+	0x43, 0x93, 0xed, 0xea, 0x11, 0xed, 0x67, 0x2f, 0xb7, 0xa2, 0xc4, 0x48, 0xbb, 0x97, 0xb9, 0xf7,
+	0x9e, 0xcf, 0xff, 0xae, 0xb2, 0xfd, 0x0a, 0x1e, 0xde, 0xbc, 0x0b, 0x05, 0x8e, 0xc6, 0x6e, 0xd1,
+	0x46, 0x16, 0xed, 0x47, 0xf8, 0xa8, 0x64, 0x55, 0x05, 0x30, 0x2f, 0xc6, 0xe3, 0xfd, 0x4d, 0x2e,
+	0xde, 0xd2, 0x6a, 0xcf, 0xb8, 0xb4, 0x07, 0x00, 0xe7, 0xed, 0x13, 0x87, 0xfc, 0xa8, 0x1a, 0x0c,
+	0x7a, 0x0c, 0xd5, 0x41, 0x40, 0x4d, 0x0d, 0xe7, 0x2f, 0x27, 0xa5, 0xa9, 0x14, 0xd0, 0x0b, 0xb8,
+	0xc7, 0x93, 0x63, 0x30, 0xde, 0x1f, 0xbf, 0xdf, 0xa1, 0x39, 0xa9, 0x99, 0x7d, 0x0a, 0x1f, 0x5e,
+	0xc7, 0x73, 0x47, 0xef, 0xd6, 0xb8, 0xf7, 0xe5, 0x6b, 0xd4, 0x9f, 0x2b, 0xb0, 0xd4, 0x7a, 0x47,
+	0xdc, 0x14, 0xf1, 0x21, 0x80, 0xa7, 0x4f, 0xe5, 0x35, 0x0e, 0x88, 0xd9, 0xbc, 0xcc, 0x88, 0x42,
+	0x6a, 0xf2, 0x20, 0xc0, 0xcc, 0x4b, 0xaf, 0x3c, 0x23, 0x2a, 0xae, 0xf1, 0x32, 0xea, 0xa5, 0xcd,
+	0x44, 0x3f, 0xa3, 0xc7, 0xb0, 0x2a, 0x69, 0x40, 0x78, 0x2c, 0xbb, 0xc4, 0xe5, 0xcc, 0x13, 0xba,
+	0x87, 0x2c, 0x38, 0x13, 0xa3, 0xf6, 0x2a, 0x2c, 0xb7, 0x82, 0x50, 0x0e, 0x4d, 0x14, 0xf6, 0x97,
+	0x50, 0x77, 0x32, 0x5c, 0x4e, 0xc4, 0xae, 0x4b, 0x84, 0x30, 0x17, 0x4c, 0x2a, 0xaa, 0x99, 0x80,
+	0x08, 0x81, 0x7b, 0x69, 0x62, 0xa4, 0xa2, 0xfd, 0x03, 0xac, 0x26, 0xb9, 0x35, 0x2d, 0x91, 0xdc,
+	0x84, 0xc5, 0x64, 0xf1, 0xc6, 0x83, 0x91, 0x6c, 0x06, 0x6b, 0x89, 0x03, 0xdd, 0x5d, 0xa7, 0xf5,
+	0xb2, 0x03, 0x4b, 0xde, 0x35, 0x5a, 0x7a, 0x89, 0x67, 0x86, 0xec, 0x77, 0x70, 0x5f, 0x5f, 0x68,
+	0xba, 0x9a, 0xa6, 0xf4, 0xf6, 0x09, 0xdc, 0xef, 0x4d, 0x62, 0x19, 0x9f, 0xf9, 0x09, 0xfb, 0xef,
+	0x15, 0xd8, 0xd0, 0xae, 0xcf, 0x04, 0x89, 0x5e, 0x51, 0x21, 0xa7, 0x75, 0xff, 0x0c, 0x36, 0x7a,
+	0x45, 0x78, 0x26, 0x84, 0xe2, 0x49, 0xfb, 0x5f, 0x15, 0xb0, 0x74, 0x18, 0x8a, 0xd3, 0x88, 0xa1,
+	0x90, 0x24, 0x98, 0x7a, 0xdb, 0x9f, 0x83, 0xd5, 0x2b, 0x81, 0x34, 0xc1, 0x94, 0xce, 0xdb, 0x43,
+	0x58, 0x4e, 0xca, 0x66, 0xba, 0x10, 0xb6, 0xa1, 0x4e, 0xde, 0x51, 0xd9, 0xe4, 0x5e, 0xe2, 0x72,
+	0xc1, 0x19, 0xc9, 0x2a, 0xf7, 0x84, 0xf4, 0xde, 0xc4, 0xd2, 0x50, 0x48, 0x23, 0xd9, 0xdf, 0xc1,
+	0x87, 0x7a, 0x27, 0x3a, 0x8a, 0x28, 0xbf, 0x67, 0xd9, 0xe6, 0x0b, 0x71, 0xbe, 0xb0, 0x10, 0xbf,
+	0x36, 0x79, 0x96, 0x60, 0x4f, 0xb5, 0x36, 0x9b, 0xc3, 0x8a, 0xe2, 0x74, 0x3f, 0x91, 0xbb, 0x76,
+	0xab, 0x2f, 0x60, 0x33, 0x66, 0x97, 0xda, 0xf4, 0xb4, 0x28, 0xe8, 0x92, 0x59, 0xfb, 0x2d, 0xdc,
+	0x4f, 0xde, 0x50, 0x0e, 0xe3, 0x20, 0xbc, 0xab, 0xd3, 0x6d, 0xa8, 0x7b, 0x71, 0x10, 0x76, 0xb0,
+	0xec, 0x9b, 0xc3, 0x1f, 0xc9, 0xf6, 0x05, 0x7c, 0xd0, 0x6d, 0x9d, 0xcf, 0xa2, 0xf6, 0x54, 0x33,
+	0x23, 0x03, 0xcd, 0x8a, 0x4c, 0x23, 0x36, 0xa2, 0xfd, 0xb7, 0x0a, 0x6c, 0xbd, 0xd2, 0xef, 0xcc,
+	0x6d, 0x82, 0x45, 0x1c, 0x11, 0x75, 0x21, 0xce, 0xa0, 0xd4, 0xfd, 0x49, 0x4c, 0xe3, 0x38, 0x3f,
+	0x61, 0x7f, 0xaf, 0xf8, 0xee, 0x5f, 0x88, 0x2b, 0x93, 0x38, 0xba, 0xc4, 0x8d, 0x88, 0x9c, 0xdd,
+	0x55, 0xd3, 0x87, 0xb5, 0xf3, 0xf6, 0x49, 0xb3, 0x4f, 0xdc, 0x2b, 0x11, 0x07, 0x33, 0xa8, 0x1c,
+	0xd7, 0x40, 0xa5, 0xe7, 0x95, 0xca, 0x4f, 0xff, 0xb3, 0x0e, 0xd5, 0x66, 0xe0, 0xa1, 0xd7, 0x80,
+	0xba, 0x43, 0xe6, 0x8e, 0x5f, 0xac, 0xe8, 0x17, 0x85, 0xc1, 0x27, 0xcb, 0xdc, 0x2e, 0xf7, 0x6d,
+	0xcf, 0xa1, 0x37, 0xb0, 0xd6, 0xc1, 0xb1, 0x20, 0x33, 0x03, 0xfc, 0x16, 0x36, 0xce, 0x58, 0x38,
+	0x53, 0xc8, 0x2e, 0xac, 0x27, 0x55, 0x37, 0x81, 0x98, 0x67, 0xbd, 0x63, 0xc5, 0x79, 0x33, 0xa8,
+	0x03, 0x9b, 0x67, 0xa6, 0xe6, 0x66, 0x16, 0xe8, 0x29, 0x58, 0x5d, 0x7e, 0x29, 0x1d, 0x72, 0xc1,
+	0xb9, 0x9c, 0x19, 0xaa, 0x03, 0x9b, 0xdd, 0x7e, 0x2c, 0x3d, 0xfe, 0x57, 0x36, 0x33, 0xcc, 0xd7,
+	0x80, 0xbe, 0xa1, 0xbe, 0x3f, 0x33, 0xbc, 0x0e, 0xac, 0x1f, 0x12, 0x9f, 0xc8, 0xd9, 0xed, 0xe5,
+	0x5b, 0xd8, 0x48, 0xb8, 0xe1, 0x24, 0xe4, 0xaf, 0xf2, 0xdf, 0x70, 0x26, 0x38, 0xe4, 0xad, 0x19,
+	0xaf, 0x2a, 0x68, 0x64, 0x74, 0x8a, 0xa3, 0x1e, 0x91, 0x53, 0x44, 0xfa, 0x07, 0x78, 0xd0, 0xc4,
+	0xcc, 0x25, 0x13, 0xbb, 0x79, 0xfd, 0x5e, 0x3d, 0xdd, 0xd1, 0xd3, 0x1e, 0xc3, 0x7e, 0x12, 0x64,
+	0x87, 0x7b, 0x4d, 0x9f, 0x60, 0x16, 0x87, 0x53, 0x60, 0xfe, 0x11, 0x1e, 0x1d, 0x51, 0x86, 0x7d,
+	0x3a, 0x99, 0xf8, 0xb3, 0x08, 0xf8, 0x35, 0xa0, 0xaf, 0xb8, 0x0c, 0xfd, 0xb8, 0xf7, 0x15, 0x17,
+	0xf2, 0x90, 0x0c, 0xa8, 0x4b, 0xc4, 0x14, 0x78, 0x6d, 0x68, 0x1c, 0x13, 0x99, 0xf0, 0x52, 0xf4,
+	0x20, 0xa7, 0x99, 0x65, 0xd8, 0xdb, 0x8f, 0xf2, 0x2f, 0x6b, 0x63, 0x84, 0x59, 0x27, 0xd5, 0xea,
+	0x08, 0x4e, 0xb3, 0xd0, 0xdb, 0x30, 0x7f, 0x5d, 0x82, 0x39, 0xc6, 0x91, 0x75, 0x8b, 0x5a, 0x3e,
+	0x26, 0x72, 0xc4, 0x67, 0x6f, 0x83, 0xb5, 0x73, 0xd3, 0x39, 0x2a, 0xac, 0x41, 0xeb, 0xc7, 0x44,
+	0xf3, 0xc6, 0x5b, 0xe3, 0x7c, 0x5c, 0x0c, 0x98, 0xe3, 0x9c, 0x73, 0xe8, 0x4f, 0x7a, 0x0b, 0x32,
+	0xfc, 0xef, 0x36, 0xe8, 0x8f, 0x8b, 0xa1, 0x8b, 0x18, 0xe4, 0x1c, 0x3a, 0x80, 0x9a, 0xe2, 0x59,
+	0xb7, 0x61, 0xde, 0x78, 0xe6, 0x2d, 0xa8, 0x29, 0x1e, 0x8a, 0x7e, 0x99, 0xc7, 0xb8, 0x7e, 0xab,
+	0xdb, 0x7e, 0x50, 0x32, 0x9b, 0x69, 0xc6, 0x8d, 0x11, 0xef, 0x2b, 0x68, 0x1a, 0x93, 0x7c, 0xb3,
+	0xec, 0x4c, 0xb2, 0xb4, 0x51, 0x57, 0x8f, 0x35, 0x51, 0x35, 0x23, 0x7a, 0x86, 0xec, 0x92, 0xaf,
+	0xcb, 0x19, 0xee, 0x76, 0x5b, 0xcf, 0x53, 0x67, 0x93, 0xf9, 0xd3, 0xe0, 0xee, 0xe9, 0x59, 0xf0,
+	0x8f, 0x83, 0xe9, 0x23, 0x39, 0xd6, 0xd0, 0xec, 0x9c, 0x89, 0x29, 0x2f, 0xbb, 0x1c, 0xa6, 0xf9,
+	0x78, 0x3f, 0x0d, 0x1f, 0x81, 0x63, 0x22, 0x0d, 0x35, 0xbd, 0x6d, 0xf9, 0x3b, 0xf9, 0x0f, 0x8c,
+	0xe3, 0x9c, 0xd6, 0x9e, 0x43, 0x18, 0xd6, 0x8f, 0x89, 0xcc, 0xd1, 0xd0, 0x9b, 0x43, 0xcc, 0x7f,
+	0x47, 0x29, 0xe5, 0xb1, 0xf6, 0x1c, 0xfa, 0x1e, 0x50, 0x9e, 0x64, 0xa2, 0xa2, 0x6f, 0x31, 0x25,
+	0x4c, 0xf4, 0xe6, 0x2d, 0xf9, 0x33, 0x6c, 0x1c, 0x13, 0xf9, 0x32, 0x0c, 0x7d, 0x4a, 0xbc, 0x0c,
+	0xdd, 0xbc, 0x7b, 0x72, 0x14, 0x70, 0x55, 0x7b, 0xee, 0xa0, 0xf6, 0xdd, 0xfc, 0xe0, 0xc9, 0xc5,
+	0xa2, 0xfe, 0x17, 0xeb, 0xb3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xba, 0x43, 0xe7, 0x93, 0xf2,
+	0x1a, 0x00, 0x00,
 }
diff --git a/pkg/handler-launcher-com/cmd/v1/cmd.proto b/pkg/handler-launcher-com/cmd/v1/cmd.proto
index fd2591b7af..e2d6be51f1 100644
--- a/pkg/handler-launcher-com/cmd/v1/cmd.proto
+++ b/pkg/handler-launcher-com/cmd/v1/cmd.proto
@@ -34,6 +34,7 @@ service Cmd {
   rpc GetSEVInfo(EmptyRequest) returns (SEVInfoResponse) {}
   rpc GetLaunchMeasurement(VMIRequest) returns (LaunchMeasurementResponse) {}
   rpc InjectLaunchSecret(InjectLaunchSecretRequest) returns (Response) {}
+  rpc GetAppliedVMIChecksum(EmptyRequest) returns (VMIChecksumResponse) {}
 }
 
 message QemuVersionResponse {
@@ -205,3 +206,8 @@ message InjectLaunchSecretRequest {
     VMI vmi = 1;
     bytes options = 2;
 }
+
+message VMIChecksumResponse {
+  Response response = 1;
+  string checksum = 2;
+}
diff --git a/pkg/handler-launcher-com/notify/info/info.pb.go b/pkg/handler-launcher-com/notify/info/info.pb.go
index 671ae85bec..35383632e3 100644
--- a/pkg/handler-launcher-com/notify/info/info.pb.go
+++ b/pkg/handler-launcher-com/notify/info/info.pb.go
@@ -15,15 +15,12 @@ It has these top-level messages:
 */
 package info
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/handler-launcher-com/notify/v1/notify.pb.go b/pkg/handler-launcher-com/notify/v1/notify.pb.go
index b8eed72ba0..0ff5f1746f 100644
--- a/pkg/handler-launcher-com/notify/v1/notify.pb.go
+++ b/pkg/handler-launcher-com/notify/v1/notify.pb.go
@@ -16,15 +16,12 @@ It has these top-level messages:
 */
 package v1
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/hooks/info/api_info.pb.go b/pkg/hooks/info/api_info.pb.go
index 38f4f7229a..96ac568ef9 100755
--- a/pkg/hooks/info/api_info.pb.go
+++ b/pkg/hooks/info/api_info.pb.go
@@ -16,15 +16,12 @@ It has these top-level messages:
 */
 package info
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/hooks/v1alpha1/api_v1alpha1.pb.go b/pkg/hooks/v1alpha1/api_v1alpha1.pb.go
index 82b0440900..40487270ec 100755
--- a/pkg/hooks/v1alpha1/api_v1alpha1.pb.go
+++ b/pkg/hooks/v1alpha1/api_v1alpha1.pb.go
@@ -15,15 +15,12 @@ It has these top-level messages:
 */
 package v1alpha1
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/hooks/v1alpha2/api_v1alpha2.pb.go b/pkg/hooks/v1alpha2/api_v1alpha2.pb.go
index a7184d4203..adad2a72b6 100755
--- a/pkg/hooks/v1alpha2/api_v1alpha2.pb.go
+++ b/pkg/hooks/v1alpha2/api_v1alpha2.pb.go
@@ -17,15 +17,12 @@ It has these top-level messages:
 */
 package v1alpha2
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/hooks/v1alpha3/api_v1alpha3.pb.go b/pkg/hooks/v1alpha3/api_v1alpha3.pb.go
index 628fb81562..f4776959b3 100644
--- a/pkg/hooks/v1alpha3/api_v1alpha3.pb.go
+++ b/pkg/hooks/v1alpha3/api_v1alpha3.pb.go
@@ -19,15 +19,12 @@ It has these top-level messages:
 */
 package v1alpha3
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
diff --git a/pkg/util/checksum/checksum.go b/pkg/util/checksum/checksum.go
new file mode 100644
index 0000000000..cb05a968b9
--- /dev/null
+++ b/pkg/util/checksum/checksum.go
@@ -0,0 +1,24 @@
+package checksum
+
+import (
+	"crypto/sha256"
+	"encoding/hex"
+
+	"k8s.io/apimachinery/pkg/util/json"
+	virtv1 "kubevirt.io/api/core/v1"
+)
+
+func FromVMISpec(vmiSpec *virtv1.VirtualMachineInstanceSpec) (string, error) {
+	data, err := json.Marshal(vmiSpec)
+	if err != nil {
+		return "", err
+	}
+	return FromBytes(data), nil
+}
+
+func FromBytes(data []byte) string {
+	hasher := sha256.New()
+	hasher.Write(data)
+	sum := hasher.Sum(nil)
+	return hex.EncodeToString(sum)
+}
diff --git a/pkg/util/syncobject/syncobject.go b/pkg/util/syncobject/syncobject.go
new file mode 100644
index 0000000000..0e53df4907
--- /dev/null
+++ b/pkg/util/syncobject/syncobject.go
@@ -0,0 +1,29 @@
+package syncobject
+
+import "sync"
+
+type SyncObject[T any] interface {
+	Get() T
+	Set(value T)
+}
+
+func NewSyncObject[T any]() SyncObject[T] {
+	return &defaultSyncObject[T]{}
+}
+
+type defaultSyncObject[T any] struct {
+	value T
+	mu    sync.RWMutex
+}
+
+func (d *defaultSyncObject[T]) Get() T {
+	d.mu.RLock()
+	defer d.mu.RUnlock()
+	return d.value
+}
+
+func (d *defaultSyncObject[T]) Set(value T) {
+	d.mu.Lock()
+	defer d.mu.Unlock()
+	d.value = value
+}
diff --git a/pkg/virt-handler/checksum-controller/checksum-controller.go b/pkg/virt-handler/checksum-controller/checksum-controller.go
new file mode 100644
index 0000000000..affcf99ae5
--- /dev/null
+++ b/pkg/virt-handler/checksum-controller/checksum-controller.go
@@ -0,0 +1,208 @@
+package checksum_controller
+
+import (
+	"context"
+	"fmt"
+	"strings"
+	"sync"
+	"time"
+
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/types"
+	"k8s.io/apimachinery/pkg/util/wait"
+	"k8s.io/client-go/tools/cache"
+	"k8s.io/client-go/util/workqueue"
+	v1 "kubevirt.io/api/core/v1"
+	"kubevirt.io/client-go/kubecli"
+	"kubevirt.io/client-go/log"
+
+	"kubevirt.io/kubevirt/pkg/apimachinery/patch"
+	"kubevirt.io/kubevirt/pkg/util/checksum"
+)
+
+const (
+	controllerName            = "ChecksumController"
+	AnnotationChecksum        = "integrity.virtualization.deckhouse.io/core-spec-checksum"
+	AnnotationChecksumApplied = "integrity.virtualization.deckhouse.io/core-spec-checksum-applied"
+)
+
+type VMIChecksumGetter interface {
+	GetAppliedVMIChecksum() (string, error)
+}
+
+func NewController(vmiSourceInformer cache.SharedIndexInformer, clientset kubecli.KubevirtClient) *Controller {
+	queue := workqueue.NewRateLimitingQueueWithConfig(
+		workqueue.DefaultControllerRateLimiter(),
+		workqueue.RateLimitingQueueConfig{Name: controllerName})
+
+	return &Controller{
+		vmiSourceInformer: vmiSourceInformer,
+		clientset:         clientset,
+		queue:             queue,
+		log:               log.DefaultLogger().With("controller", controllerName),
+		objects:           make(map[types.NamespacedName]VMIControl),
+	}
+}
+
+type Controller struct {
+	vmiSourceInformer cache.SharedIndexInformer
+	clientset         kubecli.KubevirtClient
+	queue             workqueue.RateLimitingInterface
+
+	log *log.FilteredLogger
+
+	objects map[types.NamespacedName]VMIControl
+	mu      sync.RWMutex
+}
+
+func (c *Controller) Run(stopCh <-chan struct{}) {
+	defer c.queue.ShutDown()
+	c.log.Info("Starting checksum controller")
+
+	go wait.Until(func() {
+		for key := range c.objects {
+			c.queue.Add(key)
+		}
+	}, time.Minute, stopCh)
+
+	wait.Until(c.runWorker, time.Second, stopCh)
+}
+
+func (c *Controller) runWorker() {
+	for c.Execute() {
+	}
+}
+
+func (c *Controller) Execute() bool {
+	key, quit := c.queue.Get()
+	if quit {
+		return false
+	}
+	defer c.queue.Done(key)
+	if err := c.execute(key.(types.NamespacedName)); err != nil {
+		c.log.Reason(err).Infof("re-enqueuing VirtualMachineInstance %v", key)
+		c.queue.AddRateLimited(key)
+	} else {
+		c.log.V(4).Infof("processed VirtualMachineInstance %v", key)
+		c.queue.Forget(key)
+	}
+	return true
+}
+
+func (c *Controller) execute(key types.NamespacedName) error {
+	vmi, exist, err := c.getVMIFromCache(key)
+	if err != nil {
+		return fmt.Errorf("could not get VirtualMachine instance %v: %w", key, err)
+	}
+	if !exist || !vmi.DeletionTimestamp.IsZero() {
+		c.delete(key)
+		return nil
+	}
+	control, found := c.get(key)
+	if !found {
+		return nil
+	}
+
+	sum, err := control.checksumGetter.GetAppliedVMIChecksum()
+	if err != nil {
+		return fmt.Errorf("could not get checksum for VirtualMachine instance %v: %w", key, err)
+	}
+	err = c.patchVMI(vmi, control.Checksum, sum)
+	if err != nil {
+		return fmt.Errorf("could not patch VirtualMachine instance %v: %w", key, err)
+	}
+
+	return nil
+}
+
+func (c *Controller) getVMIFromCache(key types.NamespacedName) (vmi *v1.VirtualMachineInstance, exists bool, err error) {
+	obj, exists, err := c.vmiSourceInformer.GetStore().GetByKey(key.String())
+	if err != nil {
+		return nil, false, err
+	}
+
+	if exists {
+		vmi = obj.(*v1.VirtualMachineInstance).DeepCopy()
+	}
+	return vmi, exists, nil
+}
+
+func (c *Controller) patchVMI(vmi *v1.VirtualMachineInstance, handlerSum, launcherSum string) error {
+	patchset := patch.New()
+
+	addPatch := func(anno, needValue string) {
+		value, exist := vmi.Annotations[anno]
+		path := fmt.Sprintf("/metadata/annotations/%s", EscapeJSONPointer(anno))
+
+		if !exist {
+			patchset.AddOption(patch.WithAdd(path, needValue))
+		} else if value != needValue {
+			patchset.AddOption(patch.WithReplace(path, needValue))
+		}
+	}
+
+	addPatch(AnnotationChecksum, handlerSum)
+	addPatch(AnnotationChecksumApplied, launcherSum)
+
+	if patchset.IsEmpty() {
+		return nil
+	}
+
+	patchBytes, err := patchset.GeneratePayload()
+	if err != nil {
+		return err
+	}
+	_, err = c.clientset.VirtualMachineInstance(vmi.Namespace).Patch(context.Background(), vmi.Name, types.JSONPatchType, patchBytes, metav1.PatchOptions{})
+
+	return err
+}
+
+func (c *Controller) Set(control VMIControl) {
+	c.mu.Lock()
+	defer c.mu.Unlock()
+	c.objects[control.NamespacedName] = control
+}
+
+func (c *Controller) delete(key types.NamespacedName) {
+	c.mu.Lock()
+	defer c.mu.Unlock()
+	delete(c.objects, key)
+}
+
+func (c *Controller) get(key types.NamespacedName) (VMIControl, bool) {
+	c.mu.RLock()
+	defer c.mu.RUnlock()
+	control, ok := c.objects[key]
+	return control, ok
+}
+
+func NewVMIControl(vmi *v1.VirtualMachineInstance, checksumGetter VMIChecksumGetter) (VMIControl, error) {
+	if vmi == nil {
+		return VMIControl{}, fmt.Errorf("vmi is nil")
+	}
+	sum, err := checksum.FromVMISpec(&vmi.Spec)
+	if err != nil {
+		return VMIControl{}, err
+	}
+	return VMIControl{
+		NamespacedName: types.NamespacedName{
+			Name:      vmi.Name,
+			Namespace: vmi.Namespace,
+		},
+		UID:            vmi.UID,
+		Checksum:       sum,
+		checksumGetter: checksumGetter,
+	}, nil
+}
+
+type VMIControl struct {
+	NamespacedName types.NamespacedName
+	UID            types.UID
+	Checksum       string
+
+	checksumGetter VMIChecksumGetter
+}
+
+func EscapeJSONPointer(path string) string {
+	return strings.ReplaceAll(path, "/", "~1")
+}
diff --git a/pkg/virt-handler/cmd-client/client.go b/pkg/virt-handler/cmd-client/client.go
index d0d1ea0378..68213c6456 100644
--- a/pkg/virt-handler/cmd-client/client.go
+++ b/pkg/virt-handler/cmd-client/client.go
@@ -113,6 +113,7 @@ type LauncherClient interface {
 	GetLaunchMeasurement(*v1.VirtualMachineInstance) (*v1.SEVMeasurementInfo, error)
 	InjectLaunchSecret(*v1.VirtualMachineInstance, *v1.SEVSecretOptions) error
 	SyncVirtualMachineMemory(vmi *v1.VirtualMachineInstance, options *cmdv1.VirtualMachineOptions) error
+	GetAppliedVMIChecksum() (string, error)
 }
 
 type VirtLauncherClient struct {
@@ -859,3 +860,25 @@ func (c *VirtLauncherClient) InjectLaunchSecret(vmi *v1.VirtualMachineInstance,
 func (c *VirtLauncherClient) SyncVirtualMachineMemory(vmi *v1.VirtualMachineInstance, options *cmdv1.VirtualMachineOptions) error {
 	return c.genericSendVMICmd("SyncVirtualMachineMemory", c.v1client.SyncVirtualMachineMemory, vmi, options)
 }
+
+func (c *VirtLauncherClient) GetAppliedVMIChecksum() (string, error) {
+	request := &cmdv1.EmptyRequest{}
+	ctx, cancel := context.WithTimeout(context.Background(), shortTimeout)
+	defer cancel()
+
+	checksumResponse, err := c.v1client.GetAppliedVMIChecksum(ctx, request)
+	var response *cmdv1.Response
+	if checksumResponse != nil {
+		response = checksumResponse.Response
+	}
+	if err = handleError(err, "GetAppliedVMIChecksum", response); err != nil {
+		return "", err
+	}
+
+	if checksumResponse != nil {
+		return checksumResponse.Checksum, nil
+	}
+
+	log.Log.Reason(err).Error("error getting the checksum")
+	return "", errors.New("error getting the checksum")
+}
diff --git a/pkg/virt-handler/vm.go b/pkg/virt-handler/vm.go
index ce689368a8..0e8825cfd2 100644
--- a/pkg/virt-handler/vm.go
+++ b/pkg/virt-handler/vm.go
@@ -37,6 +37,7 @@ import (
 	"time"
 
 	backendstorage "kubevirt.io/kubevirt/pkg/storage/backend-storage"
+	checksum_controller "kubevirt.io/kubevirt/pkg/virt-handler/checksum-controller"
 
 	cmdv1 "kubevirt.io/kubevirt/pkg/handler-launcher-com/cmd/v1"
 	pvctypes "kubevirt.io/kubevirt/pkg/storage/types"
@@ -286,10 +287,10 @@ func NewController(
 	}
 
 	_, err = domainInformer.AddEventHandler(cache.ResourceEventHandlerFuncs{
-			UpdateFunc: c.updateNetworkPriorityFunc,
-		})
+		UpdateFunc: c.updateNetworkPriorityFunc,
+	})
 	if err != nil {
-			return nil, err
+		return nil, err
 	}
 
 	c.launcherClients = virtcache.LauncherClientInfoByVMI{}
@@ -322,6 +323,8 @@ func NewController(
 		clientset.CoreV1())
 	c.heartBeat = heartbeat.NewHeartBeat(clientset.CoreV1(), c.deviceManagerController, clusterConfig, host)
 
+	c.checksumCtrl = checksum_controller.NewController(c.vmiSourceInformer, c.clientset)
+
 	return c, nil
 }
 
@@ -360,7 +363,9 @@ type VirtualMachineController struct {
 	ioErrorRetryManager         *FailRetryManager
 
 	hotplugContainerDiskMounter container_disk.HotplugMounter
-	nam *migrations.NetworkAccessibilityManager
+	nam                         *migrations.NetworkAccessibilityManager
+
+	checksumCtrl *checksum_controller.Controller
 }
 
 type virtLauncherCriticalSecurebootError struct {
@@ -1732,6 +1737,8 @@ func (c *VirtualMachineController) Run(threadiness int, stopCh chan struct{}) {
 		go wait.Until(c.runWorker, time.Second, stopCh)
 	}
 
+	go c.checksumCtrl.Run(stopCh)
+
 	<-stopCh
 	<-heartBeatDone
 	log.Log.Info("Stopping virt-handler controller.")
@@ -3267,7 +3274,7 @@ func (d *VirtualMachineController) vmUpdateHelperDefault(origVMI *v1.VirtualMach
 	options := virtualMachineOptions(smbios, period, preallocatedVolumes, d.capabilities, disksInfo, d.clusterConfig)
 	options.InterfaceDomainAttachment = domainspec.DomainAttachmentByInterfaceName(vmi.Spec.Domain.Devices.Interfaces, d.clusterConfig.GetNetworkBindings())
 
-	err = client.SyncVirtualMachine(vmi, options)
+	err = d.SyncVirtualMachine(client, vmi, options)
 	if err != nil {
 		isSecbootError := strings.Contains(err.Error(), "EFI OVMF rom missing")
 		if isSecbootError {
@@ -3350,7 +3357,7 @@ func (d *VirtualMachineController) hotplugSriovInterfacesCommand(vmi *v1.Virtual
 	}
 
 	log.Log.V(3).Object(vmi).Info("sending hot-plug host-devices command")
-	if err := client.HotplugHostDevices(vmi); err != nil {
+	if err := d.HotplugHostDevices(client, vmi); err != nil {
 		return fmt.Errorf("%s: %v", errMsgPrefix, err)
 	}
 
@@ -3709,7 +3716,7 @@ func (d *VirtualMachineController) hotplugCPU(vmi *v1.VirtualMachineInstance, cl
 		nil,
 		d.clusterConfig)
 
-	if err := client.SyncVirtualMachineCPUs(vmi, options); err != nil {
+	if err := d.SyncVirtualMachineCPU(client, vmi, options); err != nil {
 		return err
 	}
 
@@ -3757,7 +3764,7 @@ func (d *VirtualMachineController) hotplugMemory(vmi *v1.VirtualMachineInstance,
 
 	options := virtualMachineOptions(nil, 0, nil, d.capabilities, nil, d.clusterConfig)
 
-	if err := client.SyncVirtualMachineMemory(vmi, options); err != nil {
+	if err := d.SyncVirtualMachineMemory(client, vmi, options); err != nil {
 		// mark hotplug as failed
 		vmiConditions.UpdateCondition(vmi, &v1.VirtualMachineInstanceCondition{
 			Type:    v1.VirtualMachineInstanceMemoryChange,
@@ -3858,3 +3865,51 @@ func (d *VirtualMachineController) updateNetworkPriorityFunc(_, new interface{})
 		return
 	}
 }
+
+func (d *VirtualMachineController) SyncVirtualMachine(client cmdclient.LauncherClient, vmi *v1.VirtualMachineInstance, options *cmdv1.VirtualMachineOptions) error {
+	control, err := checksum_controller.NewVMIControl(vmi, client)
+	if err != nil {
+		return err
+	}
+	if err = client.SyncVirtualMachine(vmi, options); err != nil {
+		return err
+	}
+	d.checksumCtrl.Set(control)
+	return nil
+}
+
+func (d *VirtualMachineController) SyncVirtualMachineCPU(client cmdclient.LauncherClient, vmi *v1.VirtualMachineInstance, options *cmdv1.VirtualMachineOptions) error {
+	control, err := checksum_controller.NewVMIControl(vmi, client)
+	if err != nil {
+		return err
+	}
+	if err = client.SyncVirtualMachineCPUs(vmi, options); err != nil {
+		return err
+	}
+	d.checksumCtrl.Set(control)
+	return nil
+}
+
+func (d *VirtualMachineController) SyncVirtualMachineMemory(client cmdclient.LauncherClient, vmi *v1.VirtualMachineInstance, options *cmdv1.VirtualMachineOptions) error {
+	control, err := checksum_controller.NewVMIControl(vmi, client)
+	if err != nil {
+		return err
+	}
+	if err = client.SyncVirtualMachineMemory(vmi, options); err != nil {
+		return err
+	}
+	d.checksumCtrl.Set(control)
+	return nil
+}
+
+func (d *VirtualMachineController) HotplugHostDevices(client cmdclient.LauncherClient, vmi *v1.VirtualMachineInstance) error {
+	control, err := checksum_controller.NewVMIControl(vmi, client)
+	if err != nil {
+		return err
+	}
+	if err = client.HotplugHostDevices(vmi); err != nil {
+		return err
+	}
+	d.checksumCtrl.Set(control)
+	return nil
+}
diff --git a/pkg/virt-launcher/virtwrap/cmd-server/server.go b/pkg/virt-launcher/virtwrap/cmd-server/server.go
index 9815b402b9..2be5af2eb3 100644
--- a/pkg/virt-launcher/virtwrap/cmd-server/server.go
+++ b/pkg/virt-launcher/virtwrap/cmd-server/server.go
@@ -741,6 +741,18 @@ func (l *Launcher) SyncVirtualMachineMemory(_ context.Context, request *cmdv1.VM
 	return response, nil
 }
 
+func (l *Launcher) GetAppliedVMIChecksum(_ context.Context, _ *cmdv1.EmptyRequest) (*cmdv1.VMIChecksumResponse, error) {
+	checksum := l.domainManager.GetAppliedVMIChecksum()
+	log.Log.V(5).Infof("GetAppliedVMIChecksum: %q", checksum)
+	response := &cmdv1.VMIChecksumResponse{
+		Checksum: checksum,
+		Response: &cmdv1.Response{
+			Success: true,
+		},
+	}
+	return response, nil
+}
+
 func ReceivedEarlyExitSignal() bool {
 	_, earlyExit := os.LookupEnv(receivedEarlyExitSignalEnvVar)
 	return earlyExit
diff --git a/pkg/virt-launcher/virtwrap/manager.go b/pkg/virt-launcher/virtwrap/manager.go
index cddee4f199..6744cb2913 100644
--- a/pkg/virt-launcher/virtwrap/manager.go
+++ b/pkg/virt-launcher/virtwrap/manager.go
@@ -42,6 +42,8 @@ import (
 	"sync"
 	"time"
 
+	"kubevirt.io/kubevirt/pkg/util/checksum"
+	"kubevirt.io/kubevirt/pkg/util/syncobject"
 	virtcache "kubevirt.io/kubevirt/tools/cache"
 
 	"k8s.io/utils/pointer"
@@ -145,6 +147,7 @@ type DomainManager interface {
 	GetLaunchMeasurement(*v1.VirtualMachineInstance) (*v1.SEVMeasurementInfo, error)
 	InjectLaunchSecret(*v1.VirtualMachineInstance, *v1.SEVSecretOptions) error
 	UpdateGuestMemory(vmi *v1.VirtualMachineInstance) error
+	GetAppliedVMIChecksum() string
 }
 
 type LibvirtDomainManager struct {
@@ -176,6 +179,8 @@ type LibvirtDomainManager struct {
 
 	metadataCache    *metadata.Cache
 	domainStatsCache *virtcache.TimeDefinedCache[*stats.DomainStats]
+
+	checksum syncobject.SyncObject[string]
 }
 
 type pausedVMIs struct {
@@ -222,6 +227,8 @@ func newLibvirtDomainManager(connection cli.Connection, virtShareDir, ephemeralD
 		cancelSafetyUnfreezeChan: make(chan struct{}),
 		migrateInfoStats:         &stats.DomainJobInfo{},
 		metadataCache:            metadataCache,
+
+		checksum: syncobject.NewSyncObject[string](),
 	}
 
 	manager.hotplugHostDevicesInProgress = make(chan struct{}, maxConcurrentHotplugHostDevices)
@@ -285,6 +292,11 @@ func (l *LibvirtDomainManager) UpdateGuestMemory(vmi *v1.VirtualMachineInstance)
 	l.domainModifyLock.Lock()
 	defer l.domainModifyLock.Unlock()
 
+	var origSpec *v1.VirtualMachineInstanceSpec
+	if vmi != nil {
+		origSpec = vmi.Spec.DeepCopy()
+	}
+
 	const errMsgPrefix = "failed to update Guest Memory"
 
 	domainName := api.VMINamespaceKeyFunc(vmi)
@@ -332,6 +344,12 @@ func (l *LibvirtDomainManager) UpdateGuestMemory(vmi *v1.VirtualMachineInstance)
 		}
 	}
 
+	sum, err := checksum.FromVMISpec(origSpec)
+	if err != nil {
+		return fmt.Errorf("failed to calculate checksum of VMI spec: %w", err)
+	}
+	l.checksum.Set(sum)
+
 	log.Log.V(2).Infof("hotplugging guest memory to %v", vmi.Spec.Domain.Memory.Guest.Value())
 	return nil
 }
@@ -449,6 +467,11 @@ func (l *LibvirtDomainManager) UpdateVCPUs(vmi *v1.VirtualMachineInstance, optio
 	l.domainModifyLock.Lock()
 	defer l.domainModifyLock.Unlock()
 
+	var origSpec *v1.VirtualMachineInstanceSpec
+	if vmi != nil {
+		origSpec = vmi.Spec.DeepCopy()
+	}
+
 	const errMsgPrefix = "failed to update vCPUs"
 
 	domainName := api.VMINamespaceKeyFunc(vmi)
@@ -528,8 +551,14 @@ func (l *LibvirtDomainManager) UpdateVCPUs(vmi *v1.VirtualMachineInstance, optio
 				return fmt.Errorf("%s: %v", errMsgPrefix, err)
 			}
 		}
+	}
 
+	sum, err := checksum.FromVMISpec(origSpec)
+	if err != nil {
+		return fmt.Errorf("failed to calculate checksum of VMI spec: %w", err)
 	}
+	l.checksum.Set(sum)
+
 	return nil
 }
 
@@ -555,9 +584,20 @@ func (l *LibvirtDomainManager) HotplugHostDevices(vmi *v1.VirtualMachineInstance
 	go func() {
 		defer func() { <-l.hotplugHostDevicesInProgress }()
 
+		var origSpec *v1.VirtualMachineInstanceSpec
+		if vmi != nil {
+			origSpec = vmi.Spec.DeepCopy()
+		}
 		if err := l.hotPlugHostDevices(vmi); err != nil {
 			log.Log.Object(vmi).Error(err.Error())
 		}
+
+		sum, err := checksum.FromVMISpec(origSpec)
+		if err != nil {
+			log.Log.Object(vmi).Errorf("Failed to calculate checksum: %v", err)
+		}
+		l.checksum.Set(sum)
+
 	}()
 	return nil
 }
@@ -1087,6 +1127,11 @@ func (l *LibvirtDomainManager) SyncVMI(vmi *v1.VirtualMachineInstance, allowEmul
 	l.domainModifyLock.Lock()
 	defer l.domainModifyLock.Unlock()
 
+	var originalSpec *v1.VirtualMachineInstanceSpec
+	if vmi != nil {
+		originalSpec = vmi.Spec.DeepCopy()
+	}
+
 	logger := log.Log.Object(vmi)
 
 	domain := &api.Domain{}
@@ -1147,6 +1192,13 @@ func (l *LibvirtDomainManager) SyncVMI(vmi *v1.VirtualMachineInstance, allowEmul
 		return nil, err
 	}
 
+	// Set CHECKSUM VMI SPEC
+	sum, err := checksum.FromVMISpec(originalSpec)
+	if err != nil {
+		return nil, fmt.Errorf("failed to calculate checksum of VMI spec: %w", err)
+	}
+	l.checksum.Set(sum)
+
 	// TODO: check if VirtualMachineInstance Spec and Domain Spec are equal or if we have to sync
 	return oldSpec, nil
 }
@@ -2334,3 +2386,7 @@ func getDomainCreateFlags(vmi *v1.VirtualMachineInstance) libvirt.DomainCreateFl
 	}
 	return flags
 }
+
+func (l *LibvirtDomainManager) GetAppliedVMIChecksum() string {
+	return l.checksum.Get()
+}
diff --git a/pkg/virt-operator/resource/generate/rbac/handler.go b/pkg/virt-operator/resource/generate/rbac/handler.go
index 2640f61826..5d9a7b6279 100644
--- a/pkg/virt-operator/resource/generate/rbac/handler.go
+++ b/pkg/virt-operator/resource/generate/rbac/handler.go
@@ -78,7 +78,7 @@ func newHandlerClusterRole() *rbacv1.ClusterRole {
 					"virtualmachineinstances",
 				},
 				Verbs: []string{
-					"update", "list", "watch",
+					"update", "list", "watch", "patch",
 				},
 			},
 			{
diff --git a/pkg/vsock/system/v1/system.pb.go b/pkg/vsock/system/v1/system.pb.go
index 6f743628c7..2c47c64162 100644
--- a/pkg/vsock/system/v1/system.pb.go
+++ b/pkg/vsock/system/v1/system.pb.go
@@ -15,15 +15,12 @@ It has these top-level messages:
 */
 package v1
 
-import (
-	fmt "fmt"
-
-	proto "github.com/golang/protobuf/proto"
-
-	math "math"
+import proto "github.com/golang/protobuf/proto"
+import fmt "fmt"
+import math "math"
 
+import (
 	context "golang.org/x/net/context"
-
 	grpc "google.golang.org/grpc"
 )
 
