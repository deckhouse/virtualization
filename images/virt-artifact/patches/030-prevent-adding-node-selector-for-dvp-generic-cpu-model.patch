diff --git a/pkg/virt-controller/services/nodeselectorrenderer.go b/pkg/virt-controller/services/nodeselectorrenderer.go
index 390f359d2a..c21caf97dd 100644
--- a/pkg/virt-controller/services/nodeselectorrenderer.go
+++ b/pkg/virt-controller/services/nodeselectorrenderer.go
@@ -23,6 +23,9 @@ type NodeSelectorRenderer struct {

 type NodeSelectorRendererOption func(renderer *NodeSelectorRenderer)

+// DeckhouseVirtualizationPlatformGenericCPUModel is a name of additional empty CPU model for Discovery type of VMClass.
+const DeckhouseVirtualizationPlatformGenericCPUModel = "kvm64"
+
 func NewNodeSelectorRenderer(
 	vmiNodeSelectors map[string]string,
 	clusterWideConfNodeSelectors map[string]string,
@@ -51,7 +54,8 @@ func (nsr *NodeSelectorRenderer) Render() map[string]string {
 	if nsr.hyperv {
 		maps.Copy(nsr.podNodeSelectors, hypervNodeSelectors(nsr.vmiFeatures))
 	}
-	if nsr.cpuModelLabel != "" && nsr.cpuModelLabel != cpuModelLabel(v1.CPUModeHostModel) && nsr.cpuModelLabel != cpuModelLabel(v1.CPUModeHostPassthrough) {
+	// Prevent adding node selector for host-model, host-passthrough and an empty CPU model.
+	if nsr.cpuModelLabel != "" && nsr.cpuModelLabel != cpuModelLabel(v1.CPUModeHostModel) && nsr.cpuModelLabel != cpuModelLabel(v1.CPUModeHostPassthrough) && nsr.cpuModelLabel != cpuModelLabel(DeckhouseVirtualizationPlatformGenericCPUModel) {
 		nsr.enableSelectorLabel(nsr.cpuModelLabel)
 	}
 	for _, cpuFeatureLabel := range nsr.cpuFeatureLabels {
diff --git a/pkg/virt-launcher/virtwrap/live-migration-source.go b/pkg/virt-launcher/virtwrap/live-migration-source.go
index 5cc14a1f85..6bd0ba3d9d 100644
--- a/pkg/virt-launcher/virtwrap/live-migration-source.go
+++ b/pkg/virt-launcher/virtwrap/live-migration-source.go
@@ -230,6 +230,15 @@ func migratableDomXML(dom cli.VirDomain, vmi *v1.VirtualMachineInstance, domSpec
 		return "", err
 	}

+	// Put back common model if specified in VMI.
+	vmiCPU := vmi.Spec.Domain.CPU
+	if vmiCPU != nil && vmiCPU.Model == "kvm64" {
+		if domcfg.CPU.Model != nil {
+			domcfg.CPU.Model.Value = vmiCPU.Model
+			domcfg.CPU.Model.Fallback = "allow"
+		}
+	}
+
 	return domcfg.Marshal()
 }

