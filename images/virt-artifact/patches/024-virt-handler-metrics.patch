diff --git a/cmd/virt-handler/virt-handler.go b/cmd/virt-handler/virt-handler.go
index 09b2b53904..80812d9285 100644
--- a/cmd/virt-handler/virt-handler.go
+++ b/cmd/virt-handler/virt-handler.go
@@ -93,10 +93,12 @@ const (
 	defaultWatchdogTimeout = 30 * time.Second
 
 	// Default port that virt-handler listens on.
-	defaultPort = 8185
+	defaultPort        = 8185
+	defaultMetricsPort = defaultPort
 
 	// Default address that virt-handler listens on.
-	defaultHost = "0.0.0.0"
+	defaultHost        = "0.0.0.0"
+	defaultMetricsHost = defaultHost
 
 	hostOverride = ""
 
@@ -366,6 +368,8 @@ func (app *virtHandlerApp) Run() {
 
 	promErrCh := make(chan error)
 	go app.runPrometheusServer(promErrCh)
+	healErrCh := make(chan error)
+	go app.runHealthzServer(healErrCh)
 
 	lifecycleHandler := rest.NewLifecycleHandler(
 		recorder,
@@ -546,7 +550,7 @@ func (app *virtHandlerApp) runPrometheusServer(errCh chan error) {
 	log.Log.V(1).Infof("metrics: max concurrent requests=%d", app.MaxRequestsInFlight)
 	mux.Handle("/metrics", metricshandler.Handler(app.MaxRequestsInFlight))
 	server := http.Server{
-		Addr:      app.ServiceListen.Address(),
+		Addr:      app.ServiceListen.MetricsAddress(),
 		Handler:   mux,
 		TLSConfig: app.promTLSConfig,
 		// Disable HTTP/2
@@ -556,6 +560,19 @@ func (app *virtHandlerApp) runPrometheusServer(errCh chan error) {
 	errCh <- server.ListenAndServeTLS("", "")
 }
 
+func (app *virtHandlerApp) runHealthzServer(errCh chan error) {
+	mux := restful.NewContainer()
+	webService := new(restful.WebService)
+	webService.Path("/").Consumes(restful.MIME_JSON).Produces(restful.MIME_JSON)
+	webService.Route(webService.GET("/healthz").To(healthz.KubeConnectionHealthzFuncFactory(app.clusterConfig, apiHealthVersion)).Doc("Health endpoint"))
+	mux.Add(webService)
+	server := http.Server{
+		Addr:    app.ServiceListen.Address(),
+		Handler: mux,
+	}
+	errCh <- server.ListenAndServe()
+}
+
 func (app *virtHandlerApp) runServer(errCh chan error, consoleHandler *rest.ConsoleHandler, lifecycleHandler *rest.LifecycleHandler) {
 	ws := new(restful.WebService)
 	ws.Route(ws.GET("/v1/namespaces/{namespace}/virtualmachineinstances/{name}/console").To(consoleHandler.SerialHandler))
@@ -588,7 +605,9 @@ func (app *virtHandlerApp) AddFlags() {
 	app.InitFlags()
 
 	app.BindAddress = defaultHost
+	app.MetricsBindAddress = defaultMetricsHost
 	app.Port = defaultPort
+	app.MetricsPort = defaultMetricsPort
 
 	app.AddCommonFlags()
 
diff --git a/pkg/service/service.go b/pkg/service/service.go
index 0368a0762b..c7369d73e6 100644
--- a/pkg/service/service.go
+++ b/pkg/service/service.go
@@ -42,6 +42,8 @@ type ServiceListen struct {
 	Name        string
 	BindAddress string
 	Port        int
+	MetricsBindAddress string
+	MetricsPort        int
 }
 
 type ServiceLibvirt struct {
@@ -52,6 +54,10 @@ func (service *ServiceListen) Address() string {
 	return fmt.Sprintf("%s:%s", service.BindAddress, strconv.Itoa(service.Port))
 }
 
+func (service *ServiceListen) MetricsAddress() string {
+	return fmt.Sprintf("%s:%s", service.MetricsBindAddress, strconv.Itoa(service.MetricsPort))
+}
+
 func (service *ServiceListen) InitFlags() {
 	flag.CommandLine.AddGoFlag(goflag.CommandLine.Lookup("v"))
 	flag.CommandLine.AddGoFlag(goflag.CommandLine.Lookup("kubeconfig"))
@@ -61,6 +67,9 @@ func (service *ServiceListen) InitFlags() {
 func (service *ServiceListen) AddCommonFlags() {
 	flag.StringVar(&service.BindAddress, "listen", service.BindAddress, "Address where to listen on")
 	flag.IntVar(&service.Port, "port", service.Port, "Port to listen on")
+	// default values are taken from the common server counterparts
+	flag.StringVar(&service.MetricsBindAddress, "metrics-listen", service.BindAddress, "Address for metrics to listen on")
+	flag.IntVar(&service.MetricsPort, "metrics-port", service.Port, "Port for metrics to listen on")
 }
 
 func (service *ServiceLibvirt) AddLibvirtFlags() {
diff --git a/pkg/virt-operator/resource/generate/components/daemonsets.go b/pkg/virt-operator/resource/generate/components/daemonsets.go
index da6e00c783..c841393941 100644
--- a/pkg/virt-operator/resource/generate/components/daemonsets.go
+++ b/pkg/virt-operator/resource/generate/components/daemonsets.go
@@ -175,6 +175,10 @@ func NewHandlerDaemonSet(namespace, repository, imagePrefix, version, launcherVe
 	container.Args = []string{
 		"--port",
 		"8443",
+		"--metrics-listen",
+		"127.0.0.1",
+		"--metrics-port",
+		"8080",
 		"--hostname-override",
 		"$(NODE_NAME)",
 		"--pod-ip-address",
@@ -192,7 +196,7 @@ func NewHandlerDaemonSet(namespace, repository, imagePrefix, version, launcherVe
 		{
 			Name:          "metrics",
 			Protocol:      corev1.ProtocolTCP,
-			ContainerPort: 8443,
+			ContainerPort: 8080,
 		},
 	}
 	container.SecurityContext = &corev1.SecurityContext{
