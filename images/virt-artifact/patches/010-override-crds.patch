diff --git a/pkg/virt-api/definitions/definitions.go b/pkg/virt-api/definitions/definitions.go
index 94443cbe3..b71cca384 100644
--- a/pkg/virt-api/definitions/definitions.go
+++ b/pkg/virt-api/definitions/definitions.go
@@ -55,8 +55,33 @@ const (
 )
 
 func ComposeAPIDefinitions() []*restful.WebService {
-	var result []*restful.WebService
-	for _, f := range []func() []*restful.WebService{
+	return xGVApiServiceDefinitions(v1.GroupVersion)
+}
+
+func xGVApiServiceDefinitions(xGV schema.GroupVersion) []*restful.WebService {
+	ws := new(restful.WebService)
+	ws.Doc("The KubeVirt and CDI API, a virtual machine management.")
+
+	ws.Route(
+		ws.GET("/").Produces(mime.MIME_JSON).Writes(metav1.APIResourceList{}).
+			To(noop).
+			Operation(fmt.Sprintf("getAPIResources-%s", xGV.Group)).
+			Doc("Get KubeVirt and CDI API Resources").
+			Returns(http.StatusOK, "OK", metav1.APIResourceList{}).
+			Returns(http.StatusNotFound, "Not Found", ""),
+	)
+
+	ws2 := new(restful.WebService)
+	ws2.Path(GroupBasePath(xGV))
+	ws2.Route(ws2.GET("/").
+		Produces(mime.MIME_JSON).Writes(metav1.APIGroup{}).
+		To(noop).
+		Doc("Get a KubeVirt and CDI API group").
+		Operation("getAPIGroup-"+xGV.Group).
+		Returns(http.StatusOK, "OK", metav1.APIGroup{}).
+		Returns(http.StatusNotFound, "Not Found", ""))
+
+	for _, f := range []func(ws *restful.WebService) *restful.WebService{
 		kubevirtApiServiceDefinitions,
 		snapshotApiServiceDefinitions,
 		exportApiServiceDefinitions,
@@ -65,13 +90,13 @@ func ComposeAPIDefinitions() []*restful.WebService {
 		poolApiServiceDefinitions,
 		vmCloneDefinitions,
 	} {
-		result = append(result, f()...)
+		ws = f(ws)
 	}
 
-	return result
+	return []*restful.WebService{ws, ws2}
 }
 
-func kubevirtApiServiceDefinitions() []*restful.WebService {
+func kubevirtApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	vmiGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstances"}
 	vmirsGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstancereplicasets"}
 	vmipGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstancepresets"}
@@ -79,11 +104,7 @@ func kubevirtApiServiceDefinitions() []*restful.WebService {
 	migrationGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstancemigrations"}
 	kubeVirtGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "kubevirt"}
 
-	ws, err := groupVersionProxyBase(v1.GroupVersion)
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, kubeVirtGVR, &v1.KubeVirt{}, v1.KubeVirtGroupVersionKind.Kind, &v1.KubeVirtList{})
 	if err != nil {
 		panic(err)
@@ -113,24 +134,15 @@ func kubevirtApiServiceDefinitions() []*restful.WebService {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(vmiGVR)
-	if err != nil {
-		panic(err)
-	}
-
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func snapshotApiServiceDefinitions() []*restful.WebService {
+func snapshotApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	vmsGVR := snapshotv1.SchemeGroupVersion.WithResource("virtualmachinesnapshots")
 	vmscGVR := snapshotv1.SchemeGroupVersion.WithResource("virtualmachinesnapshotcontents")
 	vmrGVR := snapshotv1.SchemeGroupVersion.WithResource("virtualmachinerestores")
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: snapshotv1.SchemeGroupVersion.Group, Version: snapshotv1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, vmsGVR, &snapshotv1.VirtualMachineSnapshot{}, "VirtualMachineSnapshot", &snapshotv1.VirtualMachineSnapshotList{})
 	if err != nil {
 		panic(err)
@@ -146,64 +158,40 @@ func snapshotApiServiceDefinitions() []*restful.WebService {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(vmsGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func exportApiServiceDefinitions() []*restful.WebService {
+func exportApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	exportsGVR := exportv1.SchemeGroupVersion.WithResource("virtualmachineexports")
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: exportv1.SchemeGroupVersion.Group, Version: exportv1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, exportsGVR, &exportv1.VirtualMachineExport{}, "VirtualMachineExport", &exportv1.VirtualMachineExportList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(exportsGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func migrationPoliciesApiServiceDefinitions() []*restful.WebService {
+func migrationPoliciesApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	mpGVR := migrationsv1.SchemeGroupVersion.WithResource(migrations.ResourceMigrationPolicies)
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: migrationsv1.SchemeGroupVersion.Group, Version: migrationsv1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericClusterResourceProxy(ws, mpGVR, &migrationsv1.MigrationPolicy{}, migrationsv1.MigrationPolicyKind.Kind, &migrationsv1.MigrationPolicyList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(mpGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func instancetypeApiServiceDefinitions() []*restful.WebService {
+func instancetypeApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	instancetypeGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.PluralResourceName)
 	clusterInstancetypeGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.ClusterPluralResourceName)
 	preferenceGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.PluralPreferenceResourceName)
 	clusterPreferenceGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.ClusterPluralPreferenceResourceName)
 
-	ws, err := groupVersionProxyBase(instancetypev1beta1.SchemeGroupVersion)
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, instancetypeGVR, &instancetypev1beta1.VirtualMachineInstancetype{}, "VirtualMachineInstancetype", &instancetypev1beta1.VirtualMachineInstancetypeList{})
 	if err != nil {
 		panic(err)
@@ -224,53 +212,31 @@ func instancetypeApiServiceDefinitions() []*restful.WebService {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(instancetypeGVR)
-	if err != nil {
-		panic(err)
-	}
-
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func poolApiServiceDefinitions() []*restful.WebService {
+func poolApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	poolGVR := poolv1alpha1.SchemeGroupVersion.WithResource("virtualmachinepools")
 
-	ws, err := groupVersionProxyBase(poolv1alpha1.SchemeGroupVersion)
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, poolGVR, &poolv1alpha1.VirtualMachinePool{}, "VirtualMachinePool", &poolv1alpha1.VirtualMachinePoolList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(poolGVR)
-	if err != nil {
-		panic(err)
-	}
-
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func vmCloneDefinitions() []*restful.WebService {
+func vmCloneDefinitions(ws *restful.WebService) *restful.WebService {
 	mpGVR := clonev1lpha1.SchemeGroupVersion.WithResource(clone.ResourceVMClonePlural)
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: clonev1lpha1.SchemeGroupVersion.Group, Version: clonev1lpha1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericClusterResourceProxy(ws, mpGVR, &clonev1lpha1.VirtualMachineClone{}, clonev1lpha1.VirtualMachineCloneKind.Kind, &clonev1lpha1.VirtualMachineCloneList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(mpGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
 func groupVersionProxyBase(gv schema.GroupVersion) (*restful.WebService, error) {
@@ -295,25 +261,25 @@ func genericNamespacedResourceProxy(ws *restful.WebService, gvr schema.GroupVers
 	listExample := reflect.ValueOf(objListPointer).Elem().Interface()
 
 	ws.Route(addNamespaceParam(ws,
-		createOperation(ws, NamespacedResourceBasePath(gvr), objExample).
+		createOperation(ws, BaseNamespacedResourceBasePath(gvr), objExample).
 			Operation("createNamespaced"+objKind).
 			Doc("Create a "+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		replaceOperation(ws, NamespacedResourcePath(gvr), objExample).
+		replaceOperation(ws, BaseNamespacedResourcePath(gvr), objExample).
 			Operation("replaceNamespaced"+objKind).
 			Doc("Update a "+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		deleteOperation(ws, NamespacedResourcePath(gvr)).
+		deleteOperation(ws, BaseNamespacedResourcePath(gvr)).
 			Operation("deleteNamespaced"+objKind).
 			Doc("Delete a "+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		readOperation(ws, NamespacedResourcePath(gvr), objExample).
+		readOperation(ws, BaseNamespacedResourcePath(gvr), objExample).
 			Operation("readNamespaced"+objKind).
 			Doc("Get a "+objKind+obj),
 	))
@@ -325,7 +291,7 @@ func genericNamespacedResourceProxy(ws *restful.WebService, gvr schema.GroupVers
 	)
 
 	ws.Route(addNamespaceParam(ws,
-		patchOperation(ws, NamespacedResourcePath(gvr), objExample).
+		patchOperation(ws, BaseNamespacedResourcePath(gvr), objExample).
 			Operation("patchNamespaced"+objKind).
 			Doc("Patch a "+objKind+obj),
 	))
@@ -339,19 +305,19 @@ func genericNamespacedResourceProxy(ws *restful.WebService, gvr schema.GroupVers
 
 	// TODO, implement watch. For now it is here to provide swagger doc only
 	ws.Route(addNamespaceParam(ws,
-		watchOperation(ws, "/watch"+NamespacedResourceBasePath(gvr)).
+		watchOperation(ws, "/watch"+BaseNamespacedResourceBasePath(gvr)).
 			Operation("watchNamespaced"+objKind).
 			Doc(watch+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		listOperation(ws, NamespacedResourceBasePath(gvr), listExample).
+		listOperation(ws, BaseNamespacedResourceBasePath(gvr), listExample).
 			Operation("listNamespaced"+objKind).
 			Doc("Get a list of "+objKind+objs),
 	))
 
 	ws.Route(
-		deleteCollectionOperation(ws, NamespacedResourceBasePath(gvr)).
+		deleteCollectionOperation(ws, BaseNamespacedResourceBasePath(gvr)).
 			Operation("deleteCollectionNamespaced" + objKind).
 			Doc("Delete a collection of " + objKind + objs),
 	)
@@ -642,10 +608,22 @@ func GroupVersionBasePath(gvr schema.GroupVersion) string {
 	return fmt.Sprintf("/apis/%s/%s", gvr.Group, gvr.Version)
 }
 
+// BaseNamespacedResourceBasePath concatenates NamespacedResourceBasePath result with group version base prefix.
+// WebService no longer uses the root path with group version, so it's necessary to set group version path here.
+func BaseNamespacedResourceBasePath(gvr schema.GroupVersionResource) string {
+	return GroupVersionBasePath(gvr.GroupVersion()) + NamespacedResourceBasePath(gvr)
+}
+
 func NamespacedResourceBasePath(gvr schema.GroupVersionResource) string {
 	return fmt.Sprintf("/namespaces/{namespace:[a-z0-9][a-z0-9\\-]*}/%s", gvr.Resource)
 }
 
+// BaseNamespacedResourcePath concatenates NamespacedResourcePath result with group version base prefix.
+// WebService no longer uses the root path with group version, so it's necessary to set group version path here.
+func BaseNamespacedResourcePath(gvr schema.GroupVersionResource) string {
+	return GroupVersionBasePath(gvr.GroupVersion()) + NamespacedResourcePath(gvr)
+}
+
 func NamespacedResourcePath(gvr schema.GroupVersionResource) string {
 	return fmt.Sprintf("/namespaces/{namespace:[a-z0-9][a-z0-9\\-]*}/%s/{name:[a-z0-9][a-z0-9\\-]*}", gvr.Resource)
 }
