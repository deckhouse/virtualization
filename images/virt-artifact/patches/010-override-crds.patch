diff --git a/pkg/storage/export/export/export.go b/pkg/storage/export/export/export.go
index 51eb69df6..7a8a29381 100644
--- a/pkg/storage/export/export/export.go
+++ b/pkg/storage/export/export/export.go
@@ -140,7 +140,7 @@ var exportGVK = schema.GroupVersionKind{
 }
 
 var datavolumeGVK = schema.GroupVersionKind{
-	Group:   cdiv1.SchemeGroupVersion.Group,
+	Group:   "x.virtualization.deckhouse.io",
 	Version: cdiv1.SchemeGroupVersion.Version,
 	Kind:    "DataVolume",
 }
diff --git a/pkg/storage/export/export/links.go b/pkg/storage/export/export/links.go
index 38bdb9410..5dfd44224 100644
--- a/pkg/storage/export/export/links.go
+++ b/pkg/storage/export/export/links.go
@@ -32,6 +32,7 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	networkingv1 "k8s.io/api/networking/v1"
 
+	"kubevirt.io/api/export"
 	exportv1 "kubevirt.io/api/export/v1alpha1"
 
 	"kubevirt.io/kubevirt/pkg/certificates/triple/cert"
@@ -45,7 +46,7 @@ const (
 	routeCaKey           = "ca.crt"
 	subjectAltNameId     = "2.5.29.17"
 
-	apiGroup              = "export.kubevirt.io"
+	apiGroup              = export.GroupName
 	apiVersion            = "v1alpha1"
 	exportResourceName    = "virtualmachineexports"
 	gv                    = apiGroup + "/" + apiVersion
diff --git a/pkg/storage/export/virt-exportserver/exportserver.go b/pkg/storage/export/virt-exportserver/exportserver.go
index 388f9c752..8e20fe5c4 100644
--- a/pkg/storage/export/virt-exportserver/exportserver.go
+++ b/pkg/storage/export/virt-exportserver/exportserver.go
@@ -579,7 +579,7 @@ func vmHandler(filePath string, vi []VolumeInfo, getBasePath func() (string, err
 		for _, dv := range datavolumes {
 			dv.TypeMeta = metav1.TypeMeta{
 				Kind:       "DataVolume",
-				APIVersion: "cdi.kubevirt.io/v1beta1",
+				APIVersion: "x.virtualization.deckhouse.io/v1beta1",
 			}
 			for _, info := range vi {
 				if strings.Contains(info.RawGzURI, dv.Name) {
diff --git a/pkg/virt-api/definitions/definitions.go b/pkg/virt-api/definitions/definitions.go
index 94443cbe3..b71cca384 100644
--- a/pkg/virt-api/definitions/definitions.go
+++ b/pkg/virt-api/definitions/definitions.go
@@ -55,8 +55,33 @@ const (
 )
 
 func ComposeAPIDefinitions() []*restful.WebService {
-	var result []*restful.WebService
-	for _, f := range []func() []*restful.WebService{
+	return xGVApiServiceDefinitions(v1.GroupVersion)
+}
+
+func xGVApiServiceDefinitions(xGV schema.GroupVersion) []*restful.WebService {
+	ws := new(restful.WebService)
+	ws.Doc("The KubeVirt and CDI API, a virtual machine management.")
+
+	ws.Route(
+		ws.GET("/").Produces(mime.MIME_JSON).Writes(metav1.APIResourceList{}).
+			To(noop).
+			Operation(fmt.Sprintf("getAPIResources-%s", xGV.Group)).
+			Doc("Get KubeVirt and CDI API Resources").
+			Returns(http.StatusOK, "OK", metav1.APIResourceList{}).
+			Returns(http.StatusNotFound, "Not Found", ""),
+	)
+
+	ws2 := new(restful.WebService)
+	ws2.Path(GroupBasePath(xGV))
+	ws2.Route(ws2.GET("/").
+		Produces(mime.MIME_JSON).Writes(metav1.APIGroup{}).
+		To(noop).
+		Doc("Get a KubeVirt and CDI API group").
+		Operation("getAPIGroup-"+xGV.Group).
+		Returns(http.StatusOK, "OK", metav1.APIGroup{}).
+		Returns(http.StatusNotFound, "Not Found", ""))
+
+	for _, f := range []func(ws *restful.WebService) *restful.WebService{
 		kubevirtApiServiceDefinitions,
 		snapshotApiServiceDefinitions,
 		exportApiServiceDefinitions,
@@ -65,13 +90,13 @@ func ComposeAPIDefinitions() []*restful.WebService {
 		poolApiServiceDefinitions,
 		vmCloneDefinitions,
 	} {
-		result = append(result, f()...)
+		ws = f(ws)
 	}
 
-	return result
+	return []*restful.WebService{ws, ws2}
 }
 
-func kubevirtApiServiceDefinitions() []*restful.WebService {
+func kubevirtApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	vmiGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstances"}
 	vmirsGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstancereplicasets"}
 	vmipGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstancepresets"}
@@ -79,11 +104,7 @@ func kubevirtApiServiceDefinitions() []*restful.WebService {
 	migrationGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "virtualmachineinstancemigrations"}
 	kubeVirtGVR := schema.GroupVersionResource{Group: v1.GroupVersion.Group, Version: v1.GroupVersion.Version, Resource: "kubevirt"}
 
-	ws, err := groupVersionProxyBase(v1.GroupVersion)
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, kubeVirtGVR, &v1.KubeVirt{}, v1.KubeVirtGroupVersionKind.Kind, &v1.KubeVirtList{})
 	if err != nil {
 		panic(err)
@@ -113,24 +134,15 @@ func kubevirtApiServiceDefinitions() []*restful.WebService {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(vmiGVR)
-	if err != nil {
-		panic(err)
-	}
-
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func snapshotApiServiceDefinitions() []*restful.WebService {
+func snapshotApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	vmsGVR := snapshotv1.SchemeGroupVersion.WithResource("virtualmachinesnapshots")
 	vmscGVR := snapshotv1.SchemeGroupVersion.WithResource("virtualmachinesnapshotcontents")
 	vmrGVR := snapshotv1.SchemeGroupVersion.WithResource("virtualmachinerestores")
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: snapshotv1.SchemeGroupVersion.Group, Version: snapshotv1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, vmsGVR, &snapshotv1.VirtualMachineSnapshot{}, "VirtualMachineSnapshot", &snapshotv1.VirtualMachineSnapshotList{})
 	if err != nil {
 		panic(err)
@@ -146,64 +158,40 @@ func snapshotApiServiceDefinitions() []*restful.WebService {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(vmsGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func exportApiServiceDefinitions() []*restful.WebService {
+func exportApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	exportsGVR := exportv1.SchemeGroupVersion.WithResource("virtualmachineexports")
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: exportv1.SchemeGroupVersion.Group, Version: exportv1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, exportsGVR, &exportv1.VirtualMachineExport{}, "VirtualMachineExport", &exportv1.VirtualMachineExportList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(exportsGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func migrationPoliciesApiServiceDefinitions() []*restful.WebService {
+func migrationPoliciesApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	mpGVR := migrationsv1.SchemeGroupVersion.WithResource(migrations.ResourceMigrationPolicies)
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: migrationsv1.SchemeGroupVersion.Group, Version: migrationsv1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericClusterResourceProxy(ws, mpGVR, &migrationsv1.MigrationPolicy{}, migrationsv1.MigrationPolicyKind.Kind, &migrationsv1.MigrationPolicyList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(mpGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func instancetypeApiServiceDefinitions() []*restful.WebService {
+func instancetypeApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	instancetypeGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.PluralResourceName)
 	clusterInstancetypeGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.ClusterPluralResourceName)
 	preferenceGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.PluralPreferenceResourceName)
 	clusterPreferenceGVR := instancetypev1beta1.SchemeGroupVersion.WithResource(instancetype.ClusterPluralPreferenceResourceName)
 
-	ws, err := groupVersionProxyBase(instancetypev1beta1.SchemeGroupVersion)
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, instancetypeGVR, &instancetypev1beta1.VirtualMachineInstancetype{}, "VirtualMachineInstancetype", &instancetypev1beta1.VirtualMachineInstancetypeList{})
 	if err != nil {
 		panic(err)
@@ -224,53 +212,31 @@ func instancetypeApiServiceDefinitions() []*restful.WebService {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(instancetypeGVR)
-	if err != nil {
-		panic(err)
-	}
-
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func poolApiServiceDefinitions() []*restful.WebService {
+func poolApiServiceDefinitions(ws *restful.WebService) *restful.WebService {
 	poolGVR := poolv1alpha1.SchemeGroupVersion.WithResource("virtualmachinepools")
 
-	ws, err := groupVersionProxyBase(poolv1alpha1.SchemeGroupVersion)
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericNamespacedResourceProxy(ws, poolGVR, &poolv1alpha1.VirtualMachinePool{}, "VirtualMachinePool", &poolv1alpha1.VirtualMachinePoolList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(poolGVR)
-	if err != nil {
-		panic(err)
-	}
-
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
-func vmCloneDefinitions() []*restful.WebService {
+func vmCloneDefinitions(ws *restful.WebService) *restful.WebService {
 	mpGVR := clonev1lpha1.SchemeGroupVersion.WithResource(clone.ResourceVMClonePlural)
 
-	ws, err := groupVersionProxyBase(schema.GroupVersion{Group: clonev1lpha1.SchemeGroupVersion.Group, Version: clonev1lpha1.SchemeGroupVersion.Version})
-	if err != nil {
-		panic(err)
-	}
-
+	var err error
 	ws, err = genericClusterResourceProxy(ws, mpGVR, &clonev1lpha1.VirtualMachineClone{}, clonev1lpha1.VirtualMachineCloneKind.Kind, &clonev1lpha1.VirtualMachineCloneList{})
 	if err != nil {
 		panic(err)
 	}
 
-	ws2, err := resourceProxyAutodiscovery(mpGVR)
-	if err != nil {
-		panic(err)
-	}
-	return []*restful.WebService{ws, ws2}
+	return ws
 }
 
 func groupVersionProxyBase(gv schema.GroupVersion) (*restful.WebService, error) {
@@ -295,25 +261,25 @@ func genericNamespacedResourceProxy(ws *restful.WebService, gvr schema.GroupVers
 	listExample := reflect.ValueOf(objListPointer).Elem().Interface()
 
 	ws.Route(addNamespaceParam(ws,
-		createOperation(ws, NamespacedResourceBasePath(gvr), objExample).
+		createOperation(ws, BaseNamespacedResourceBasePath(gvr), objExample).
 			Operation("createNamespaced"+objKind).
 			Doc("Create a "+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		replaceOperation(ws, NamespacedResourcePath(gvr), objExample).
+		replaceOperation(ws, BaseNamespacedResourcePath(gvr), objExample).
 			Operation("replaceNamespaced"+objKind).
 			Doc("Update a "+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		deleteOperation(ws, NamespacedResourcePath(gvr)).
+		deleteOperation(ws, BaseNamespacedResourcePath(gvr)).
 			Operation("deleteNamespaced"+objKind).
 			Doc("Delete a "+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		readOperation(ws, NamespacedResourcePath(gvr), objExample).
+		readOperation(ws, BaseNamespacedResourcePath(gvr), objExample).
 			Operation("readNamespaced"+objKind).
 			Doc("Get a "+objKind+obj),
 	))
@@ -325,7 +291,7 @@ func genericNamespacedResourceProxy(ws *restful.WebService, gvr schema.GroupVers
 	)
 
 	ws.Route(addNamespaceParam(ws,
-		patchOperation(ws, NamespacedResourcePath(gvr), objExample).
+		patchOperation(ws, BaseNamespacedResourcePath(gvr), objExample).
 			Operation("patchNamespaced"+objKind).
 			Doc("Patch a "+objKind+obj),
 	))
@@ -339,19 +305,19 @@ func genericNamespacedResourceProxy(ws *restful.WebService, gvr schema.GroupVers
 
 	// TODO, implement watch. For now it is here to provide swagger doc only
 	ws.Route(addNamespaceParam(ws,
-		watchOperation(ws, "/watch"+NamespacedResourceBasePath(gvr)).
+		watchOperation(ws, "/watch"+BaseNamespacedResourceBasePath(gvr)).
 			Operation("watchNamespaced"+objKind).
 			Doc(watch+objKind+obj),
 	))
 
 	ws.Route(addNamespaceParam(ws,
-		listOperation(ws, NamespacedResourceBasePath(gvr), listExample).
+		listOperation(ws, BaseNamespacedResourceBasePath(gvr), listExample).
 			Operation("listNamespaced"+objKind).
 			Doc("Get a list of "+objKind+objs),
 	))
 
 	ws.Route(
-		deleteCollectionOperation(ws, NamespacedResourceBasePath(gvr)).
+		deleteCollectionOperation(ws, BaseNamespacedResourceBasePath(gvr)).
 			Operation("deleteCollectionNamespaced" + objKind).
 			Doc("Delete a collection of " + objKind + objs),
 	)
@@ -642,10 +608,22 @@ func GroupVersionBasePath(gvr schema.GroupVersion) string {
 	return fmt.Sprintf("/apis/%s/%s", gvr.Group, gvr.Version)
 }
 
+// BaseNamespacedResourceBasePath concatenates NamespacedResourceBasePath result with group version base prefix.
+// WebService no longer uses the root path with group version, so it's necessary to set group version path here.
+func BaseNamespacedResourceBasePath(gvr schema.GroupVersionResource) string {
+	return GroupVersionBasePath(gvr.GroupVersion()) + NamespacedResourceBasePath(gvr)
+}
+
 func NamespacedResourceBasePath(gvr schema.GroupVersionResource) string {
 	return fmt.Sprintf("/namespaces/{namespace:[a-z0-9][a-z0-9\\-]*}/%s", gvr.Resource)
 }
 
+// BaseNamespacedResourcePath concatenates NamespacedResourcePath result with group version base prefix.
+// WebService no longer uses the root path with group version, so it's necessary to set group version path here.
+func BaseNamespacedResourcePath(gvr schema.GroupVersionResource) string {
+	return GroupVersionBasePath(gvr.GroupVersion()) + NamespacedResourcePath(gvr)
+}
+
 func NamespacedResourcePath(gvr schema.GroupVersionResource) string {
 	return fmt.Sprintf("/namespaces/{namespace:[a-z0-9][a-z0-9\\-]*}/%s/{name:[a-z0-9][a-z0-9\\-]*}", gvr.Resource)
 }
diff --git a/pkg/virt-controller/watch/clone/util.go b/pkg/virt-controller/watch/clone/util.go
index cb66290f7..9cce76b10 100644
--- a/pkg/virt-controller/watch/clone/util.go
+++ b/pkg/virt-controller/watch/clone/util.go
@@ -16,12 +16,13 @@ import (
 	"k8s.io/apimachinery/pkg/util/rand"
 
 	clonev1alpha1 "kubevirt.io/api/clone/v1alpha1"
+	coreapi "kubevirt.io/api/core"
 	v1 "kubevirt.io/api/core/v1"
 )
 
 const (
 	vmKind           = "VirtualMachine"
-	kubevirtApiGroup = "kubevirt.io"
+	kubevirtApiGroup = coreapi.GroupName
 )
 
 // variable so can be overridden in tests
diff --git a/pkg/virt-operator/resource/generate/components/crds.go b/pkg/virt-operator/resource/generate/components/crds.go
index 822f3d82b..23f3a96a6 100644
--- a/pkg/virt-operator/resource/generate/components/crds.go
+++ b/pkg/virt-operator/resource/generate/components/crds.go
@@ -156,9 +156,9 @@ func NewVirtualMachineInstanceCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachineinstances",
 			Singular:   "virtualmachineinstance",
 			Kind:       virtv1.VirtualMachineInstanceGroupVersionKind.Kind,
-			ShortNames: []string{"vmi", "vmis"},
+			ShortNames: []string{"xvmi", "xvmis"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -194,9 +194,9 @@ func NewVirtualMachineCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachines",
 			Singular:   "virtualmachine",
 			Kind:       virtv1.VirtualMachineGroupVersionKind.Kind,
-			ShortNames: []string{"vm", "vms"},
+			ShortNames: []string{"xvm", "xvms"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -244,9 +244,9 @@ func NewPresetCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachineinstancepresets",
 			Singular:   "virtualmachineinstancepreset",
 			Kind:       virtv1.VirtualMachineInstancePresetGroupVersionKind.Kind,
-			ShortNames: []string{"vmipreset", "vmipresets"},
+			ShortNames: []string{"xvmipreset", "xvmipresets"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -271,9 +271,9 @@ func NewReplicaSetCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachineinstancereplicasets",
 			Singular:   "virtualmachineinstancereplicaset",
 			Kind:       virtv1.VirtualMachineInstanceReplicaSetGroupVersionKind.Kind,
-			ShortNames: []string{"vmirs", "vmirss"},
+			ShortNames: []string{"xvmirs", "xvmirss"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -316,9 +316,9 @@ func NewVirtualMachineInstanceMigrationCrd() (*extv1.CustomResourceDefinition, e
 			Plural:     "virtualmachineinstancemigrations",
 			Singular:   "virtualmachineinstancemigration",
 			Kind:       virtv1.VirtualMachineInstanceMigrationGroupVersionKind.Kind,
-			ShortNames: []string{"vmim", "vmims"},
+			ShortNames: []string{"xvmim", "xvmims"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -370,9 +370,9 @@ func NewKubeVirtCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "kubevirts",
 			Singular:   "kubevirt",
 			Kind:       virtv1.KubeVirtGroupVersionKind.Kind,
-			ShortNames: []string{"kv", "kvs"},
+			ShortNames: []string{"xkv", "xkvs"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -411,9 +411,9 @@ func NewVirtualMachinePoolCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachinepools",
 			Singular:   "virtualmachinepool",
 			Kind:       "VirtualMachinePool",
-			ShortNames: []string{"vmpool", "vmpools"},
+			ShortNames: []string{"xvmpool", "xvmpools"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -463,9 +463,9 @@ func NewVirtualMachineSnapshotCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachinesnapshots",
 			Singular:   "virtualmachinesnapshot",
 			Kind:       "VirtualMachineSnapshot",
-			ShortNames: []string{"vmsnapshot", "vmsnapshots"},
+			ShortNames: []string{"xvmsnapshot", "xvmsnapshots"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -505,9 +505,9 @@ func NewVirtualMachineSnapshotContentCrd() (*extv1.CustomResourceDefinition, err
 			Plural:     "virtualmachinesnapshotcontents",
 			Singular:   "virtualmachinesnapshotcontent",
 			Kind:       "VirtualMachineSnapshotContent",
-			ShortNames: []string{"vmsnapshotcontent", "vmsnapshotcontents"},
+			ShortNames: []string{"xvmsnapshotcontent", "xvmsnapshotcontents"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -544,9 +544,9 @@ func NewVirtualMachineRestoreCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachinerestores",
 			Singular:   "virtualmachinerestore",
 			Kind:       "VirtualMachineRestore",
-			ShortNames: []string{"vmrestore", "vmrestores"},
+			ShortNames: []string{"xvmrestore", "xvmrestores"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -585,9 +585,9 @@ func NewVirtualMachineExportCrd() (*extv1.CustomResourceDefinition, error) {
 			Plural:     "virtualmachineexports",
 			Singular:   "virtualmachineexport",
 			Kind:       "VirtualMachineExport",
-			ShortNames: []string{"vmexport", "vmexports"},
+			ShortNames: []string{"xvmexport", "xvmexports"},
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
@@ -615,9 +615,9 @@ func NewVirtualMachineInstancetypeCrd() (*extv1.CustomResourceDefinition, error)
 		Names: extv1.CustomResourceDefinitionNames{
 			Plural:     instancetype.PluralResourceName,
 			Singular:   instancetype.SingularResourceName,
-			ShortNames: []string{"vminstancetype", "vminstancetypes", "vmf", "vmfs"},
+			ShortNames: []string{"xvminstancetype", "xvminstancetypes", "xvmf", "xvmfs"},
 			Kind:       "VirtualMachineInstancetype",
-			Categories: []string{"all"},
+			Categories: []string{"kubevirt"},
 		},
 		Scope: extv1.NamespaceScoped,
 		Conversion: &extv1.CustomResourceConversion{
@@ -657,7 +657,7 @@ func NewVirtualMachineClusterInstancetypeCrd() (*extv1.CustomResourceDefinition,
 		Names: extv1.CustomResourceDefinitionNames{
 			Plural:     instancetype.ClusterPluralResourceName,
 			Singular:   instancetype.ClusterSingularResourceName,
-			ShortNames: []string{"vmclusterinstancetype", "vmclusterinstancetypes", "vmcf", "vmcfs"},
+			ShortNames: []string{"xvmclusterinstancetype", "xvmclusterinstancetypes", "xvmcf", "xvmcfs"},
 			Kind:       "VirtualMachineClusterInstancetype",
 		},
 		Scope: extv1.ClusterScoped,
@@ -698,9 +698,9 @@ func NewVirtualMachinePreferenceCrd() (*extv1.CustomResourceDefinition, error) {
 		Names: extv1.CustomResourceDefinitionNames{
 			Plural:     instancetype.PluralPreferenceResourceName,
 			Singular:   instancetype.SingularPreferenceResourceName,
-			ShortNames: []string{"vmpref", "vmprefs", "vmp", "vmps"},
+			ShortNames: []string{"xvmpref", "xvmprefs", "xvmp", "xvmps"},
 			Kind:       "VirtualMachinePreference",
-			Categories: []string{"all"},
+			Categories: []string{"kubevirt"},
 		},
 		Scope: extv1.NamespaceScoped,
 		Conversion: &extv1.CustomResourceConversion{
@@ -740,7 +740,7 @@ func NewVirtualMachineClusterPreferenceCrd() (*extv1.CustomResourceDefinition, e
 		Names: extv1.CustomResourceDefinitionNames{
 			Plural:     instancetype.ClusterPluralPreferenceResourceName,
 			Singular:   instancetype.ClusterSingularPreferenceResourceName,
-			ShortNames: []string{"vmcp", "vmcps"},
+			ShortNames: []string{"xvmcp", "xvmcps"},
 			Kind:       "VirtualMachineClusterPreference",
 		},
 		Scope: extv1.ClusterScoped,
@@ -827,10 +827,10 @@ func NewVirtualMachineCloneCrd() (*extv1.CustomResourceDefinition, error) {
 		Names: extv1.CustomResourceDefinitionNames{
 			Plural:     clone.ResourceVMClonePlural,
 			Singular:   clone.ResourceVMCloneSingular,
-			ShortNames: []string{"vmclone", "vmclones"},
+			ShortNames: []string{"xvmclone", "xvmclones"},
 			Kind:       clonev1alpha1.VirtualMachineCloneKind.Kind,
 			Categories: []string{
-				"all",
+				"kubevirt",
 			},
 		},
 	}
diff --git a/pkg/virt-operator/resource/generate/rbac/apiserver.go b/pkg/virt-operator/resource/generate/rbac/apiserver.go
index 99e8fe12d..1f409c28c 100644
--- a/pkg/virt-operator/resource/generate/rbac/apiserver.go
+++ b/pkg/virt-operator/resource/generate/rbac/apiserver.go
@@ -28,14 +28,16 @@ import (
 
 	"kubevirt.io/kubevirt/pkg/virt-operator/resource/generate/components"
 
+	coreapi "kubevirt.io/api/core"
 	virtv1 "kubevirt.io/api/core/v1"
 	"kubevirt.io/api/migrations"
+	snapshotapi "kubevirt.io/api/snapshot"
 )
 
 const (
 	VersionName   = "rbac.authorization.k8s.io"
 	VersionNamev1 = "rbac.authorization.k8s.io/v1"
-	GroupName     = "kubevirt.io"
+	GroupName     = coreapi.GroupName
 )
 
 func GetAllApiServer(namespace string) []runtime.Object {
@@ -195,7 +197,7 @@ func newApiServerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"snapshot.kubevirt.io",
+					snapshotapi.GroupName,
 				},
 				Resources: []string{
 					"virtualmachinesnapshots",
@@ -208,7 +210,7 @@ func newApiServerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"cdi.kubevirt.io",
+					"x.virtualization.deckhouse.io",
 				},
 				Resources: []string{
 					"datasources",
@@ -233,7 +235,7 @@ func newApiServerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"instancetype.kubevirt.io",
+					instancetype.GroupName,
 				},
 				Resources: []string{
 					instancetype.PluralResourceName,
diff --git a/pkg/virt-operator/resource/generate/rbac/cluster.go b/pkg/virt-operator/resource/generate/rbac/cluster.go
index 1af14cb60..82659d6f8 100644
--- a/pkg/virt-operator/resource/generate/rbac/cluster.go
+++ b/pkg/virt-operator/resource/generate/rbac/cluster.go
@@ -28,15 +28,20 @@ import (
 	virtv1 "kubevirt.io/api/core/v1"
 
 	"kubevirt.io/api/migrations"
+
+	cloneapi "kubevirt.io/api/clone"
+	exportapi "kubevirt.io/api/export"
+	poolapi "kubevirt.io/api/pool"
+	snapshotapi "kubevirt.io/api/snapshot"
 )
 
 const (
 	GroupNameSubresources  = "subresources.kubevirt.io"
-	GroupNameSnapshot      = "snapshot.kubevirt.io"
-	GroupNameExport        = "export.kubevirt.io"
-	GroupNameClone         = "clone.kubevirt.io"
-	GroupNameInstancetype  = "instancetype.kubevirt.io"
-	GroupNamePool          = "pool.kubevirt.io"
+	GroupNameSnapshot      = snapshotapi.GroupName
+	GroupNameExport        = exportapi.GroupName
+	GroupNameClone         = cloneapi.GroupName
+	GroupNameInstancetype  = instancetype.GroupName
+	GroupNamePool          = poolapi.GroupName
 	NameDefault            = "kubevirt.io:default"
 	VMInstancesGuestOSInfo = "virtualmachineinstances/guestosinfo"
 	VMInstancesFileSysList = "virtualmachineinstances/filesystemlist"
diff --git a/pkg/virt-operator/resource/generate/rbac/controller.go b/pkg/virt-operator/resource/generate/rbac/controller.go
index 474ab93b0..b7a1e2a55 100644
--- a/pkg/virt-operator/resource/generate/rbac/controller.go
+++ b/pkg/virt-operator/resource/generate/rbac/controller.go
@@ -28,7 +28,11 @@ import (
 
 	"kubevirt.io/kubevirt/pkg/virt-operator/resource/generate/components"
 
+	coreapi "kubevirt.io/api/core"
+	"kubevirt.io/api/export"
 	"kubevirt.io/api/instancetype"
+	"kubevirt.io/api/pool"
+	"kubevirt.io/api/snapshot"
 
 	virtv1 "kubevirt.io/api/core/v1"
 	"kubevirt.io/api/migrations"
@@ -311,7 +315,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"snapshot.kubevirt.io",
+					snapshot.GroupName,
 				},
 				Resources: []string{
 					"*",
@@ -322,7 +326,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"export.kubevirt.io",
+					export.GroupName,
 				},
 				Resources: []string{
 					"*",
@@ -333,7 +337,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"pool.kubevirt.io",
+					pool.GroupName,
 				},
 				Resources: []string{
 					"virtualmachinepools",
@@ -354,7 +358,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"kubevirt.io",
+					coreapi.GroupName,
 				},
 				Resources: []string{
 					"*",
@@ -380,7 +384,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"cdi.kubevirt.io",
+					"x.virtualization.deckhouse.io",
 				},
 				Resources: []string{
 					"*",
@@ -468,7 +472,7 @@ func newControllerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"instancetype.kubevirt.io",
+					instancetype.GroupName,
 				},
 				Resources: []string{
 					instancetype.PluralResourceName,
diff --git a/pkg/virt-operator/resource/generate/rbac/exportproxy.go b/pkg/virt-operator/resource/generate/rbac/exportproxy.go
index 071ed91f9..bcfe70f36 100644
--- a/pkg/virt-operator/resource/generate/rbac/exportproxy.go
+++ b/pkg/virt-operator/resource/generate/rbac/exportproxy.go
@@ -24,7 +24,9 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 
+	coreapi "kubevirt.io/api/core"
 	virtv1 "kubevirt.io/api/core/v1"
+	"kubevirt.io/api/export"
 )
 
 const ExportProxyServiceAccountName = "kubevirt-exportproxy"
@@ -70,7 +72,7 @@ func newExportProxyClusterRole() *rbacv1.ClusterRole {
 		Rules: []rbacv1.PolicyRule{
 			{
 				APIGroups: []string{
-					"export.kubevirt.io",
+					export.GroupName,
 				},
 				Resources: []string{
 					"virtualmachineexports",
@@ -81,7 +83,7 @@ func newExportProxyClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"kubevirt.io",
+					coreapi.GroupName,
 				},
 				Resources: []string{
 					"kubevirts",
diff --git a/pkg/virt-operator/resource/generate/rbac/handler.go b/pkg/virt-operator/resource/generate/rbac/handler.go
index e55a4044e..a953a5929 100644
--- a/pkg/virt-operator/resource/generate/rbac/handler.go
+++ b/pkg/virt-operator/resource/generate/rbac/handler.go
@@ -25,6 +25,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 
+	coreapi "kubevirt.io/api/core"
 	virtv1 "kubevirt.io/api/core/v1"
 	"kubevirt.io/api/migrations"
 
@@ -72,7 +73,7 @@ func newHandlerClusterRole() *rbacv1.ClusterRole {
 		Rules: []rbacv1.PolicyRule{
 			{
 				APIGroups: []string{
-					"kubevirt.io",
+					coreapi.GroupName,
 				},
 				Resources: []string{
 					"virtualmachineinstances",
@@ -134,7 +135,7 @@ func newHandlerClusterRole() *rbacv1.ClusterRole {
 			},
 			{
 				APIGroups: []string{
-					"kubevirt.io",
+					coreapi.GroupName,
 				},
 				Resources: []string{
 					"kubevirts",
diff --git a/pkg/virt-operator/resource/generate/rbac/operator.go b/pkg/virt-operator/resource/generate/rbac/operator.go
index 98939edde..fd6e72c5c 100644
--- a/pkg/virt-operator/resource/generate/rbac/operator.go
+++ b/pkg/virt-operator/resource/generate/rbac/operator.go
@@ -25,6 +25,7 @@ import (
 	rbacv1 "k8s.io/api/rbac/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
+	coreapi "kubevirt.io/api/core"
 	virtv1 "kubevirt.io/api/core/v1"
 
 	"kubevirt.io/kubevirt/pkg/virt-operator/resource/generate/components"
@@ -83,7 +84,7 @@ func NewOperatorClusterRole() *rbacv1.ClusterRole {
 		Rules: []rbacv1.PolicyRule{
 			{
 				APIGroups: []string{
-					"kubevirt.io",
+					coreapi.GroupName,
 				},
 				Resources: []string{
 					"kubevirts",
diff --git a/pkg/virtctl/create/clone/clone.go b/pkg/virtctl/create/clone/clone.go
index d82de56b9..fae2a0aad 100644
--- a/pkg/virtctl/create/clone/clone.go
+++ b/pkg/virtctl/create/clone/clone.go
@@ -28,6 +28,8 @@ import (
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/util/rand"
 	clonev1alpha1 "kubevirt.io/api/clone/v1alpha1"
+	coreapi "kubevirt.io/api/core"
+	"kubevirt.io/api/snapshot"
 	"kubevirt.io/client-go/kubecli"
 
 	"kubevirt.io/kubevirt/pkg/pointer"
@@ -248,14 +250,14 @@ func (c *createClone) typeToTypedLocalObjectReference(sourceOrTargetType, source
 	switch sourceOrTargetType {
 	case "vm", "VM", "VirtualMachine", "virtualmachine":
 		kind = "VirtualMachine"
-		apiGroup = "kubevirt.io"
+		apiGroup = coreapi.GroupName
 	case "snapshot", "VirtualMachineSnapshot", "vmsnapshot", "VMSnapshot":
 		if !isSource {
 			return nil, generateErr()
 		}
 
 		kind = "VirtualMachineSnapshot"
-		apiGroup = "snapshot.kubevirt.io"
+		apiGroup = snapshot.GroupName
 	default:
 		return nil, generateErr()
 	}
diff --git a/staging/src/kubevirt.io/api/clone/register.go b/staging/src/kubevirt.io/api/clone/register.go
index 85a24c26e..faa19eed5 100644
--- a/staging/src/kubevirt.io/api/clone/register.go
+++ b/staging/src/kubevirt.io/api/clone/register.go
@@ -21,7 +21,7 @@ package clone
 
 // GroupName is the group name used in this package
 const (
-	GroupName     = "clone.kubevirt.io"
+	GroupName     = "x.virtualization.deckhouse.io"
 	LatestVersion = "v1alpha1"
 	Kind          = "VirtualMachineClone"
 	ListKind      = "VirtualMachineCloneList"
diff --git a/staging/src/kubevirt.io/api/core/register.go b/staging/src/kubevirt.io/api/core/register.go
index 22080c717..56b23f7d7 100644
--- a/staging/src/kubevirt.io/api/core/register.go
+++ b/staging/src/kubevirt.io/api/core/register.go
@@ -1,4 +1,4 @@
 package core
 
 // GroupName is the group name use in this package
-const GroupName = "kubevirt.io"
+const GroupName = "x.virtualization.deckhouse.io"
diff --git a/staging/src/kubevirt.io/api/export/register.go b/staging/src/kubevirt.io/api/export/register.go
index 844dbf5e0..82f95d730 100644
--- a/staging/src/kubevirt.io/api/export/register.go
+++ b/staging/src/kubevirt.io/api/export/register.go
@@ -21,5 +21,5 @@ package export
 
 // GroupName is the group name used in this package
 const (
-	GroupName = "export.kubevirt.io"
+	GroupName = "x.virtualization.deckhouse.io"
 )
diff --git a/staging/src/kubevirt.io/api/instancetype/register.go b/staging/src/kubevirt.io/api/instancetype/register.go
index d4eafd31f..cffbb27f5 100644
--- a/staging/src/kubevirt.io/api/instancetype/register.go
+++ b/staging/src/kubevirt.io/api/instancetype/register.go
@@ -21,7 +21,7 @@ package instancetype
 
 // GroupName is the group name used in this package
 const (
-	GroupName = "instancetype.kubevirt.io"
+	GroupName = "x.virtualization.deckhouse.io"
 
 	SingularResourceName = "virtualmachineinstancetype"
 	PluralResourceName   = SingularResourceName + "s"
diff --git a/staging/src/kubevirt.io/api/migrations/register.go b/staging/src/kubevirt.io/api/migrations/register.go
index dbb6d3c41..03d40a9c2 100644
--- a/staging/src/kubevirt.io/api/migrations/register.go
+++ b/staging/src/kubevirt.io/api/migrations/register.go
@@ -21,7 +21,7 @@ package migrations
 
 // GroupName is the group name used in this package
 const (
-	GroupName = "migrations.kubevirt.io"
+	GroupName = "x.virtualization.deckhouse.io"
 	Version   = "v1alpha1"
 
 	ResourceMigrationPolicies = "migrationpolicies"
diff --git a/staging/src/kubevirt.io/api/pool/register.go b/staging/src/kubevirt.io/api/pool/register.go
index 08b9d8c62..9f45555b2 100644
--- a/staging/src/kubevirt.io/api/pool/register.go
+++ b/staging/src/kubevirt.io/api/pool/register.go
@@ -21,5 +21,5 @@ package pool
 
 // GroupName is the group name used in this package
 const (
-	GroupName = "pool.kubevirt.io"
+	GroupName = "x.virtualization.deckhouse.io"
 )
diff --git a/staging/src/kubevirt.io/api/snapshot/register.go b/staging/src/kubevirt.io/api/snapshot/register.go
index 880a59292..4a1216cb8 100644
--- a/staging/src/kubevirt.io/api/snapshot/register.go
+++ b/staging/src/kubevirt.io/api/snapshot/register.go
@@ -21,5 +21,5 @@ package snapshot
 
 // GroupName is the group name used in this package
 const (
-	GroupName = "snapshot.kubevirt.io"
+	GroupName = "x.virtualization.deckhouse.io"
 )
diff --git a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go
index 3ac7803dd..66a3c3a43 100644
--- a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go
+++ b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/scheme/register.go
@@ -31,10 +31,6 @@ import (
 var Scheme = runtime.NewScheme()
 var Codecs = serializer.NewCodecFactory(Scheme)
 var ParameterCodec = runtime.NewParameterCodec(Scheme)
-var localSchemeBuilder = runtime.SchemeBuilder{
-	cdiv1beta1.AddToScheme,
-	uploadv1beta1.AddToScheme,
-}
 
 // AddToScheme adds all types of this clientset into the given scheme. This allows composition
 // of clientsets, like in:
@@ -50,9 +46,44 @@ var localSchemeBuilder = runtime.SchemeBuilder{
 //
 // After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
 // correctly.
-var AddToScheme = localSchemeBuilder.AddToScheme
+var AddToScheme func(scheme *runtime.Scheme) error
 
 func init() {
+	cdiv1beta1.SchemeGroupVersion.Group = "x.virtualization.deckhouse.io"
+	cdiv1beta1.CDIGroupVersionKind.Group = "x.virtualization.deckhouse.io"
+	cdiv1beta1.SchemeBuilder = runtime.NewSchemeBuilder(func(scheme *runtime.Scheme) error {
+		scheme.AddKnownTypes(cdiv1beta1.SchemeGroupVersion,
+			&cdiv1beta1.DataVolume{},
+			&cdiv1beta1.DataVolumeList{},
+			&cdiv1beta1.CDIConfig{},
+			&cdiv1beta1.CDIConfigList{},
+			&cdiv1beta1.CDI{},
+			&cdiv1beta1.CDIList{},
+			&cdiv1beta1.StorageProfile{},
+			&cdiv1beta1.StorageProfileList{},
+			&cdiv1beta1.DataSource{},
+			&cdiv1beta1.DataSourceList{},
+			&cdiv1beta1.DataImportCron{},
+			&cdiv1beta1.DataImportCronList{},
+			&cdiv1beta1.ObjectTransfer{},
+			&cdiv1beta1.ObjectTransferList{},
+			&cdiv1beta1.VolumeImportSource{},
+			&cdiv1beta1.VolumeImportSourceList{},
+			&cdiv1beta1.VolumeUploadSource{},
+			&cdiv1beta1.VolumeUploadSourceList{},
+			&cdiv1beta1.VolumeCloneSource{},
+			&cdiv1beta1.VolumeCloneSourceList{},
+		)
+		v1.AddToGroupVersion(scheme, cdiv1beta1.SchemeGroupVersion)
+		return nil
+	})
+	cdiv1beta1.AddToScheme = cdiv1beta1.SchemeBuilder.AddToScheme
+
+	AddToScheme = (&runtime.SchemeBuilder{
+		cdiv1beta1.AddToScheme,
+		uploadv1beta1.AddToScheme,
+	}).AddToScheme
+
 	v1.AddToGroupVersion(Scheme, schema.GroupVersion{Version: "v1"})
 	utilruntime.Must(AddToScheme(Scheme))
 }
diff --git a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go
index 2fd57771a..03660be5c 100644
--- a/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go
+++ b/staging/src/kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned/typed/core/v1beta1/core_client.go
@@ -113,6 +113,7 @@ func New(c rest.Interface) *CdiV1beta1Client {
 
 func setConfigDefaults(config *rest.Config) error {
 	gv := v1beta1.SchemeGroupVersion
+	gv.Group = "x.virtualization.deckhouse.io"
 	config.GroupVersion = &gv
 	config.APIPath = "/apis"
 	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()
