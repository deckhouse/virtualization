diff --git a/pkg/virt-controller/services/rendervolumes.go b/pkg/virt-controller/services/rendervolumes.go
index de90ed3cbc..2941b0b8c9 100644
--- a/pkg/virt-controller/services/rendervolumes.go
+++ b/pkg/virt-controller/services/rendervolumes.go
@@ -52,6 +52,12 @@ func NewVolumeRenderer(namespace string, ephemeralDisk string, containerDiskDir
 
 func (vr *VolumeRenderer) Mounts() []k8sv1.VolumeMount {
 	volumeMounts := []k8sv1.VolumeMount{
+		mountPath(varRunVolumeName, varRun),
+		mountPath(varLogVolumeName, varLog),
+		mountPath(etcLibvirtVolumeName, etcLibvirt),
+		mountPath(varLibLibvirtVolumeName, varLibLibvirt),
+		mountPath(varCacheLibvirtVolumeName, varCacheLibvirt),
+		mountPath(tmpVolumeName, tmp),
 		mountPath("private", util.VirtPrivateDir),
 		mountPath("public", util.VirtShareDir),
 		mountPath("ephemeral-disks", vr.ephemeralDiskDir),
@@ -64,6 +70,12 @@ func (vr *VolumeRenderer) Mounts() []k8sv1.VolumeMount {
 
 func (vr *VolumeRenderer) Volumes() []k8sv1.Volume {
 	volumes := []k8sv1.Volume{
+		emptyDirVolume(varRunVolumeName),
+		emptyDirVolume(varLogVolumeName),
+		emptyDirVolume(etcLibvirtVolumeName),
+		emptyDirVolume(varLibLibvirtVolumeName),
+		emptyDirVolume(varCacheLibvirtVolumeName),
+		emptyDirVolume(tmpVolumeName),
 		emptyDirVolume("private"),
 		emptyDirVolume("public"),
 		emptyDirVolume("sockets"),
diff --git a/pkg/virt-controller/services/rendervolumes_test.go b/pkg/virt-controller/services/rendervolumes_test.go
index e112967eec..ecb929829c 100644
--- a/pkg/virt-controller/services/rendervolumes_test.go
+++ b/pkg/virt-controller/services/rendervolumes_test.go
@@ -342,6 +342,30 @@ func vmiDiskPath(volumeName string) string {
 
 func defaultVolumes() []k8sv1.Volume {
 	return []k8sv1.Volume{
+		{
+			Name:         varRunVolumeName,
+			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
+		},
+		{
+			Name:         varLogVolumeName,
+			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
+		},
+		{
+			Name:         etcLibvirtVolumeName,
+			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
+		},
+		{
+			Name:         varLibLibvirtVolumeName,
+			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
+		},
+		{
+			Name:         varCacheLibvirtVolumeName,
+			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
+		},
+		{
+			Name:         tmpVolumeName,
+			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
+		},
 		{
 			Name:         "private",
 			VolumeSource: k8sv1.VolumeSource{EmptyDir: &k8sv1.EmptyDirVolumeSource{}},
@@ -371,6 +395,12 @@ func defaultVolumeMounts() []k8sv1.VolumeMount {
 	hostToContainerPropagation := k8sv1.MountPropagationHostToContainer
 
 	return []k8sv1.VolumeMount{
+		{Name: varRunVolumeName, MountPath: varRun},
+		{Name: varLogVolumeName, MountPath: varLog},
+		{Name: etcLibvirtVolumeName, MountPath: etcLibvirt},
+		{Name: varLibLibvirtVolumeName, MountPath: varLibLibvirt},
+		{Name: varCacheLibvirtVolumeName, MountPath: varCacheLibvirt},
+		{Name: tmpVolumeName, MountPath: tmp},
 		{Name: "private", MountPath: "/var/run/kubevirt-private"},
 		{Name: "public", MountPath: "/var/run/kubevirt"},
 		{Name: "ephemeral-disks", MountPath: "disk1"},
diff --git a/pkg/virt-controller/services/template.go b/pkg/virt-controller/services/template.go
index f607c24786..48906f2dd1 100644
--- a/pkg/virt-controller/services/template.go
+++ b/pkg/virt-controller/services/template.go
@@ -64,15 +64,26 @@ import (
 )
 
 const (
-	containerDisks        = "container-disks"
-	hotplugDisks          = "hotplug-disks"
-	hookSidecarSocks      = "hook-sidecar-sockets"
-	varRun                = "/var/run"
-	virtBinDir            = "virt-bin-share-dir"
-	hotplugDisk           = "hotplug-disk"
-	virtExporter          = "virt-exporter"
-	hotplugContainerDisks = "hotplug-container-disks"
-	HotplugContainerDisk  = "hotplug-container-disk-"
+	containerDisks            = "container-disks"
+	hotplugDisks              = "hotplug-disks"
+	hookSidecarSocks          = "hook-sidecar-sockets"
+	varRun                    = "/var/run"
+	virtBinDir                = "virt-bin-share-dir"
+	hotplugDisk               = "hotplug-disk"
+	virtExporter              = "virt-exporter"
+	hotplugContainerDisks     = "hotplug-container-disks"
+	HotplugContainerDisk      = "hotplug-container-disk-"
+	varLog                    = "/var/log"
+	etcLibvirt                = "/etc/libvirt"
+	varLibLibvirt             = "/var/lib/libvirt/"
+	varCacheLibvirt           = "/var/cache/libvirt"
+	tmp                       = "/tmp"
+	varLogVolumeName          = "var-log"
+	etcLibvirtVolumeName      = "etc-libvirt"
+	varLibLibvirtVolumeName   = "var-lib-libvirt"
+	varCacheLibvirtVolumeName = "var-cache-libvirt"
+	varRunVolumeName          = "var-run"
+	tmpVolumeName             = "tmp"
 )
 
 const KvmDevice = "devices.virtualization.deckhouse.io/kvm"
@@ -301,7 +312,6 @@ func generateQemuTimeoutWithJitter(qemuTimeoutBaseSeconds int) string {
 
 func computePodSecurityContext(vmi *v1.VirtualMachineInstance, seccomp *k8sv1.SeccompProfile) *k8sv1.PodSecurityContext {
 	psc := &k8sv1.PodSecurityContext{}
-
 	if util.IsNonRootVMI(vmi) {
 		nonRootUser := int64(util.NonRootUID)
 		psc.RunAsUser = &nonRootUser
@@ -573,6 +583,21 @@ func (t *templateService) renderLaunchManifest(vmi *v1.VirtualMachineInstance, i
 		}
 
 	}
+	initContainers = append(initContainers, t.newEtcLibvirtCopierInitContainer(vmi, userId))
+
+	// Set ReadOnlyRootFilesystem
+	setReadOnlyRootFilesystem := func(ctrs []k8sv1.Container) {
+		for i := range ctrs {
+			ctr := &ctrs[i]
+			if ctr.SecurityContext == nil {
+				ctr.SecurityContext = &k8sv1.SecurityContext{}
+			}
+			ctr.SecurityContext.ReadOnlyRootFilesystem = pointer.Bool(true)
+		}
+	}
+	setReadOnlyRootFilesystem(initContainers)
+	setReadOnlyRootFilesystem(containers)
+
 	pod := k8sv1.Pod{
 		ObjectMeta: metav1.ObjectMeta{
 			GenerateName: "virt-launcher-" + domain + "-",
@@ -639,6 +664,40 @@ func (t *templateService) renderLaunchManifest(vmi *v1.VirtualMachineInstance, i
 	return &pod, nil
 }
 
+func (t *templateService) newEtcLibvirtCopierInitContainer(vmi *v1.VirtualMachineInstance, userID int64) k8sv1.Container {
+	const (
+		initPath      = "/init"
+		containerName = etcLibvirtVolumeName + "-init"
+	)
+	command := []string{"sh", "-c", fmt.Sprintf("cp -a %s/. %s", etcLibvirt, initPath+"/")}
+
+	cpInitContainerOpts := []Option{
+		WithVolumeMounts(k8sv1.VolumeMount{
+			Name:      etcLibvirtVolumeName,
+			MountPath: initPath,
+		}),
+		WithResourceRequirements(k8sv1.ResourceRequirements{
+			Requests: k8sv1.ResourceList{
+				k8sv1.ResourceCPU:    resource.MustParse("10m"),
+				k8sv1.ResourceMemory: resource.MustParse("1M"),
+			},
+			Limits: k8sv1.ResourceList{
+				k8sv1.ResourceCPU:    resource.MustParse("100m"),
+				k8sv1.ResourceMemory: resource.MustParse("40M"),
+			},
+		}),
+		WithNoCapabilities(),
+	}
+	if util.IsNonRootVMI(vmi) {
+		cpInitContainerOpts = append(cpInitContainerOpts, WithNonRoot(userID))
+	}
+	if t.IsPPC64() {
+		cpInitContainerOpts = append(cpInitContainerOpts, WithPrivileged())
+	}
+
+	return NewContainerSpecRenderer(containerName, t.launcherImage, t.clusterConfig.GetImagePullPolicy(), cpInitContainerOpts...).Render(command)
+}
+
 func (t *templateService) newNodeSelectorRenderer(vmi *v1.VirtualMachineInstance) *NodeSelectorRenderer {
 	var opts []NodeSelectorRendererOption
 	if vmi.IsCPUDedicated() {
diff --git a/pkg/virt-controller/services/template_test.go b/pkg/virt-controller/services/template_test.go
index c6a7f66a54..99376b4752 100644
--- a/pkg/virt-controller/services/template_test.go
+++ b/pkg/virt-controller/services/template_test.go
@@ -458,7 +458,7 @@ var _ = Describe("Template", func() {
 				Expect(pod.Spec.Containers[1].Image).To(Equal("some-image:v1"))
 				Expect(pod.Spec.Containers[1].ImagePullPolicy).To(Equal(k8sv1.PullPolicy("IfNotPresent")))
 				Expect(*pod.Spec.TerminationGracePeriodSeconds).To(Equal(int64(60)))
-				Expect(pod.Spec.InitContainers).To(BeEmpty())
+				Expect(pod.Spec.InitContainers).To(HaveLen(1))
 				By("setting the right hostname")
 				Expect(pod.Spec.Hostname).To(Equal("testvmi"))
 				Expect(pod.Spec.Subdomain).To(BeEmpty())
@@ -933,7 +933,7 @@ var _ = Describe("Template", func() {
 				pod, err := svc.RenderLaunchManifest(&vmi)
 				Expect(err).ToNot(HaveOccurred())
 
-				Expect(pod.Spec.InitContainers).To(HaveLen(3))
+				Expect(pod.Spec.InitContainers).To(HaveLen(4))
 				Expect(pod.Spec.InitContainers[0].VolumeMounts[0].MountPath).To(Equal("/init/usr/bin"))
 				Expect(pod.Spec.InitContainers[0].VolumeMounts[0].Name).To(Equal("virt-bin-share-dir"))
 				Expect(pod.Spec.InitContainers[0].Command).To(Equal([]string{"/usr/bin/cp",
@@ -2314,7 +2314,7 @@ var _ = Describe("Template", func() {
 				Expect(hugepagesRequest.ToDec().ScaledValue(resource.Mega)).To(Equal(int64(64)))
 				Expect(hugepagesLimit.ToDec().ScaledValue(resource.Mega)).To(Equal(int64(64)))
 
-				Expect(pod.Spec.Volumes).To(HaveLen(9))
+				Expect(pod.Spec.Volumes).To(HaveLen(15))
 				Expect(pod.Spec.Volumes).To(
 					ContainElements(
 						k8sv1.Volume{
@@ -2329,7 +2329,7 @@ var _ = Describe("Template", func() {
 								EmptyDir: &k8sv1.EmptyDirVolumeSource{},
 							}}))
 
-				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(8))
+				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(14))
 				Expect(pod.Spec.Containers[0].VolumeMounts).To(
 					ContainElements(
 						k8sv1.VolumeMount{
@@ -2393,7 +2393,7 @@ var _ = Describe("Template", func() {
 				Expect(hugepagesRequest.ToDec().ScaledValue(resource.Mega)).To(Equal(int64(64)))
 				Expect(hugepagesLimit.ToDec().ScaledValue(resource.Mega)).To(Equal(int64(64)))
 
-				Expect(pod.Spec.Volumes).To(HaveLen(9))
+				Expect(pod.Spec.Volumes).To(HaveLen(15))
 				Expect(pod.Spec.Volumes).To(
 					ContainElements(
 						k8sv1.Volume{
@@ -2408,7 +2408,7 @@ var _ = Describe("Template", func() {
 								EmptyDir: &k8sv1.EmptyDirVolumeSource{},
 							}}))
 
-				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(8))
+				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(14))
 				Expect(pod.Spec.Containers[0].VolumeMounts).To(
 					ContainElements(
 						k8sv1.VolumeMount{
@@ -2463,11 +2463,11 @@ var _ = Describe("Template", func() {
 				Expect(pod.Spec.Containers[0].VolumeDevices).To(BeEmpty(), "No devices in manifest for 1st container")
 
 				Expect(pod.Spec.Containers[0].VolumeMounts).ToNot(BeEmpty(), "Some mounts in manifest for 1st container")
-				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(7), "7 mounts in manifest for 1st container")
-				Expect(pod.Spec.Containers[0].VolumeMounts[6].Name).To(Equal(volumeName), "1st mount in manifest for 1st container has correct name")
+				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(13), "13 mounts in manifest for 1st container")
+				Expect(pod.Spec.Containers[0].VolumeMounts[12].Name).To(Equal(volumeName), "1st mount in manifest for 1st container has correct name")
 
 				Expect(pod.Spec.Volumes).ToNot(BeEmpty(), "Found some volumes in manifest")
-				Expect(pod.Spec.Volumes).To(HaveLen(8), "Found 8 volumes in manifest")
+				Expect(pod.Spec.Volumes).To(HaveLen(14), "Found 14 volumes in manifest")
 				Expect(pod.Spec.Volumes).To(
 					ContainElement(
 						k8sv1.Volume{
@@ -2535,10 +2535,10 @@ var _ = Describe("Template", func() {
 				Expect(pod.Spec.Containers[0].VolumeDevices[1].Name).To(Equal(ephemeralVolumeName), "Found device for 1st container with correct name")
 
 				Expect(pod.Spec.Containers[0].VolumeMounts).ToNot(BeEmpty(), "Found some mounts in manifest for 1st container")
-				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(6), "Found 6 mounts in manifest for 1st container")
+				Expect(pod.Spec.Containers[0].VolumeMounts).To(HaveLen(12), "Found 11 mounts in manifest for 1st container")
 
 				Expect(pod.Spec.Volumes).ToNot(BeEmpty(), "Found some volumes in manifest")
-				Expect(pod.Spec.Volumes).To(HaveLen(9), "Found 9 volumes in manifest")
+				Expect(pod.Spec.Volumes).To(HaveLen(15), "Found 14 volumes in manifest")
 				Expect(pod.Spec.Volumes).To(
 					ContainElement(
 						k8sv1.Volume{
@@ -3048,7 +3048,7 @@ var _ = Describe("Template", func() {
 				pod, err := svc.RenderLaunchManifest(vmi)
 				Expect(err).ToNot(HaveOccurred())
 				Expect(pod.Spec.Volumes).ToNot(BeEmpty())
-				Expect(pod.Spec.Volumes).To(HaveLen(8))
+				Expect(pod.Spec.Volumes).To(HaveLen(14))
 
 				oneMB := resource.MustParse("1Mi")
 				Expect(pod.Spec.Volumes).To(ContainElement(
@@ -3062,7 +3062,7 @@ var _ = Describe("Template", func() {
 						},
 					}))
 
-				Expect(pod.Spec.Containers[0].VolumeMounts[6].MountPath).To(Equal(k6tconfig.DownwardMetricDisksDir))
+				Expect(pod.Spec.Containers[0].VolumeMounts[12].MountPath).To(Equal(k6tconfig.DownwardMetricDisksDir))
 			})
 
 			It("Should add 1Mi memory overhead", func() {
@@ -3116,7 +3116,7 @@ var _ = Describe("Template", func() {
 				Expect(err).ToNot(HaveOccurred())
 
 				Expect(pod.Spec.Volumes).ToNot(BeEmpty())
-				Expect(pod.Spec.Volumes).To(HaveLen(8))
+				Expect(pod.Spec.Volumes).To(HaveLen(14))
 				Expect(pod.Spec.Volumes).To(ContainElement(k8sv1.Volume{
 					Name: "configmap-volume",
 					VolumeSource: k8sv1.VolumeSource{
@@ -3155,7 +3155,7 @@ var _ = Describe("Template", func() {
 					Expect(err).ToNot(HaveOccurred())
 
 					Expect(pod.Spec.Volumes).ToNot(BeEmpty())
-					Expect(pod.Spec.Volumes).To(HaveLen(9))
+					Expect(pod.Spec.Volumes).To(HaveLen(15))
 					Expect(pod.Spec.Volumes).To(ContainElement(k8sv1.Volume{
 						Name: "sysprep-configmap-volume",
 						VolumeSource: k8sv1.VolumeSource{
@@ -3192,7 +3192,7 @@ var _ = Describe("Template", func() {
 					Expect(err).ToNot(HaveOccurred())
 
 					Expect(pod.Spec.Volumes).ToNot(BeEmpty())
-					Expect(pod.Spec.Volumes).To(HaveLen(9))
+					Expect(pod.Spec.Volumes).To(HaveLen(15))
 
 					Expect(pod.Spec.Volumes).To(ContainElement(k8sv1.Volume{
 						Name: "sysprep-configmap-volume",
@@ -3234,7 +3234,7 @@ var _ = Describe("Template", func() {
 				Expect(err).ToNot(HaveOccurred())
 
 				Expect(pod.Spec.Volumes).ToNot(BeEmpty())
-				Expect(pod.Spec.Volumes).To(HaveLen(8))
+				Expect(pod.Spec.Volumes).To(HaveLen(14))
 
 				Expect(pod.Spec.Volumes).To(ContainElement(k8sv1.Volume{
 					Name: "secret-volume",
