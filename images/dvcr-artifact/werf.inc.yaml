---
{{- $nameDeps := print $.ImageName "-dependencies" -}}
{{- define "$nameDeps" -}}
altPackages:
- gcc
- git golang make binutils
packages:
- libnbd
- libxml2
- glibc
{{- end -}}

{{ $builderDeps := include "$nameDeps" . | fromYaml }}

image: {{ .ModuleNamePrefix }}{{ .ImageName }}-builder
final: false
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/alt" "builder/alt-go-svace" }}
git:
- add: {{ .ModuleDir }}/images/{{ .ImageName }}
  to: /src
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
import:
{{- include "importPackageImages" (list . $builderDeps.packages "install") -}}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - |
    apt-get -qq install -y \
      {{ $builderDeps.altPackages | join " " }}
  {{- include "alt packages clean" . | nindent 2 }}
  install:
  - |
    # Install packages
    PKGS="{{ $builderDeps.packages | join " " }}"
    for pkg in $PKGS; do
      cp -a /$pkg/. /
      rm -rf /$pkg
    done
  - cd /src
  - export GOPROXY=$(cat /run/secrets/GOPROXY)
  - go mod download
  setup:
  - mkdir /out
  - cd /src
  - |
    export GO111MODULE=on
    export GOOS=linux
    export CGO_ENABLED=1
    export GOARCH=amd64
  - |
    {{- $_ := set $ "ProjectName" (list $.ImageName "dvcr-importer" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /out/dvcr-importer ./cmd/dvcr-importer`) | nindent 6 }}
    {{- $_ := set $ "ProjectName" (list $.ImageName "dvcr-uploader" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /out/dvcr-uploader ./cmd/dvcr-uploader`) | nindent 6 }}
  - |
    export CGO_ENABLED=0
    {{- $_ := set $ "ProjectName" (list $.ImageName "dvcr-cleaner" | join "/") }}
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /out/dvcr-cleaner ./cmd/dvcr-cleaner`) | nindent 6 }}
  - chown -R 64535:64535 /out

---
{{- $name := print $.ImageName "-dependencies" -}}
{{- define "$name" -}}
binaries:
- /usr/local/bin/dvcr-importer
- /usr/sbin/nbd*
- /usr/lib64/nbdkit/filters/*.so
- /usr/lib64/nbdkit/plugins/*.so
- /usr/bin/file
- /usr/share/misc/magic.mgc
- /usr/local/bin/dvcr-uploader
- /usr/local/bin/dvcr-cleaner
- /usr/bin/qemu-img
- /usr/bin/qemu-nbd
- /usr/lib64/libnbd.s*
# do not include glibc, it will be replaced by one from qemu-img
packages:
- bzip2 file nbdkit libnbd xz libxml2
- libseccomp zlib zstd
- libffi libgmp gnutls nettle libidn2
- p11-kit libtasn1 
{{- end -}}

{{ $builderDependencies := include "$name" . | fromYaml }}

image: {{ .ModuleNamePrefix }}{{ .ImageName }}-bins
final: false
fromImage: {{ .ModuleNamePrefix }}base-alt-p11-binaries
import:
- image: tools/util-linux
  add: /
  to: /relocate/usr
  after: setup
  includePaths:
  - bin/mount
  - bin/umount
- image: {{ .ModuleNamePrefix }}{{ .ImageName }}-builder
  add: /out
  to: /usr/local/bin
  before: setup
{{- include "importPackageImages" (list . $builderDependencies.packages "install") -}}
- image: {{ .ModuleNamePrefix }}qemu
  add: /qemu-img
  to: /qemu-img
  before: install
shell:
  install:
  - |
    # Install packages
    PKGS="{{ $builderDependencies.packages | join " " }}"
    PKGS+=" qemu-img"
    for pkg in $PKGS; do
      cp -a /$pkg/. /
      rm -rf /$pkg
    done

  setup:
  - |
    /relocate_binaries.sh -i "{{ $builderDependencies.binaries | join " " }}" -o /relocate
