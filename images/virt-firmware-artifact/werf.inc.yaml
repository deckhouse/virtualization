---
{{- $versionEdk2 := "stable202411" }}
{{- $gitRepoUrl := "https://github.com/tianocore/edk2.git" }}
{{- $gitRepoName := "edk2" }}

image: {{ $.ImageName }}
final: false
fromImage: base-alt-p11
git:
- add: /images/{{ $.ImageName }}/
  to: /
  includePaths:
  - build.sh
  stageDependencies:
    setup:
      - build.sh
shell:
  beforeInstall:
  - | 
    apt-get update && apt-get install -y \
    gcc gcc-c++ \
    git \
    bash-completion \
    clang \
    ccache \
    make cmake \
    python3 python3-dev \
    python3-tools python3-module-setuptools \
    python3-module-pip \
    nasm acpica libssl-devel libdwarf-devel libuuid-devel bison flex wget \
    dosfstools mtools genisoimage binutils-devel \
    qemu-kvm-core \
    iasl \
    python3-modules-sqlite3 python3-module-virt-firmware libuuid-devel \
    qemu-img xorriso libssl-devel \
    bc zlib-devel perl-PathTools perl-IPC-Cmd perl-JSON

    apt-get clean
    rm --recursive --force /var/lib/apt/lists/ftp.altlinux.org* /var/cache/apt/*.bin

  install:
  - |
    git clone --depth=1 --branch {{ $gitRepoName }}-{{ $versionEdk2 }} {{ $gitRepoUrl }} {{ $gitRepoName }}-{{ $versionEdk2 }}
    
    git clone https://github.com/tianocore/edk2-platforms.git
    git clone https://github.com/tianocore/edk2-staging.git

    cd {{ $gitRepoName }}-{{ $versionEdk2 }}
    git submodule update --init --recursive

    # Set env edk
    export EDK_TOOLS_PATH=$(pwd)/BaseTools
    export PACKAGES_PATH=$(pwd)/BaseTools:/edk2-platforms:/edk2-staging

    echo "Building BaseTools..."
    ln /usr/bin/python3 /usr/bin/python
    make -C BaseTools -j$(nproc)
    
    # Set up the build environment
    echo "Setting up the build environment..."
    . edksetup.sh BaseTools

    mkdir -p /FIRMWARE
{{/*

    # #==========
    # # Create a clean Build directory
    # rm -rf Build/*

    # # Build OVMF_CODE.fd and OVMF_VARS.fd (Standard OVMF)
    # build -a X64 -t GCC5 -p OvmfPkg/OvmfPkgX64.dsc -b RELEASE
    # cp Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd /FIRMWARE/OVMF_CODE.fd
    # cp Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd /FIRMWARE/OVMF_VARS.fd

    # # Clean Build directory
    # rm -rf Build/*

    # # Build OVMF_CODE.secboot.fd and OVMF_VARS.secboot.fd (Secure Boot enabled)
    # build -a X64 -t GCC5 -p OvmfPkg/OvmfPkgX64.dsc -b RELEASE -D SECURE_BOOT_ENABLE
    # cp Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd /FIRMWARE/OVMF_CODE.secboot.fd
    # cp Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd /FIRMWARE/OVMF_VARS.secboot.fd

    # # Clean Build directory
    # rm -rf Build/*

    # # Build OVMF_CODE.cc.fd (Confidential Computing)
    # build -a X64 -t GCC5 -p OvmfPkg/OvmfQemuCc.dsc -b RELEASE
    # cp Build/OvmfQemuCc/RELEASE_GCC5/FV/OVMF_CODE.fd /FIRMWARE/OVMF_CODE.cc.fd

    # # Clean Build directory
    # rm -rf Build/*

    # # Build OVMF.amdsev.fd (AMD SEV)
    # build -a X64 -t GCC5 -p OvmfPkg/OvmfPkgX64.dsc -b RELEASE -D AMD_SEV=TRUE
    # cp Build/OvmfX64/RELEASE_GCC5/FV/OVMF.fd /FIRMWARE/OVMF.amdsev.fd

    # # Clean Build directory
    # rm -rf Build/*

    # # Build OVMF.inteltdx.fd (Intel TDX)
    # build -a X64 -t GCC5 -p OvmfPkg/OvmfQemuTdx.dsc -b RELEASE
    # cp Build/OvmfQemuTdx/RELEASE_GCC5/FV/OVMF.fd /FIRMWARE/OVMF.inteltdx.fd

    # # Clean Build directory
    # rm -rf Build/*

    # # Build OVMF.inteltdx.secboot.fd (Intel TDX with Secure Boot)
    # build -a X64 -t GCC5 -p OvmfPkg/OvmfQemuTdx.dsc -b RELEASE -D SECURE_BOOT_ENABLE
    # cp Build/OvmfQemuTdx/RELEASE_GCC5/FV/OVMF.fd /FIRMWARE/OVMF.inteltdx.secboot.fd
    # #==========

    # # source edksetup.sh

    # # Build the firmware
    # echo "Building the firmware..."
    # build --cmd-len=65536 -p OvmfPkg/OvmfPkgX64.dsc -a X64 -b RELEASE -t GCC5

    # # Create the FIRMWARE directory if it doesn't exist
    # mkdir -p /FIRMWARE

    # # Copy the built firmware to the FIRMWARE directory
    # echo "Copying firmware to FIRMWARE directory..."
    # cp -v Build/OvmfX64/RELEASE_GCC5/FV/OVMF.fd /FIRMWARE/

    # echo "Build completed successfully. Firmware is located in the FIRMWARE directory."
*/}}
  setup:
  - |
    /build.sh

    ls -lah /FIRMWARE
