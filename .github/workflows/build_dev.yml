name: Build and push for dev

env:
  MODULES_REGISTRY: ${{ vars.DEV_REGISTRY }}
  CI_COMMIT_REF_NAME: ${{ github.ref_name }}
  MODULES_MODULE_NAME: ${{ vars.MODULE_NAME }}
  MODULES_MODULE_SOURCE: ${{ vars.DEV_MODULE_SOURCE }}
  MODULES_REGISTRY_LOGIN: ${{ vars.DEV_MODULES_REGISTRY_LOGIN }}
  MODULES_REGISTRY_PASSWORD: ${{ secrets.DEV_MODULES_REGISTRY_PASSWORD }}

on:
  pull_request:
    types: [ opened, edited, synchronize ]
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  show_dev_manifest:
    runs-on: ubuntu-latest
    name: Show manifest
    steps:
      - name: Set vars for PR
        if: ${{ github.ref_name != 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo pr${{github.event.pull_request.number}})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Set vars for main
        if: ${{ github.ref_name == 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo v0.0.0-${{ github.ref_name }})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Show dev config
        run: |
          cat << OUTER
          Create ModuleConfig and ModulePullOverride resources to test this MR:
          cat <<EOF | kubectl apply -f -
          ---
          apiVersion: deckhouse.io/v1alpha1
          kind: ModulePullOverride
          metadata:
            name: ${MODULES_MODULE_NAME}
          spec:
            imageTag: ${MODULES_MODULE_TAG}
            source: deckhouse

          ---
          apiVersion: deckhouse.io/v1alpha1
          kind: ModuleConfig
          metadata:
            name: ${MODULES_MODULE_NAME}
          spec:
            enabled: true
            settings:
              dvcr:
                storage:
                  type: PersistentVolumeClaim
                  persistentVolumeClaim:
                    size: 50G
              virtualMachineCIDRs:
                - 10.66.10.0/24
                - 10.66.20.0/24
                - 10.66.30.0/24
            version: 1
          EOF

          Or patch an existing ModulePullOverride:

          kubectl patch mpo ${MODULES_MODULE_NAME} --type merge -p '{"spec":{"imageTag":"${MODULES_MODULE_TAG}"}}'

          OUTER

  lint_go:
    runs-on: ubuntu-latest
    name: Run go linter
    steps:
      - name: Set up Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install Task
        uses: arduino/setup-task@v2

      - uses: actions/checkout@v4

      - name: Run lint virtualization-controller
        run: |
          task virtualization-controller:init
          task virtualization-controller:lint:go

  lint_yaml:
    runs-on: ubuntu-latest
    name: Run yaml linter
    steps:
      - name: Install Task
        uses: arduino/setup-task@v2

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Lint yaml with prettier
        run: task -p lint:prettier:yaml

  test:
    runs-on: ubuntu-latest
    name: Run unit test
    steps:
      - name: Set up Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install Task
        uses: arduino/setup-task@v2

      - uses: actions/checkout@v4

      - name: Run test hooks
        run: |
          task hooks:test

      - name: Run unit test virtualization-controller
        run: |
          task virtualization-controller:init
          task virtualization-controller:test:unit

  dev_setup_build:
    runs-on: ubuntu-latest
    name: Build and Push images
    steps:
      - name: Set vars for PR
        if: ${{ github.ref_name != 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo pr${{github.event.pull_request.number}})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Set vars for main
        if: ${{ github.ref_name == 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo v0.0.0-${{ github.ref_name }})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Print vars
        run: |
          echo MODULES_REGISTRY=$MODULES_REGISTRY
          echo CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
          echo MODULES_MODULE_NAME=$MODULES_MODULE_NAME
          echo MODULES_MODULE_SOURCE=$MODULES_MODULE_SOURCE
          echo MODULES_MODULE_TAG=$MODULES_MODULE_TAG

      - name: sizes
        run: |
          echo /opt/hostedtoolcache
          du -shc /opt/hostedtoolcache/* || true
          echo
          echo /opt/microsoft
          du -shc /opt/microsoft/* || true
          echo
          echo /opt/az
          du -shc /opt/az/* || true
          echo
          echo /usr/local/lib
          du -shc /usr/local/lib/* || true
          echo
          echo /usr/local/share
          du -shc /usr/local/share/* || true
          echo
          echo /usr/share
          du -shc /usr/share/* || true
          echo

          echo /var/lib/docker
          du -shc /var/lib/docker/* || true
          echo

          echo "Total size:"
          du -shc /opt/hostedtoolcache /opt/microsoft /opt/az /usr/local/lib /usr/local/share /usr/share /var/lib/docker || true
                    
          echo
          echo
          echo Docker images:
          docker images -a

      - name: remove-unwanted-software
        run: |
          echo "=== Available space before cleanup"
          df -h
          function cleanup_dir() {
            dir=$1
            TIMEFORMAT="Cleanup ${dir} took %R seconds"
            time {
              echo "Remove ${desc}"
              sudo rm -rf $dir || true
            }
          }
          
          echo "Remove CodeQL ... (5.0G)" 
          cleanup_dir /opt/hostedtoolcache/CodeQL
          echo "Remove Android ... (8.9G)"
          cleanup_dir /usr/local/lib/android
          echo "Remove Azure tools ... (747M)"
          cleanup_dir /opt/az

          echo "Remove chromium ... (510M)"
          cleanup_dir /usr/local/share/chromium

          echo "Remove DotNet ... (???)"
          cleanup_dir /usr/share/dotnet

          echo "Remove Julia ... (579M)"
          cleanup_dir /usr/local/julia1.10.2

          echo "Remove MS Tools: MS Edge ... (559M)"
          cleanup_dir /opt/microsoft/msedge
          echo "Remove MS Tools: powershell ... (175M)"
          cleanup_dir /usr/local/share/powershell
          
          
          echo "Remove AWS tools ... (403M)"
          cleanup_dir /usr/local/aws-cli
          cleanup_dir /usr/local/aws-sam-cli
          
          echo "Remove preinstalled Docker images ..."
          sudo docker image prune --all --force > /dev/null
          
          
          echo "=== Available space after cleanup"
          df -h

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove unwanted software
        uses: ./.github/actions/remove-unwanted-software

      - uses: deckhouse/modules-actions/setup@v1
      - uses: deckhouse/modules-actions/build@v1

      - run: |
              IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
              IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):main"
              echo "âœ¨ Bundle image : Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
              crane copy ${IMAGE_SRC} ${IMAGE_DST}
        if: ${{ github.ref_name == 'main' }}
        name: Bundle image tag main
