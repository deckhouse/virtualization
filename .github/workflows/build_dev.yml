name: Build and push for dev

env:
  MODULES_REGISTRY: ${{ vars.DEV_REGISTRY }}
  CI_COMMIT_REF_NAME: ${{ github.ref_name }}
  MODULES_MODULE_NAME: ${{ vars.MODULE_NAME }}
  MODULES_MODULE_SOURCE: ${{ vars.DEV_MODULE_SOURCE }}
  MODULES_REGISTRY_LOGIN: ${{ secrets.DEV_MODULES_REGISTRY_LOGIN }}
  MODULES_REGISTRY_PASSWORD: ${{ secrets.DEV_MODULES_REGISTRY_PASSWORD }}

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, edited, synchronize ]
  # push:
  #   branches:
  #     - main
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Run linter
    steps:
      - name: Set up Go 1.20
        uses: actions/setup-go@v5
        with:
          go-version: "1.20"
      
      - name: Install Task
        uses: arduino/setup-task@v1
      
      - uses: actions/checkout@v4
      
      - name: Run lint virtualization-controller
        run: |
          task virtualization-controller:init
          task virtualization-controller:lint:go
        shell: bash

      - name: Run yaml-lint
        id: yaml-lint
        uses: ibiqlik/action-yamllint@v3

      - name: Show log from step "Run yaml-lint"
        run: echo ${{ steps.yaml-lint.outputs.logfile }}
  
  
  test:
    runs-on: ubuntu-latest
    name: Run unit test
    steps:
      - name: Set up Go 1.20
        uses: actions/setup-go@v5
        with:
          go-version: "1.20"
      
      - name: Install Task
        uses: arduino/setup-task@v1
      
      - uses: actions/checkout@v4
      
      - name: Run test hooks
        run: |
          task hooks:test
        shell: bash

      - name: Run unit test virtualization-controller
        run: |
          task virtualization-controller:init
          task virtualization-controller:test:unit
        shell: bash

  dev_setup_build:
    runs-on: ubuntu-latest
    name: Build and Push images
    needs:
      - lint
      - test
    steps:
      - name: Set vars for manually run job
        if: ${{ github.event.pull_request.number == null && github.ref_name != 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo pr${{ github.ref_name}} | sed 's/\/.*//g')"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"
        shell: bash
      
      - name: Set vars for PR
        if: ${{ github.ref_name != 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo pr${{github.event.pull_request.number}})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"
        shell: bash
      
      - name: Set vars for main
        if: ${{ github.ref_name == 'main' }}
        run: |
          echo "MODULES_MODULE_TAG=${{ github.ref_name }}" >> "$GITHUB_ENV"
        shell: bash
      
      - name: Print vars
        run: |
          echo MODULES_REGISTRY=$MODULES_REGISTRY
          echo CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
          echo MODULES_MODULE_NAME=$MODULES_MODULE_NAME
          echo MODULES_MODULE_SOURCE=$MODULES_MODULE_SOURCE
          echo MODULES_MODULE_TAG=$MODULES_MODULE_TAG
        shell: bash

      - uses: actions/checkout@v4
      - uses: deckhouse/modules-actions/setup@v1
      - uses: deckhouse/modules-actions/build@v1

      - name: Register the module 
        run: |
          echo "âœ¨ Register the module ${MODULES_MODULE_NAME}"
          crane append \
            --oci-empty-base \
            --new_layer "" \
            --new_tag "${MODULES_MODULE_SOURCE}:${MODULES_MODULE_NAME}"
        shell: bash
