# Copyright 2024 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build main, pre-alpha every 8 hours for dev
env:
  MODULES_REGISTRY: ${{ vars.DEV_REGISTRY }}
  CI_COMMIT_REF_NAME: ${{ github.ref_name }}
  MODULES_MODULE_NAME: ${{ vars.MODULE_NAME }}
  MODULES_MODULE_SOURCE: ${{ vars.DEV_MODULE_SOURCE }}
  MODULES_REGISTRY_LOGIN: ${{ vars.DEV_MODULES_REGISTRY_LOGIN }}
  MODULES_REGISTRY_PASSWORD: ${{ secrets.DEV_MODULES_REGISTRY_PASSWORD }}
  SOURCE_REPO: "${{secrets.SOURCE_REPO}}"
on:
  workflow_dispatch:
  schedule:
    - cron: "0 */8 * * *"
defaults:
  run:
    shell: bash
jobs:
  build_branches:
    name: Build main
    # runs-on: ubuntu-22.04
    runs-on: [self-hosted, regular, selectel]
    strategy:
      matrix:
        branch: [main, pre-alpha]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}

      - name: Set vars
        id: modules_module_tag
        run: |
          branch="${{ matrix.branch }}"
          if [[ "$branch" == 'pre-alpha' || "$branch" == 'main' ]]; then
            MODULES_MODULE_TAG="$branch"
          else
            MODULES_MODULE_TAG="pr${{ github.event.pull_request.number }}"
          fi
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"
          echo "MODULE_EDITION=EE" >> "$GITHUB_ENV"

      # - name: Remove unwanted software
      #   uses: ./.github/actions/remove-unwanted-software

      # - uses: deckhouse/modules-actions/setup@v1
      - uses: werf/actions/install@v1.2
      - uses: imjasonh/setup-crane@v0.4

      - run: werf version
        shell: bash
        name: Print werf version
        
      - run: crane version
        shell: bash
        name: Print crane version

      - run: werf cr login -u ${MODULES_REGISTRY_LOGIN} -p ${MODULES_REGISTRY_PASSWORD} ${MODULES_REGISTRY}
        shell: bash
        name: Werf login registry

      # - uses: deckhouse/modules-actions/build@v1

      - run: |
              source "$(werf ci-env github --as-file)"
              werf build --repo=${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME} --save-build-report --build-report-path images_tags_werf.json
              
        shell: bash
        name: Step 1 - Build images

      - run: |
              IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
              IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):${MODULES_MODULE_TAG}"
              echo "✨ Bundle image : Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
              crane copy ${IMAGE_SRC} ${IMAGE_DST}
              
        shell: bash
        name: Step 2 - Bundle image
        
      - run: |
              IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
              IMAGE_DST="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)/release:${MODULES_MODULE_TAG}"
              echo "✨ Release-channel image : Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
              crane copy ${IMAGE_SRC} ${IMAGE_DST}
              
        shell: bash
        name: Step 3 - Release-channel image

      - run: |
              echo "✨ Register the module ${MODULES_MODULE_NAME}"
              crane append \
                --oci-empty-base \
                --new_layer "" \
                --new_tag "${MODULES_MODULE_SOURCE}:${MODULES_MODULE_NAME}"
        shell: bash
        name: Step 4 - Module registration
