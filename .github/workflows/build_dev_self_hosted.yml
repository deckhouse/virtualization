name: Build and push for dev (Self-hosted)

env:
  MODULES_REGISTRY: ${{ vars.DEV_REGISTRY }}
  CI_COMMIT_REF_NAME: ${{ github.ref_name }}
  MODULES_MODULE_NAME: ${{ vars.MODULE_NAME }}
  MODULES_MODULE_SOURCE: ${{ vars.DEV_MODULE_SOURCE }}
  MODULES_REGISTRY_LOGIN: ${{ vars.DEV_MODULES_REGISTRY_LOGIN }}
  MODULES_REGISTRY_PASSWORD: ${{ secrets.DEV_MODULES_REGISTRY_PASSWORD }}

on:
  pull_request:
    types: [ labeled ]

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  check_label:
    name: Check label
    if: ${{ github.event.label.name == 'build/self-hosted/virt-runners' }}
    runs-on: [self-hosted, ci-testing]
    outputs:
      should_run: ${{ steps.check_label.outputs.should_run }}
    steps:
      - id: check_label
        name: Check label
        run: echo "should_run=true"  >> $GITHUB_OUTPUT

  show_dev_manifest:
    needs: check_label
    if: needs.check_label.outputs.should_run
    runs-on: [self-hosted, ci-testing]
    name: Show manifest
    steps:
      - name: Set vars for PR
        if: ${{ github.ref_name != 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo ${{github.event.pull_request.number}})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Set vars for main
        if: ${{ github.ref_name == 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo v0.0.0-${{ github.ref_name }})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Show dev config
        run: |
          cat << OUTER
          Create ModuleConfig and ModulePullOverride resources to test this MR:
          cat <<EOF | kubectl apply -f -
          ---
          apiVersion: deckhouse.io/v1alpha1
          kind: ModulePullOverride
          metadata:
            name: ${MODULES_MODULE_NAME}
          spec:
            imageTag: ${MODULES_MODULE_TAG}
            source: deckhouse

          ---
          apiVersion: deckhouse.io/v1alpha1
          kind: ModuleConfig
          metadata:
            name: ${MODULES_MODULE_NAME}
          spec:
            enabled: true
            settings:
              dvcr:
                storage:
                  type: PersistentVolumeClaim
                  persistentVolumeClaim:
                    size: 50G
              virtualMachineCIDRs:
                - 10.66.10.0/24
                - 10.66.20.0/24
                - 10.66.30.0/24
            version: 1
          EOF

          Or patch an existing ModulePullOverride:

          kubectl patch mpo ${MODULES_MODULE_NAME} --type merge -p '{"spec":{"imageTag":"${MODULES_MODULE_TAG}"}}'

          OUTER

  lint_go:
    needs: check_label
    if: needs.check_label.outputs.should_run
    runs-on: [self-hosted, ci-testing]
    name: Run go linter
    steps:
      - name: Set up Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install Task
        uses: arduino/setup-task@v1

      - uses: actions/checkout@v4

      - name: Run lint virtualization-controller
        run: |
          task virtualization-controller:init
          task virtualization-controller:lint:go

  lint_yaml:
    needs: check_label
    if: needs.check_label.outputs.should_run
    runs-on: [self-hosted, ci-testing]
    name: Run yaml linter
    steps:
      - name: Install Task
        uses: arduino/setup-task@v1

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Lint yaml with prettier
        run: task -p lint:prettier:yaml

  
  test:
    needs: check_label
    if: needs.check_label.outputs.should_run
    runs-on: [self-hosted, ci-testing]
    name: Run unit test
    steps:
      - name: Set up Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install Task
        uses: arduino/setup-task@v1

      - uses: actions/checkout@v4

      - name: Run test hooks
        run: |
          task hooks:test

      - name: Run unit test virtualization-controller
        run: |
          task virtualization-controller:init
          task virtualization-controller:test:unit

  dev_setup_build:
    needs: check_label
    if: needs.check_label.outputs.should_run
    runs-on: [self-hosted, ci-testing]
    name: Build and Push images
    steps:
      - name: Set vars for PR
        if: ${{ github.ref_name != 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo pr${{github.event.pull_request.number}})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Set vars for main
        if: ${{ github.ref_name == 'main' }}
        run: |
          MODULES_MODULE_TAG="$(echo v0.0.0-${{ github.ref_name }})"
          echo "MODULES_MODULE_TAG=$MODULES_MODULE_TAG" >> "$GITHUB_ENV"

      - name: Print vars
        run: |
          echo MODULES_REGISTRY=$MODULES_REGISTRY
          echo CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
          echo MODULES_MODULE_NAME=$MODULES_MODULE_NAME
          echo MODULES_MODULE_SOURCE=$MODULES_MODULE_SOURCE
          echo MODULES_MODULE_TAG=$MODULES_MODULE_TAG
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: deckhouse/modules-actions/setup@v1
      - uses: deckhouse/modules-actions/build@v1
      
      - run: |
            IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
            IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):main"
            echo "âœ¨ Bundle image : Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
            crane copy ${IMAGE_SRC} ${IMAGE_DST} 
        if: ${{ github.ref_name == 'main' }}
        name: Bundle image tag main
