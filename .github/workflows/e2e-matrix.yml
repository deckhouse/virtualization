# Copyright 2025 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: E2E Matrix Tests (DVP-over-DVP)

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
    branches:
      - main
      - feat/ci-e2e-matrix
  schedule:
    - cron: "30 2 * * *"
  workflow_dispatch:
    inputs:
      profiles:
        description: "Storage profiles (comma-separated): sds, cephrbd"
        required: false
        default: "sds,cephrbd"
      timeout:
        description: "Ginkgo timeout (e.g. 2h, 4h)"
        required: false
        default: "4h"

permissions:
  contents: read

env:
  E2E_K8S_URL: https://api.e2e.virtlab.flant.com

jobs:
  # ============================================
  # 1. SETUP - Environment preparation
  # ============================================
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      profiles: ${{ steps.load.outputs.profiles }}
    steps:
      - uses: actions/checkout@v4

      - name: Load storage profiles
        id: load
        run: |
          # Load profiles dynamically from profiles.json
          cd ci/dvp-e2e
          PROFILES=$(jq -r '[.[].name] | @json' profiles.json)
          echo "profiles=$PROFILES" >> "$GITHUB_OUTPUT"

      - name: Print matrix
        run: |
          echo "Will test profiles: ${{ steps.load.outputs.profiles }}"

  # validate job removed

  # ============================================
  # 2. E2E - Parallel test execution
  # ============================================
  e2e:
    name: E2E (${{ matrix.profile }})
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 300
    concurrency:
      group: e2e-${{ github.ref }}-${{ matrix.profile }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        profile: ${{ fromJson(needs.setup.outputs.profiles) }}

    env:
      GO_VERSION: "1.24.6"
      TMP_ROOT: ${{ github.workspace }}/ci/dvp-e2e/tmp
      LOOP_WEBHOOK: ${{ secrets.LOOP_WEBHOOK_URL || secrets.LOOP_WEBHOOK }}
      LOOP_CHANNEL: ${{ secrets.LOOP_CHANNEL || 'test-virtualization-loop-alerts' }} # TODO: replace with channel secret after successful run

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.17.2

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Deckhouse CLI
        run: |
          echo "Installing d8 CLI..."
          curl -fsSL -o d8-install.sh https://raw.githubusercontent.com/deckhouse/deckhouse-cli/main/d8-install.sh
          bash d8-install.sh
          rm -f d8-install.sh

      - name: Install yq
        run: |
          echo "Installing yq..."
          curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Prepare environment
        id: prep
        run: |
          RUN_ID="nightly-nested-e2e-${{ matrix.profile }}-$(date +%m%d-%H%M)"
          echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
          echo "PROFILE=${{ matrix.profile }}" >> "$GITHUB_ENV"
          echo "TMP_ROOT=${{ env.TMP_ROOT }}" >> "$GITHUB_ENV"
          mkdir -p "${{ env.TMP_ROOT }}/shared" "${{ env.TMP_ROOT }}/matrix-logs"

      - name: Build parent kubeconfig from secret
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.kube"
          cat > "$HOME/.kube/config" <<EOF
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              server: ${E2E_K8S_URL}
              insecure-skip-tls-verify: true
            name: parent
          contexts:
          - context:
              cluster: parent
              user: sa
            name: parent
          current-context: parent
          users:
          - name: sa
            user:
              token: "${{ secrets.E2E_NESTED_SA_SECRET }}"
          EOF
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"

      - name: Configure registry auth
        uses: deckhouse/modules-actions/setup@v2
        with:
          registry: ${{ vars.DEV_REGISTRY }}
          registry_login: ${{ vars.DEV_MODULES_REGISTRY_LOGIN }}
          registry_password: ${{ secrets.DEV_MODULES_REGISTRY_PASSWORD }}

      - name: Docker login for install image
        run: |
          set -euo pipefail
          REGISTRY_HOST="${{ vars.DEV_REGISTRY || 'dev-registry.deckhouse.io' }}"
          USERNAME="${{ vars.DEV_MODULES_REGISTRY_LOGIN }}"
          PASSWORD="${{ secrets.DEV_MODULES_REGISTRY_PASSWORD }}"
          if [ -z "$REGISTRY_HOST" ] || [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
            echo "Missing registry credentials for install image pull" >&2
            exit 1
          fi
          echo "$PASSWORD" | docker login "$REGISTRY_HOST" -u "$USERNAME" --password-stdin

      - name: Configure storage profile
        working-directory: ci/dvp-e2e
        id: profile-config
        env:
          PROFILE: ${{ matrix.profile }}
        run: |
          # Get storage class configuration from profiles.json
          PROFILE_CONFIG=$(./scripts/get_profile_config.sh "${PROFILE}")
          
          # Parse the output more carefully
          STORAGE_CLASS=$(echo "$PROFILE_CONFIG" | grep "^STORAGE_CLASS=" | cut -d'=' -f2)
          IMAGE_STORAGE_CLASS=$(echo "$PROFILE_CONFIG" | grep "^IMAGE_STORAGE_CLASS=" | cut -d'=' -f2)
          SNAPSHOT_STORAGE_CLASS=$(echo "$PROFILE_CONFIG" | grep "^SNAPSHOT_STORAGE_CLASS=" | cut -d'=' -f2)
          
          echo "Profile: ${PROFILE}"
          echo "Storage Class: ${STORAGE_CLASS}"
          echo "Image Storage Class: ${IMAGE_STORAGE_CLASS}"
          echo "Snapshot Storage Class: ${SNAPSHOT_STORAGE_CLASS}"
          
          # Export variables safely
          echo "STORAGE_CLASS=${STORAGE_CLASS}" >> $GITHUB_ENV
          echo "IMAGE_STORAGE_CLASS=${IMAGE_STORAGE_CLASS}" >> $GITHUB_ENV
          echo "SNAPSHOT_STORAGE_CLASS=${SNAPSHOT_STORAGE_CLASS}" >> $GITHUB_ENV

      - name: Bootstrap nested cluster
        working-directory: ci/dvp-e2e
        run: |
          echo "🚀 Starting cluster bootstrap for profile: ${{ matrix.profile }}"
          task nested:cluster:create \
            RUN_ID="${{ env.RUN_ID }}" \
            RUN_NAMESPACE="${{ env.RUN_ID }}" \
            STORAGE_PROFILE="${{ matrix.profile }}" \
            PARENT_KUBECONFIG="${KUBECONFIG}" \
            SSH_FILE_NAME="cloud"

      - name: Configure storage classes
        working-directory: ci/dvp-e2e
        run: |
          echo "💾 Configuring storage classes for profile: ${{ matrix.profile }}"
          task nested:storage:configure \
            STORAGE_PROFILE="${{ matrix.profile }}" \
            TMP_DIR="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}" \
            VALUES_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/values.yaml" \
            GENERATED_VALUES_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/generated-values.yaml" \
            SSH_DIR="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/ssh" \
            SSH_FILE_NAME="cloud" \
            PASSWORD_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/password.txt" \
            PASSWORD_HASH_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/password-hash.txt" \
            NAMESPACE="${{ env.RUN_ID }}" \
            DOMAIN="" \
            DEFAULT_USER="ubuntu" \
            NESTED_DIR="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/nested" \
            NESTED_KUBECONFIG="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/nested/kubeconfig"

      - name: Run E2E tests
        working-directory: ci/dvp-e2e
        run: |
          echo "🧪 Running E2E tests for profile: ${{ matrix.profile }}"
          task nested:e2e \
            TMP_DIR="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}" \
            VALUES_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/values.yaml" \
            GENERATED_VALUES_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/generated-values.yaml" \
            SSH_DIR="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/ssh" \
            SSH_FILE_NAME="cloud" \
            PASSWORD_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/password.txt" \
            PASSWORD_HASH_FILE="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/password-hash.txt" \
            NAMESPACE="${{ env.RUN_ID }}" \
            DOMAIN="" \
            DEFAULT_USER="ubuntu" \
            PARENT_KUBECONFIG="${KUBECONFIG}" \
            STORAGE_PROFILE="${{ matrix.profile }}" \
            NESTED_DIR="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/nested" \
            NESTED_KUBECONFIG="${{ env.TMP_ROOT }}/runs/${{ env.RUN_ID }}/nested/kubeconfig" \
            JUNIT_PATH="../../artifacts/${{ env.RUN_ID }}/junit.xml" \
            FOCUS="" \
            SKIP="" \
            LABELS="" \
            STORAGE_CLASS="${STORAGE_CLASS}" \
            IMAGE_STORAGE_CLASS="${IMAGE_STORAGE_CLASS}" \
            SNAPSHOT_STORAGE_CLASS="${SNAPSHOT_STORAGE_CLASS}" \
            TIMEOUT="${{ inputs.timeout || '4h' }}"

      - name: Collect JUnit for this run
        if: always()
        run: |
          JUNIT_OUT="${{ github.workspace }}/ci/dvp-e2e/artifacts/${{ env.RUN_ID }}/junit.xml"
          mkdir -p "$(dirname "$JUNIT_OUT")"
          # JUnit file should already be created by nested:test-run task
          if [ -f "$JUNIT_OUT" ]; then
            echo "JUnit file found at $JUNIT_OUT"
          else
            echo "junit.xml not found at expected location $JUNIT_OUT"
          fi

      - name: Collect matrix log
        if: always()
        run: |
          mkdir -p ci/dvp-e2e/tmp/matrix-logs
          LOG="ci/dvp-e2e/tmp/matrix-logs/${RUN_ID}.log"
          {
            echo "[START] run_id=${RUN_ID} time=$(date -Iseconds)"
            echo "[FINISH] run_id=${RUN_ID} status=ok time=$(date -Iseconds)"
          } >> "$LOG"
          echo "✅ Created matrix log: $LOG"

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ env.RUN_ID }}
          path: ci/dvp-e2e/tmp/matrix-logs
          if-no-files-found: ignore

      - name: Upload JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ env.RUN_ID }}
          path: ci/dvp-e2e/artifacts
          if-no-files-found: ignore

      - name: Purge local artifacts and tmp
        if: always()
        run: |
          rm -rf ci/dvp-e2e/artifacts ci/dvp-e2e/tmp || true

  # ============================================
  # 3. REPORT - Result aggregation
  # ============================================
  report:
    name: Report Results
    needs: e2e
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all JUnit reports
        uses: actions/download-artifact@v4
        with:
          pattern: junit-*
          path: ./results
          merge-multiple: true

      - name: Download matrix logs
        uses: actions/download-artifact@v4
        with:
          pattern: logs-*
          path: ci/dvp-e2e/tmp/matrix-logs
          merge-multiple: true

      - name: Debug artifacts layout
        run: |
          echo "=== JUnit artifacts ==="
          find results -maxdepth 3 -type f -print || true
          echo "=== Matrix logs ==="
          find ci/dvp-e2e/tmp/matrix-logs -maxdepth 2 -type f -print || true

      - name: Generate matrix summary
        if: always()
        working-directory: ci/dvp-e2e
        run: |
          python3 scripts/loop_matrix_summary.py \
            --profiles "${{ join(needs.setup.outputs.profiles, ',') }}" \
            --run-id-prefix "nightly" \
            --log-dir "tmp/matrix-logs" \
            --webhook-url "${{ secrets.LOOP_WEBHOOK_URL || secrets.LOOP_WEBHOOK }}" \
            --channel "${{ secrets.LOOP_CHANNEL || 'test-virtualization-loop-alerts' }}" > matrix_summary.md || true
          DATE=$(date +"%Y-%m-%d")
          HASH=$(head -c 16 /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | head -c 8)
          kubectl apply -f - <<EOF || true
          apiVersion: v1
          kind: Secret
          metadata:
            name: "e2e-matrix-report-${DATE}-${HASH:0:8}"
            namespace: default
            labels:
              storageClass: "matrix"
          type: Opaque
          stringData:
            summary: |
              $(cat matrix_summary.md | sed 's/^/      /')
          EOF

      - name: Create test summary
        if: always()
        run: |
          echo "### E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Profile | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check each profile result
          for profile in sds cephrbd; do
            if [ -f "./results/junit-${profile}-*/junit.xml" ]; then
              echo "| $profile | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $profile | ❌ Failed/Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          done

  # ============================================
  # 4. CLEANUP - Resource cleanup
  # ============================================
  cleanup:
    name: Cleanup Resources
    needs: report
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Build parent kubeconfig from secret (cleanup)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.kube"
          cat > "$HOME/.kube/config" <<EOF
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              server: ${E2E_K8S_URL}
              insecure-skip-tls-verify: true
            name: parent
          contexts:
          - context:
              cluster: parent
              user: sa
            name: parent
          current-context: parent
          users:
          - name: sa
            user:
              token: "${{ secrets.E2E_NESTED_SA_SECRET }}"
          EOF
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"

      - name: Cleanup test namespaces
        working-directory: ci/dvp-e2e
        run: |
          echo "🧹 Cleaning up test namespaces..."
          task cleanup:cleanup:namespaces \
            FILTER_PREFIX="nightly-nested-e2e-"

      - name: Report cleanup results
        if: always()
        run: |
          echo "### Cleanup Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Cleanup job completed" >> $GITHUB_STEP_SUMMARY
          echo "🧹 Attempted to clean up namespaces matching 'nightly-nested-e2e-*'" >> $GITHUB_STEP_SUMMARY
